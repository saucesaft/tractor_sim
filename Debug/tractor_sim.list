
tractor_sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006694  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  080067c8  080067c8  000167c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f0  080073f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080073f0  080073f0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f0  080073f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080073f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001e0  080075d8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080075d8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002dff  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f34  00000000  00000000  0002304b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00023f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000028d  00000000  00000000  00024338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b94  00000000  00000000  000245c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004499  00000000  00000000  00028159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bb45  00000000  00000000  0002c5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f4c  00000000  00000000  00038138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0003a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e0 	.word	0x200001e0
 800014c:	00000000 	.word	0x00000000
 8000150:	080067ac 	.word	0x080067ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001e4 	.word	0x200001e4
 800016c:	080067ac 	.word	0x080067ac

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b092      	sub	sp, #72	; 0x48
 8001048:	af00      	add	r7, sp, #0
 800104a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800104e:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff fcc8 	bl	80009f0 <__aeabi_dcmple>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d020      	beq.n	80010a8 <look2_binlxpw+0x64>
    iLeft = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800106a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001074:	f7ff f888 	bl	8000188 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4614      	mov	r4, r2
 800107e:	461d      	mov	r5, r3
 8001080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001082:	3308      	adds	r3, #8
 8001084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff f87b 	bl	8000188 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff fb57 	bl	800074c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80010a6:	e08e      	b.n	80011c6 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80010a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010b0:	4413      	add	r3, r2
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ba:	f7ff fc8f 	bl	80009dc <__aeabi_dcmplt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d04d      	beq.n	8001160 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80010c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80010d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80010d6:	e016      	b.n	8001106 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80010d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010de:	4413      	add	r3, r2
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e8:	f7ff fc78 	bl	80009dc <__aeabi_dcmplt>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80010f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f6:	e001      	b.n	80010fc <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80010fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	4413      	add	r3, r2
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8001106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d8e3      	bhi.n	80010d8 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001116:	4413      	add	r3, r2
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001120:	f7ff f832 	bl	8000188 <__aeabi_dsub>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3301      	adds	r3, #1
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001134:	4413      	add	r3, r2
 8001136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001140:	4413      	add	r3, r2
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f81f 	bl	8000188 <__aeabi_dsub>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fafb 	bl	800074c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800115e:	e032      	b.n	80011c6 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8001160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001170:	3b01      	subs	r3, #1
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001176:	4413      	add	r3, r2
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001180:	f7ff f802 	bl	8000188 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4614      	mov	r4, r2
 800118a:	461d      	mov	r5, r3
 800118c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001194:	4413      	add	r3, r2
 8001196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80011a2:	3b01      	subs	r3, #1
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7fe ffeb 	bl	8000188 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fac7 	bl	800074c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80011c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d0:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80011d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011dc:	f7ff fc08 	bl	80009f0 <__aeabi_dcmple>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80011ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f4:	f7fe ffc8 	bl	8000188 <__aeabi_dsub>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001202:	3308      	adds	r3, #8
 8001204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7fe ffbb 	bl	8000188 <__aeabi_dsub>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff fa97 	bl	800074c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001226:	e095      	b.n	8001354 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001232:	4413      	add	r3, r2
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123c:	f7ff fbce 	bl	80009dc <__aeabi_dcmplt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d04f      	beq.n	80012e6 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001248:	3304      	adds	r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 800125c:	e016      	b.n	800128c <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 800125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001264:	4413      	add	r3, r2
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800126e:	f7ff fbb5 	bl	80009dc <__aeabi_dcmplt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800127c:	e001      	b.n	8001282 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	4413      	add	r3, r2
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 800128c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d8e3      	bhi.n	800125e <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800129c:	4413      	add	r3, r2
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012a6:	f7fe ff6f 	bl	8000188 <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b4:	3301      	adds	r3, #1
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012ba:	4413      	add	r3, r2
 80012bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012c6:	4413      	add	r3, r2
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe ff5c 	bl	8000188 <__aeabi_dsub>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff fa38 	bl	800074c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012e4:	e036      	b.n	8001354 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80012e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80012f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80012fa:	3b01      	subs	r3, #1
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001300:	4413      	add	r3, r2
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130a:	f7fe ff3d 	bl	8000188 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4614      	mov	r4, r2
 8001314:	461d      	mov	r5, r3
 8001316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001318:	3304      	adds	r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001320:	4413      	add	r3, r2
 8001322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001330:	3b01      	subs	r3, #1
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001336:	4413      	add	r3, r2
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ff24 	bl	8000188 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff fa00 	bl	800074c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001358:	fb03 f202 	mul.w	r2, r3, r2
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	4413      	add	r3, r2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8001362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001364:	3301      	adds	r3, #1
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800136a:	4413      	add	r3, r2
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001376:	4413      	add	r3, r2
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7fe ff04 	bl	8000188 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800138c:	f7ff f8b4 	bl	80004f8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800139e:	4413      	add	r3, r2
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fef2 	bl	800018c <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80013b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b4:	4413      	add	r3, r2
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80013b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ba:	3301      	adds	r3, #1
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013c0:	4413      	add	r3, r2
 80013c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013cc:	4413      	add	r3, r2
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7fe fed9 	bl	8000188 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e2:	f7ff f889 	bl	80004f8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7fe fec7 	bl	800018c <__adddf3>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800140a:	f7fe febd 	bl	8000188 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800141a:	f7ff f86d 	bl	80004f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800142a:	f7fe feaf 	bl	800018c <__adddf3>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
}
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	3748      	adds	r7, #72	; 0x48
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}

0800143c <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff facc 	bl	80009f0 <__aeabi_dcmple>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d020      	beq.n	80014a0 <look1_binlxpw+0x64>
    iLeft = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146c:	f7fe fe8c 	bl	8000188 <__aeabi_dsub>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3308      	adds	r3, #8
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe fe7f 	bl	8000188 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff f95b 	bl	800074c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800149e:	e087      	b.n	80015b0 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80014a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b0:	f7ff fa94 	bl	80009dc <__aeabi_dcmplt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d04b      	beq.n	8001552 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80014c8:	e016      	b.n	80014f8 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014da:	f7ff fa7f 	bl	80009dc <__aeabi_dcmplt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <look1_binlxpw+0xae>
        iRght = bpIdx;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	e001      	b.n	80014ee <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4413      	add	r3, r2
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d8e3      	bhi.n	80014ca <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001512:	f7fe fe39 	bl	8000188 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4614      	mov	r4, r2
 800151c:	461d      	mov	r5, r3
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	3301      	adds	r3, #1
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7fe fe26 	bl	8000188 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff f902 	bl	800074c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001550:	e02e      	b.n	80015b0 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	3b01      	subs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800155e:	3b01      	subs	r3, #1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800156e:	f7fe fe0b 	bl	8000188 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001588:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800158c:	3b01      	subs	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe fdf6 	bl	8000188 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f8d2 	bl	800074c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	3301      	adds	r3, #1
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fddd 	bl	8000188 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015da:	f7fe ff8d 	bl	80004f8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7fe fdcb 	bl	800018c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
}
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}

08001604 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800160e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001612:	3b01      	subs	r3, #1
 8001614:	2b03      	cmp	r3, #3
 8001616:	d86c      	bhi.n	80016f2 <EngTrModel_gear_state+0xee>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <EngTrModel_gear_state+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001651 	.word	0x08001651
 8001628:	0800166f 	.word	0x0800166f
 800162c:	080016a9 	.word	0x080016a9
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d155      	bne.n	80016e4 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800163a:	2203      	movs	r2, #3
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001640:	492f      	ldr	r1, [pc, #188]	; (8001700 <EngTrModel_gear_state+0xfc>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800164a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800164e:	e049      	b.n	80016e4 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d147      	bne.n	80016e8 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800165a:	2204      	movs	r2, #4
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001660:	4927      	ldr	r1, [pc, #156]	; (8001700 <EngTrModel_gear_state+0xfc>)
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <EngTrModel_gear_state+0x100>)
 8001668:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800166c:	e03c      	b.n	80016e8 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <EngTrModel_gear_state+0x8c>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d138      	bne.n	80016ec <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800167c:	2204      	movs	r2, #4
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001682:	491f      	ldr	r1, [pc, #124]	; (8001700 <EngTrModel_gear_state+0xfc>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <EngTrModel_gear_state+0x100>)
 800168a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 800168e:	e00a      	b.n	80016a6 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <EngTrModel_gear_state+0xf8>)
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 8001698:	4919      	ldr	r1, [pc, #100]	; (8001700 <EngTrModel_gear_state+0xfc>)
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <EngTrModel_gear_state+0x104>)
 80016a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80016a4:	bf00      	nop
    }
    break;
 80016a6:	e021      	b.n	80016ec <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <EngTrModel_gear_state+0xc6>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11d      	bne.n	80016f0 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <EngTrModel_gear_state+0xf8>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80016bc:	4910      	ldr	r1, [pc, #64]	; (8001700 <EngTrModel_gear_state+0xfc>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <EngTrModel_gear_state+0x108>)
 80016c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80016c8:	e00b      	b.n	80016e2 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <EngTrModel_gear_state+0xf8>)
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80016d2:	490b      	ldr	r1, [pc, #44]	; (8001700 <EngTrModel_gear_state+0xfc>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80016e0:	bf00      	nop
    }
    break;
 80016e2:	e005      	b.n	80016f0 <EngTrModel_gear_state+0xec>
    break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016f0:	bf00      	nop
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000230 	.word	0x20000230
 8001700:	20000200 	.word	0x20000200
 8001704:	40080000 	.word	0x40080000
 8001708:	3ff00000 	.word	0x3ff00000
 800170c:	40100000 	.word	0x40100000

08001710 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800171a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800171e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001722:	f001 f8e5 	bl	80028f0 <rtIsNaN>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <rt_powd_snf+0x2a>
 800172c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001730:	f001 f8de 	bl	80028f0 <rtIsNaN>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <rt_powd_snf+0x36>
    y = (rtNaN);
 800173a:	4b7e      	ldr	r3, [pc, #504]	; (8001934 <rt_powd_snf+0x224>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001744:	e0ef      	b.n	8001926 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001756:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 800175a:	68bc      	ldr	r4, [r7, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001762:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176a:	f001 f89d 	bl	80028a8 <rtIsInf>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d049      	beq.n	8001808 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <rt_powd_snf+0x228>)
 800177a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800177e:	f7ff f923 	bl	80009c8 <__aeabi_dcmpeq>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <rt_powd_snf+0x84>
        y = 1.0;
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <rt_powd_snf+0x228>)
 800178e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001792:	e0c8      	b.n	8001926 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b67      	ldr	r3, [pc, #412]	; (8001938 <rt_powd_snf+0x228>)
 800179a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800179e:	f7ff f93b 	bl	8000a18 <__aeabi_dcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b4:	f7ff f930 	bl	8000a18 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <rt_powd_snf+0xba>
          y = (rtInf);
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <rt_powd_snf+0x22c>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017c8:	e0ad      	b.n	8001926 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017d6:	e0a6      	b.n	8001926 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017e4:	f7ff f918 	bl	8000a18 <__aeabi_dcmpgt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <rt_powd_snf+0xec>
        y = 0.0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017fa:	e094      	b.n	8001926 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <rt_powd_snf+0x22c>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001806:	e08e      	b.n	8001926 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001814:	f7ff f8d8 	bl	80009c8 <__aeabi_dcmpeq>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <rt_powd_snf+0x11a>
      y = 1.0;
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <rt_powd_snf+0x228>)
 8001824:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001828:	e07d      	b.n	8001926 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <rt_powd_snf+0x228>)
 8001830:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001834:	f7ff f8c8 	bl	80009c8 <__aeabi_dcmpeq>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01b      	beq.n	8001876 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184a:	f7ff f8e5 	bl	8000a18 <__aeabi_dcmpgt>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <rt_powd_snf+0x14e>
        y = u0;
 8001854:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001858:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800185c:	e063      	b.n	8001926 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 800185e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	4934      	ldr	r1, [pc, #208]	; (8001938 <rt_powd_snf+0x228>)
 8001868:	f7fe ff70 	bl	800074c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001874:	e057      	b.n	8001926 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800187e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001882:	f7ff f8a1 	bl	80009c8 <__aeabi_dcmpeq>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <rt_powd_snf+0x192>
      y = u0 * u0;
 800188c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001890:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001894:	f7fe fe30 	bl	80004f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80018a0:	e041      	b.n	8001926 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <rt_powd_snf+0x230>)
 80018a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ac:	f7ff f88c 	bl	80009c8 <__aeabi_dcmpeq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d011      	beq.n	80018da <rt_powd_snf+0x1ca>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c2:	f7ff f89f 	bl	8000a04 <__aeabi_dcmpge>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 80018cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d0:	f004 f826 	bl	8005920 <sqrt>
 80018d4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80018d8:	e025      	b.n	8001926 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e6:	f7ff f879 	bl	80009dc <__aeabi_dcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d012      	beq.n	8001916 <rt_powd_snf+0x206>
 80018f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f4:	f004 f918 	bl	8005b28 <floor>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001900:	f7ff f88a 	bl	8000a18 <__aeabi_dcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <rt_powd_snf+0x206>
      y = (rtNaN);
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <rt_powd_snf+0x224>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001914:	e007      	b.n	8001926 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800191a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800191e:	f003 ff97 	bl	8005850 <pow>
 8001922:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	20000290 	.word	0x20000290
 8001938:	3ff00000 	.word	0x3ff00000
 800193c:	20000280 	.word	0x20000280
 8001940:	3fe00000 	.word	0x3fe00000
 8001944:	00000000 	.word	0x00000000

08001948 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <EngTrModel_step+0x238>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	498b      	ldr	r1, [pc, #556]	; (8001b84 <EngTrModel_step+0x23c>)
 8001956:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 800195a:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <EngTrModel_step+0x23c>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	4989      	ldr	r1, [pc, #548]	; (8001b88 <EngTrModel_step+0x240>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001966:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <EngTrModel_step+0x238>)
 8001968:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 800196c:	a380      	add	r3, pc, #512	; (adr r3, 8001b70 <EngTrModel_step+0x228>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fdc1 	bl	80004f8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 800197e:	a37e      	add	r3, pc, #504	; (adr r3, 8001b78 <EngTrModel_step+0x230>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fdb8 	bl	80004f8 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 800198c:	497d      	ldr	r1, [pc, #500]	; (8001b84 <EngTrModel_step+0x23c>)
 800198e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001996:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <EngTrModel_step+0x238>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d004      	beq.n	80019ac <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <EngTrModel_step+0x238>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <EngTrModel_step+0x238>)
 80019aa:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 80019ac:	4b74      	ldr	r3, [pc, #464]	; (8001b80 <EngTrModel_step+0x238>)
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11a      	bne.n	80019ec <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <EngTrModel_step+0x238>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 80019be:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <EngTrModel_step+0x238>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80019c6:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <EngTrModel_step+0x238>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 80019ce:	496d      	ldr	r1, [pc, #436]	; (8001b84 <EngTrModel_step+0x23c>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <EngTrModel_step+0x244>)
 80019d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <EngTrModel_step+0x238>)
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <EngTrModel_step+0x238>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80019ea:	e0e4      	b.n	8001bb6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <EngTrModel_step+0x238>)
 80019ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe03 	bl	8001604 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <EngTrModel_step+0x238>)
 8001a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80d6 	beq.w	8001bb6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a0a:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <EngTrModel_step+0x248>)
 8001a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a10:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <EngTrModel_step+0x23c>)
 8001a12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a16:	2406      	movs	r4, #6
 8001a18:	9404      	str	r4, [sp, #16]
 8001a1a:	4c5e      	ldr	r4, [pc, #376]	; (8001b94 <EngTrModel_step+0x24c>)
 8001a1c:	9403      	str	r4, [sp, #12]
 8001a1e:	4c5e      	ldr	r4, [pc, #376]	; (8001b98 <EngTrModel_step+0x250>)
 8001a20:	9402      	str	r4, [sp, #8]
 8001a22:	4c5e      	ldr	r4, [pc, #376]	; (8001b9c <EngTrModel_step+0x254>)
 8001a24:	9401      	str	r4, [sp, #4]
 8001a26:	4c5e      	ldr	r4, [pc, #376]	; (8001ba0 <EngTrModel_step+0x258>)
 8001a28:	9400      	str	r4, [sp, #0]
 8001a2a:	f7ff fb0b 	bl	8001044 <look2_binlxpw>
 8001a2e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <EngTrModel_step+0x248>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <EngTrModel_step+0x23c>)
 8001a3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a3e:	2406      	movs	r4, #6
 8001a40:	9404      	str	r4, [sp, #16]
 8001a42:	4c54      	ldr	r4, [pc, #336]	; (8001b94 <EngTrModel_step+0x24c>)
 8001a44:	9403      	str	r4, [sp, #12]
 8001a46:	4c57      	ldr	r4, [pc, #348]	; (8001ba4 <EngTrModel_step+0x25c>)
 8001a48:	9402      	str	r4, [sp, #8]
 8001a4a:	4c54      	ldr	r4, [pc, #336]	; (8001b9c <EngTrModel_step+0x254>)
 8001a4c:	9401      	str	r4, [sp, #4]
 8001a4e:	4c56      	ldr	r4, [pc, #344]	; (8001ba8 <EngTrModel_step+0x260>)
 8001a50:	9400      	str	r4, [sp, #0]
 8001a52:	f7ff faf7 	bl	8001044 <look2_binlxpw>
 8001a56:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <EngTrModel_step+0x238>)
 8001a5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d05a      	beq.n	8001b1a <EngTrModel_step+0x1d2>
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	f300 80a6 	bgt.w	8001bb6 <EngTrModel_step+0x26e>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d002      	beq.n	8001a74 <EngTrModel_step+0x12c>
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d02e      	beq.n	8001ad0 <EngTrModel_step+0x188>
 8001a72:	e0a0      	b.n	8001bb6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <EngTrModel_step+0x238>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d919      	bls.n	8001ab0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <EngTrModel_step+0x23c>)
 8001a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001a82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a86:	f7fe ffbd 	bl	8000a04 <__aeabi_dcmpge>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00f      	beq.n	8001ab0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <EngTrModel_step+0x238>)
 8001a96:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fdaf 	bl	8001604 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <EngTrModel_step+0x238>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001aae:	e082      	b.n	8001bb6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <EngTrModel_step+0x23c>)
 8001ab2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ab6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aba:	f7fe ff8f 	bl	80009dc <__aeabi_dcmplt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <EngTrModel_step+0x17e>
        break;
 8001ac4:	e077      	b.n	8001bb6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <EngTrModel_step+0x238>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001ace:	e072      	b.n	8001bb6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <EngTrModel_step+0x23c>)
 8001ad2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ada:	f7fe ff7f 	bl	80009dc <__aeabi_dcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <EngTrModel_step+0x238>)
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <EngTrModel_step+0x238>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001af2:	e060      	b.n	8001bb6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <EngTrModel_step+0x23c>)
 8001af6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001afa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afe:	f7fe ff8b 	bl	8000a18 <__aeabi_dcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d100      	bne.n	8001b0a <EngTrModel_step+0x1c2>
        break;
 8001b08:	e055      	b.n	8001bb6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <EngTrModel_step+0x238>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <EngTrModel_step+0x238>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
        break;
 8001b18:	e04d      	b.n	8001bb6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <EngTrModel_step+0x238>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d919      	bls.n	8001b56 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <EngTrModel_step+0x23c>)
 8001b24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2c:	f7fe ff60 	bl	80009f0 <__aeabi_dcmple>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00f      	beq.n	8001b56 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <EngTrModel_step+0x238>)
 8001b3c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fd5c 	bl	8001604 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <EngTrModel_step+0x238>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001b54:	e02e      	b.n	8001bb4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <EngTrModel_step+0x23c>)
 8001b58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b60:	f7fe ff5a 	bl	8000a18 <__aeabi_dcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d120      	bne.n	8001bac <EngTrModel_step+0x264>
        break;
 8001b6a:	e023      	b.n	8001bb4 <EngTrModel_step+0x26c>
 8001b6c:	f3af 8000 	nop.w
 8001b70:	54442d18 	.word	0x54442d18
 8001b74:	401921fb 	.word	0x401921fb
 8001b78:	745d1746 	.word	0x745d1746
 8001b7c:	3f8745d1 	.word	0x3f8745d1
 8001b80:	20000230 	.word	0x20000230
 8001b84:	20000200 	.word	0x20000200
 8001b88:	20000268 	.word	0x20000268
 8001b8c:	3ff00000 	.word	0x3ff00000
 8001b90:	20000258 	.word	0x20000258
 8001b94:	08006ff8 	.word	0x08006ff8
 8001b98:	080067c8 	.word	0x080067c8
 8001b9c:	080068b8 	.word	0x080068b8
 8001ba0:	08006888 	.word	0x08006888
 8001ba4:	080068d8 	.word	0x080068d8
 8001ba8:	08006998 	.word	0x08006998
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <EngTrModel_step+0x478>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001bb4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001bb6:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001bb8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <EngTrModel_step+0x480>)
 8001bc2:	4a82      	ldr	r2, [pc, #520]	; (8001dcc <EngTrModel_step+0x484>)
 8001bc4:	f7ff fc3a 	bl	800143c <look1_binlxpw>
 8001bc8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001bcc:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <EngTrModel_step+0x478>)
 8001bce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bd2:	a375      	add	r3, pc, #468	; (adr r3, 8001da8 <EngTrModel_step+0x460>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fc8e 	bl	80004f8 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4978      	ldr	r1, [pc, #480]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001be2:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001be6:	4b77      	ldr	r3, [pc, #476]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f7fe fee8 	bl	80009c8 <__aeabi_dcmpeq>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c08:	f7fe fc76 	bl	80004f8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fd97 	bl	800074c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c26:	e005      	b.n	8001c34 <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c36:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c3a:	2314      	movs	r3, #20
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <EngTrModel_step+0x488>)
 8001c40:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <EngTrModel_step+0x48c>)
 8001c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c46:	f7ff fbf9 	bl	800143c <look1_binlxpw>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fd7b 	bl	800074c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c66:	f7ff fd53 	bl	8001710 <rt_powd_snf>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4955      	ldr	r1, [pc, #340]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c70:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c74:	2314      	movs	r3, #20
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <EngTrModel_step+0x490>)
 8001c7a:	4a56      	ldr	r2, [pc, #344]	; (8001dd4 <EngTrModel_step+0x48c>)
 8001c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c80:	f7ff fbdc 	bl	800143c <look1_binlxpw>
 8001c84:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001c88:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c92:	f7fe fc31 	bl	80004f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ca2:	f7fe fc29 	bl	80004f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4946      	ldr	r1, [pc, #280]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cac:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001cb0:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cb2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cb6:	4949      	ldr	r1, [pc, #292]	; (8001ddc <EngTrModel_step+0x494>)
 8001cb8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cc2:	4946      	ldr	r1, [pc, #280]	; (8001ddc <EngTrModel_step+0x494>)
 8001cc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <EngTrModel_step+0x498>)
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	240a      	movs	r4, #10
 8001cd6:	9404      	str	r4, [sp, #16]
 8001cd8:	4c42      	ldr	r4, [pc, #264]	; (8001de4 <EngTrModel_step+0x49c>)
 8001cda:	9403      	str	r4, [sp, #12]
 8001cdc:	4c42      	ldr	r4, [pc, #264]	; (8001de8 <EngTrModel_step+0x4a0>)
 8001cde:	9402      	str	r4, [sp, #8]
 8001ce0:	4c42      	ldr	r4, [pc, #264]	; (8001dec <EngTrModel_step+0x4a4>)
 8001ce2:	9401      	str	r4, [sp, #4]
 8001ce4:	4c42      	ldr	r4, [pc, #264]	; (8001df0 <EngTrModel_step+0x4a8>)
 8001ce6:	9400      	str	r4, [sp, #0]
 8001ce8:	f7ff f9ac 	bl	8001044 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cf2:	f7fe fa49 	bl	8000188 <__aeabi_dsub>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001cfe:	a32c      	add	r3, pc, #176	; (adr r3, 8001db0 <EngTrModel_step+0x468>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fbf8 	bl	80004f8 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	a329      	add	r3, pc, #164	; (adr r3, 8001db8 <EngTrModel_step+0x470>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fbef 	bl	80004f8 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <EngTrModel_step+0x478>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fa30 	bl	800018c <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4923      	ldr	r1, [pc, #140]	; (8001dc0 <EngTrModel_step+0x478>)
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001d38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe fe4a 	bl	80009dc <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <EngTrModel_step+0x4ac>)
 8001d54:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d58:	e055      	b.n	8001e06 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001d5c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	f7fe fe56 	bl	8000a18 <__aeabi_dcmpgt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <EngTrModel_step+0x4b0>)
 8001d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d7c:	e043      	b.n	8001e06 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001d80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	f7fe fe1c 	bl	80009c8 <__aeabi_dcmpeq>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d032      	beq.n	8001dfc <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001da2:	e030      	b.n	8001e06 <EngTrModel_step+0x4be>
 8001da4:	f3af 8000 	nop.w
 8001da8:	3d70a3d7 	.word	0x3d70a3d7
 8001dac:	4009d70a 	.word	0x4009d70a
 8001db0:	0865b653 	.word	0x0865b653
 8001db4:	4046bc6f 	.word	0x4046bc6f
 8001db8:	47ae147b 	.word	0x47ae147b
 8001dbc:	3fa47ae1 	.word	0x3fa47ae1
 8001dc0:	20000230 	.word	0x20000230
 8001dc4:	20000200 	.word	0x20000200
 8001dc8:	08006de0 	.word	0x08006de0
 8001dcc:	080068b8 	.word	0x080068b8
 8001dd0:	08006e00 	.word	0x08006e00
 8001dd4:	08006ea8 	.word	0x08006ea8
 8001dd8:	08006f50 	.word	0x08006f50
 8001ddc:	20000268 	.word	0x20000268
 8001de0:	20000258 	.word	0x20000258
 8001de4:	08007000 	.word	0x08007000
 8001de8:	080069c8 	.word	0x080069c8
 8001dec:	08006d88 	.word	0x08006d88
 8001df0:	08006d38 	.word	0x08006d38
 8001df4:	bff00000 	.word	0xbff00000
 8001df8:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <EngTrModel_step+0x5a0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <EngTrModel_step+0x5a4>)
 8001e08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e0c:	a32e      	add	r3, pc, #184	; (adr r3, 8001ec8 <EngTrModel_step+0x580>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fb71 	bl	80004f8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <EngTrModel_step+0x5a4>)
 8001e20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e2c:	f7ff fc70 	bl	8001710 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e30:	a327      	add	r3, pc, #156	; (adr r3, 8001ed0 <EngTrModel_step+0x588>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f7fe fb5f 	bl	80004f8 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <EngTrModel_step+0x5a8>)
 8001e48:	f7fe f9a0 	bl	800018c <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <EngTrModel_step+0x5ac>)
 8001e56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e5a:	f7fe f997 	bl	800018c <__adddf3>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e6a:	f7fe fb45 	bl	80004f8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe f987 	bl	8000188 <__aeabi_dsub>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e82:	a315      	add	r3, pc, #84	; (adr r3, 8001ed8 <EngTrModel_step+0x590>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb36 	bl	80004f8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	a312      	add	r3, pc, #72	; (adr r3, 8001ee0 <EngTrModel_step+0x598>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fb2d 	bl	80004f8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <EngTrModel_step+0x5b0>)
 8001ea8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eac:	f7fe f96e 	bl	800018c <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4910      	ldr	r1, [pc, #64]	; (8001ef8 <EngTrModel_step+0x5b0>)
 8001eb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	3d70a3d7 	.word	0x3d70a3d7
 8001ecc:	4009d70a 	.word	0x4009d70a
 8001ed0:	47ae147b 	.word	0x47ae147b
 8001ed4:	3f947ae1 	.word	0x3f947ae1
 8001ed8:	b3bfa695 	.word	0xb3bfa695
 8001edc:	3fb52ad1 	.word	0x3fb52ad1
 8001ee0:	47ae147b 	.word	0x47ae147b
 8001ee4:	3fa47ae1 	.word	0x3fa47ae1
 8001ee8:	20000290 	.word	0x20000290
 8001eec:	20000200 	.word	0x20000200
 8001ef0:	40440000 	.word	0x40440000
 8001ef4:	20000258 	.word	0x20000258
 8001ef8:	20000230 	.word	0x20000230

08001efc <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001f00:	2008      	movs	r0, #8
 8001f02:	f000 fc99 	bl	8002838 <rt_InitInfAndNaN>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <USER_ADC1_Init>:
#include <stdint.h>
#include "main.h"
#include "adc.h"

void USER_ADC1_Init( void ) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
    // Configure ADC1
    ADC1->CR1 &= ~(ADC1_CR1_DUALMOD); // Select independent operation mode
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	6053      	str	r3, [r2, #4]
    ADC1->CR2 &= ~(ADC1_CR2_ALIGN); // Right alignment
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC1_CR2_CONT; // Continuous conversion mode
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6093      	str	r3, [r2, #8]

    // Configure sample time for ADC channel 0 | 1.5 cycles channel sample time
    ADC1->SMPR2 &= ~(ADC1_SMPR2_SMP0);
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	6113      	str	r3, [r2, #16]

    // Configure sequence and/or number of conversions for ADC regular channels
    ADC1->SQR1 &= ~(ADC1_SQR1_L); // 1 conversion for regular channels
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC1->SQR3 &= ~(ADC1_SQR3_SQ1); // Channel for the first ADC conversion | PA0
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	6353      	str	r3, [r2, #52]	; 0x34
    // Since we will read from PA0, we don't need to include a POT_ADC_PIN in main.c

    // Enable ADC module
    ADC1->CR2 |= ADC1_CR2_ADON;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6093      	str	r3, [r2, #8]

    // Calibrate ADC module
    ADC1->CR2 |= ADC1_CR2_CAL;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC1_CR2_CAL); // Wait for calibration to complete
 8001f5c:	bf00      	nop
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <USER_ADC1_Init+0x52>
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012400 	.word	0x40012400

08001f78 <USER_ADC1_Read>:

uint16_t USER_ADC1_Read( void ) {
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC1_CR2_ADON;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6093      	str	r3, [r2, #8]

    // Wait for conversion to complete
    while (!(ADC1->SR & ADC1_SR_EOC)); // Wait until EOC (End of Conversion Flag) is set
 8001f88:	bf00      	nop
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f9      	beq.n	8001f8a <USER_ADC1_Read+0x12>

    // Read the converted value
    return (uint16_t)ADC1->DR;
 8001f96:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012400 	.word	0x40012400

08001fa8 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Configuracion de todos los pines hacia el LCD general purpose output push-pull, 10 MHz speed
  */
	RCC->APB2ENR	|=	 ( 0x1UL <<  4U );//			IO port C clock enable	
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <LCD_Init+0x18c>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4a60      	ldr	r2, [pc, #384]	; (8002134 <LCD_Init+0x18c>)
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6193      	str	r3, [r2, #24]
	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <LCD_Init+0x190>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	; (8002138 <LCD_Init+0x190>)
 8001fc0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8001fc4:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	; (8002138 <LCD_Init+0x190>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <LCD_Init+0x190>)
 8001fcc:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 8001fd0:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 8001fd2:	4b59      	ldr	r3, [pc, #356]	; (8002138 <LCD_Init+0x190>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4958      	ldr	r1, [pc, #352]	; (8002138 <LCD_Init+0x190>)
 8001fd8:	4b58      	ldr	r3, [pc, #352]	; (800213c <LCD_Init+0x194>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <LCD_Init+0x190>)
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4955      	ldr	r1, [pc, #340]	; (8002138 <LCD_Init+0x190>)
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <LCD_Init+0x198>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <LCD_Init+0x190>)
 8001fec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ff0:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 8001ff2:	4b51      	ldr	r3, [pc, #324]	; (8002138 <LCD_Init+0x190>)
 8001ff4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ff8:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <LCD_Init+0x190>)
 8001ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002000:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <LCD_Init+0x190>)
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <LCD_Init+0x190>)
 800200c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002010:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <LCD_Init+0x190>)
 8002014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002018:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <LCD_Init+0x190>)
 800201c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002020:	611a      	str	r2, [r3, #16]
	USER_TIM4_Delay();//	50ms
 8002022:	f000 fe95 	bl	8002d50 <USER_TIM4_Delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002026:	4b44      	ldr	r3, [pc, #272]	; (8002138 <LCD_Init+0x190>)
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800202e:	4b42      	ldr	r3, [pc, #264]	; (8002138 <LCD_Init+0x190>)
 8002030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002034:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002036:	4b40      	ldr	r3, [pc, #256]	; (8002138 <LCD_Init+0x190>)
 8002038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800203c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <LCD_Init+0x190>)
 8002040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002044:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002046:	f000 f95b 	bl	8002300 <LCD_Pulse_EN>
	USER_TIM4_Delay();//	Wait for more than 5ms (50ms)
 800204a:	f000 fe81 	bl	8002d50 <USER_TIM4_Delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <LCD_Init+0x190>)
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <LCD_Init+0x190>)
 8002058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <LCD_Init+0x190>)
 8002060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002064:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <LCD_Init+0x190>)
 8002068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800206c:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 800206e:	f000 f947 	bl	8002300 <LCD_Pulse_EN>

	USER_TIM4_Delay();//	Wait for more than 5ms (50ms)
 8002072:	f000 fe6d 	bl	8002d50 <USER_TIM4_Delay>
	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <LCD_Init+0x190>)
 8002078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <LCD_Init+0x190>)
 8002080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002084:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <LCD_Init+0x190>)
 8002088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800208c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <LCD_Init+0x190>)
 8002090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002094:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002096:	f000 f933 	bl	8002300 <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 800209a:	bf00      	nop
 800209c:	f000 f8e0 	bl	8002260 <LCD_Busy>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1fa      	bne.n	800209c <LCD_Init+0xf4>
	/* Initial 'Function Set' to change 4-bit mode 			*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <LCD_Init+0x190>)
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <LCD_Init+0x190>)
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <LCD_Init+0x190>)
 80020b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020bc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <LCD_Init+0x190>)
 80020c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c4:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80020c6:	f000 f91b 	bl	8002300 <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 80020ca:	bf00      	nop
 80020cc:	f000 f8c8 	bl	8002260 <LCD_Busy>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1fa      	bne.n	80020cc <LCD_Init+0x124>
	/* 'Function Set' (I=1, N and F as required)			*/
	LCD_Write_Cmd( 0x28U );//					2-line display, 5x7 dot
 80020d6:	2028      	movs	r0, #40	; 0x28
 80020d8:	f000 f89c 	bl	8002214 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)			*/
	LCD_Write_Cmd( 0x08U );//					display, cursor and blinking off
 80020dc:	2008      	movs	r0, #8
 80020de:	f000 f899 	bl	8002214 <LCD_Write_Cmd>
	/* 'Clear Display'						*/
	LCD_Write_Cmd( 0x01U );//
 80020e2:	2001      	movs	r0, #1
 80020e4:	f000 f896 	bl	8002214 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)			*/
	LCD_Write_Cmd( 0x06U );//					cursor increment by 1, shift off
 80020e8:	2006      	movs	r0, #6
 80020ea:	f000 f893 	bl	8002214 <LCD_Write_Cmd>
	/* Initialization Ends						*/
	LCD_Write_Cmd( 0x0FU );//					display, cursor and blinking on
 80020ee:	200f      	movs	r0, #15
 80020f0:	f000 f890 	bl	8002214 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 80020f4:	2040      	movs	r0, #64	; 0x40
 80020f6:	f000 f88d 	bl	8002214 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <LCD_Init+0x19c>)
 80020fc:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	e00c      	b.n	800211e <LCD_Init+0x176>
		LCD_Put_Char( *p );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f993 3000 	ldrsb.w	r3, [r3]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f895 	bl	800223c <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3301      	adds	r3, #1
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b3f      	cmp	r3, #63	; 0x3f
 8002122:	d9ef      	bls.n	8002104 <LCD_Init+0x15c>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	f000 f875 	bl	8002214 <LCD_Write_Cmd>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40011000 	.word	0x40011000
 800213c:	fff11111 	.word	0xfff11111
 8002140:	00011111 	.word	0x00011111
 8002144:	08007008 	.word	0x08007008

08002148 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//				Bit[0]
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <LCD_Out_Data4+0x84>)
 800215e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	e003      	b.n	800216e <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <LCD_Out_Data4+0x84>)
 8002168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//				Bit[1]
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <LCD_Out_Data4+0x84>)
 800217a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	e003      	b.n	800218a <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <LCD_Out_Data4+0x84>)
 8002184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002188:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//				Bit[2]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <LCD_Out_Data4+0x84>)
 8002196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	e003      	b.n	80021a6 <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <LCD_Out_Data4+0x84>)
 80021a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021a4:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//				Bit[3]
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <LCD_Out_Data4+0x84>)
 80021b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b6:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 80021b8:	e003      	b.n	80021c2 <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <LCD_Out_Data4+0x84>)
 80021bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c0:	611a      	str	r2, [r3, #16]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40011000 	.word	0x40011000

080021d0 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ffb1 	bl	8002148 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80021e6:	f000 f88b 	bl	8002300 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ffa8 	bl	8002148 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 80021f8:	f000 f882 	bl	8002300 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80021fc:	bf00      	nop
 80021fe:	f000 f82f 	bl	8002260 <LCD_Busy>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1fa      	bne.n	80021fe <LCD_Write_Byte+0x2e>
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;//			RS=0 (seleccion de comando)
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <LCD_Write_Cmd+0x24>)
 8002220:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002224:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ffd1 	bl	80021d0 <LCD_Write_Byte>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40011000 	.word	0x40011000

0800223c <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;//			RS=1 (seleccion de caracteres)
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <LCD_Put_Char+0x20>)
 8002248:	2240      	movs	r2, #64	; 0x40
 800224a:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ffbe 	bl	80021d0 <LCD_Write_Byte>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40011000 	.word	0x40011000

08002260 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <LCD_Busy+0x9c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <LCD_Busy+0x9c>)
 800226a:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 800226e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <LCD_Busy+0x9c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a21      	ldr	r2, [pc, #132]	; (80022fc <LCD_Busy+0x9c>)
 8002276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227a:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <LCD_Busy+0x9c>)
 800227e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002282:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <LCD_Busy+0x9c>)
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <LCD_Busy+0x9c>)
 800228c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002290:	611a      	str	r2, [r3, #16]
	USER_TIM4_Delay();//	100us (50ms)
 8002292:	f000 fd5d 	bl	8002d50 <USER_TIM4_Delay>
	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) {//			if D7 is set, then
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <LCD_Busy+0x9c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <LCD_Busy+0x6e>
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <LCD_Busy+0x9c>)
 80022a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a8:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <LCD_Busy+0x9c>)
 80022ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022b0:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <LCD_Busy+0x9c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <LCD_Busy+0x9c>)
 80022b8:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80022bc:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <LCD_Busy+0x9c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <LCD_Busy+0x9c>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6053      	str	r3, [r2, #4]
		return 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e014      	b.n	80022f8 <LCD_Busy+0x98>
	} else {
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <LCD_Busy+0x9c>)
 80022d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d4:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <LCD_Busy+0x9c>)
 80022d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022dc:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <LCD_Busy+0x9c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a06      	ldr	r2, [pc, #24]	; (80022fc <LCD_Busy+0x9c>)
 80022e4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80022e8:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <LCD_Busy+0x9c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a03      	ldr	r2, [pc, #12]	; (80022fc <LCD_Busy+0x9c>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6053      	str	r3, [r2, #4]
		return 0;
 80022f6:	2300      	movs	r3, #0
	}
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40011000 	.word	0x40011000

08002300 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <LCD_Pulse_EN+0x28>)
 8002306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230a:	611a      	str	r2, [r3, #16]
	USER_TIM5_Delay();//	10us
 800230c:	f000 fd7c 	bl	8002e08 <USER_TIM5_Delay>
	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;//			habilita pin EN ON
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <LCD_Pulse_EN+0x28>)
 8002312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002316:	611a      	str	r2, [r3, #16]
	USER_TIM5_Delay();//	10us
 8002318:	f000 fd76 	bl	8002e08 <USER_TIM5_Delay>
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//			habilita pin EN OFF
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <LCD_Pulse_EN+0x28>)
 800231e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002322:	611a      	str	r2, [r3, #16]
	// USER_TIM11_Delay();//	1ms
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40011000 	.word	0x40011000

0800232c <main>:
/* Function prototypes */
void USER_RCC_Init(void);
void USER_GPIO_Init(void);
float map(float x, float in_min, float in_max, float out_min, float out_max);

int main(void) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af02      	add	r7, sp, #8
	uint8_t col = 16;
 8002332:	2310      	movs	r3, #16
 8002334:	71fb      	strb	r3, [r7, #7]

  	USER_RCC_Init();
 8002336:	f000 f881 	bl	800243c <USER_RCC_Init>
	USER_GPIO_Init();
 800233a:	f000 f8d9 	bl	80024f0 <USER_GPIO_Init>
  	USER_USART1_Init();
 800233e:	f000 fd79 	bl	8002e34 <USER_USART1_Init>
	USER_TIM2_Init();
 8002342:	f000 fbf5 	bl	8002b30 <USER_TIM2_Init>
	USER_TIM3_Init();
 8002346:	f000 fc57 	bl	8002bf8 <USER_TIM3_Init>
	USER_TIM4_Init();
 800234a:	f000 fcbd 	bl	8002cc8 <USER_TIM4_Init>
	USER_TIM5_Init();
 800234e:	f000 fd15 	bl	8002d7c <USER_TIM5_Init>

	LCD_Init();
 8002352:	f7ff fe29 	bl	8001fa8 <LCD_Init>

	USER_ADC1_Init();
 8002356:	f7ff fdd9 	bl	8001f0c <USER_ADC1_Init>

	EngTrModel_initialize();
 800235a:	f7ff fdcf 	bl	8001efc <EngTrModel_initialize>
	// ROW 3 - 'C' | Left movement (not used for now)

  for(;;)
	{
		// Reads the value from the potentiometer
		uint16_t pot_value = USER_ADC1_Read();
 800235e:	f7ff fe0b 	bl	8001f78 <USER_ADC1_Read>
 8002362:	4603      	mov	r3, r0
 8002364:	80bb      	strh	r3, [r7, #4]

		// Scales the potentiometer value to the range of acceleration (0 to 100)
		float acceleration = map(pot_value, 0, 4095, 0, 100);
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fcc3 	bl	8000cf4 <__aeabi_ui2f>
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <main+0xf4>)
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <main+0xf8>)
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f000 f91c 	bl	80025b8 <map>
 8002380:	6038      	str	r0, [r7, #0]

		// Key 'B' is pressed and executes brake
		if ( !(ROW2_PIN) ) {
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <main+0xfc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <main+0x8e>
			
			USER_TIM2_Delay(); // 10ms delay for debounce
 800238e:	f000 fc1c 	bl	8002bca <USER_TIM2_Delay>

			if ( !(ROW2_PIN) ) {
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <main+0xfc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11c      	bne.n	80023d8 <main+0xac>
				EngTrModel_U.Throttle = 0.0;
 800239e:	4923      	ldr	r1, [pc, #140]	; (800242c <main+0x100>)
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9c1 2300 	strd	r2, r3, [r1]
				EngTrModel_U.BrakeTorque = 100.0;
 80023ac:	491f      	ldr	r1, [pc, #124]	; (800242c <main+0x100>)
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <main+0x104>)
 80023b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80023b8:	e00e      	b.n	80023d8 <main+0xac>
			}
		} else {
			EngTrModel_U.Throttle = acceleration;
 80023ba:	6838      	ldr	r0, [r7, #0]
 80023bc:	f7fe f844 	bl	8000448 <__aeabi_f2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4919      	ldr	r1, [pc, #100]	; (800242c <main+0x100>)
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]
			EngTrModel_U.BrakeTorque = 0.0;
 80023ca:	4918      	ldr	r1, [pc, #96]	; (800242c <main+0x100>)
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		// calculate the model output values
		EngTrModel_step();
 80023d8:	f7ff fab6 	bl	8001948 <EngTrModel_step>

		// set the values in the msgs
		msg[2] = (uint8_t) EngTrModel_Y.EngineSpeed;
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <main+0x108>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fb5f 	bl	8000aa8 <__aeabi_d2uiz>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <main+0x10c>)
 80023f0:	709a      	strb	r2, [r3, #2]
		msg[4] = (uint8_t) EngTrModel_Y.VehicleSpeed;
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <main+0x108>)
 80023f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fb54 	bl	8000aa8 <__aeabi_d2uiz>
 8002400:	4603      	mov	r3, r0
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <main+0x10c>)
 8002406:	711a      	strb	r2, [r3, #4]
		msg[6] = (uint8_t) EngTrModel_Y.Gear;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <main+0x108>)
 800240a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fb49 	bl	8000aa8 <__aeabi_d2uiz>
 8002416:	4603      	mov	r3, r0
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <main+0x10c>)
 800241c:	719a      	strb	r2, [r3, #6]
	{
 800241e:	e79e      	b.n	800235e <main+0x32>
 8002420:	42c80000 	.word	0x42c80000
 8002424:	457ff000 	.word	0x457ff000
 8002428:	40010c00 	.word	0x40010c00
 800242c:	20000258 	.word	0x20000258
 8002430:	40590000 	.word	0x40590000
 8002434:	20000268 	.word	0x20000268
 8002438:	20000000 	.word	0x20000000

0800243c <USER_RCC_Init>:
		// printf("Gear: %f\r\n", EngTrModel_Y.Gear);

	}
}

void USER_RCC_Init(void){
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
	
	/* System Clock (SYSCLK) configuration for 64 MHz */
	
	FLASH->ACR	&=	~( 0x5UL << 0U ); // two wait states latency, if SYSCLK > 48 MHz
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <USER_RCC_Init+0xac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <USER_RCC_Init+0xac>)
 8002446:	f023 0305 	bic.w	r3, r3, #5
 800244a:	6013      	str	r3, [r2, #0]
	FLASH->ACR	|=	( 0x2UL << 0U ); // two wait states latency, if SYSCLK > 48 MHz
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <USER_RCC_Init+0xac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <USER_RCC_Init+0xac>)
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	6013      	str	r3, [r2, #0]
	RCC->CFGR	&=	~( 0x1UL << 16U ) // PLL HSI clock /2 selected as PLL input clock
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <USER_RCC_Init+0xb0>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a23      	ldr	r2, [pc, #140]	; (80024ec <USER_RCC_Init+0xb0>)
 800245e:	f423 339d 	bic.w	r3, r3, #80384	; 0x13a00
 8002462:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002466:	6053      	str	r3, [r2, #4]
				&	~( 0x7UL << 11U ) // APB2 prescaler /1
				&	~( 0x3UL << 8U ) // APB1 prescaler /2 (APB1 must not exceed 36 MHz)
				&	~( 0xFUL << 4U ); // AHB prescaler /1
	RCC->CFGR	|=	 ( 0xFUL << 18U ) // PLL input clock x 16 (PLLMUL bits)
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <USER_RCC_Init+0xb0>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <USER_RCC_Init+0xb0>)
 800246e:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8002472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002476:	6053      	str	r3, [r2, #4]
				|	 ( 0x4UL << 8U ); // APB1 prescaler / 2
	RCC->CR		|=	 ( 0x1UL << 24U ); // PLL2 on
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <USER_RCC_Init+0xb0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <USER_RCC_Init+0xb0>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]
	while ( !(RCC->CR & ~( 0x1UL << 25U ))); // Wait until PLL is locked
 8002484:	bf00      	nop
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <USER_RCC_Init+0xb0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f9      	beq.n	8002486 <USER_RCC_Init+0x4a>
	RCC->CFGR	&=	~( 0x1UL << 0U ); // PLL used as system clock (SW bits)
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <USER_RCC_Init+0xb0>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a15      	ldr	r2, [pc, #84]	; (80024ec <USER_RCC_Init+0xb0>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|=	 ( 0x2UL << 0U ); // PLL used as system clock (SW bits)
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <USER_RCC_Init+0xb0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <USER_RCC_Init+0xb0>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	6053      	str	r3, [r2, #4]
	while ( 0x8UL != ( RCC->CFGR & 0xCUL )); // Wait until PLL is switched
 80024aa:	bf00      	nop
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <USER_RCC_Init+0xb0>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d1f9      	bne.n	80024ac <USER_RCC_Init+0x70>

	RCC->CFGR	|=	 ( 0x3UL << 14U ); // PCLK2 divided by 8. PCLK2 is 64MHz and ADC clock is for 8 MHz
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <USER_RCC_Init+0xb0>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <USER_RCC_Init+0xb0>)
 80024be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c2:	6053      	str	r3, [r2, #4]
	// Clock for the ADC peripheral is configured. Must not exceed 14 MHz

	RCC->APB1ENR	|=	( 0x1UL << 0U ) // TIM2 clock enable
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <USER_RCC_Init+0xb0>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <USER_RCC_Init+0xb0>)
 80024ca:	f043 030f 	orr.w	r3, r3, #15
 80024ce:	61d3      	str	r3, [r2, #28]
					| ( 0x1UL << 1U ) 	// TIM3 clock enable
					| ( 0x1UL << 2U ) 	// TIM4 clock enable
					| ( 0x1UL << 3U );	// TIM5 clock enable

	RCC->APB2ENR 	|= ( 0x1UL << 2U ) // IO Port A clock enable
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <USER_RCC_Init+0xb0>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a05      	ldr	r2, [pc, #20]	; (80024ec <USER_RCC_Init+0xb0>)
 80024d6:	f443 4384 	orr.w	r3, r3, #16896	; 0x4200
 80024da:	f043 031c 	orr.w	r3, r3, #28
 80024de:	6193      	str	r3, [r2, #24]
					| ( 0x1UL << 14U ) // USART 1 clock enable
					| ( 0x1UL << 3U ) // IO Port B clock enable
					| ( 0x1UL << 4U ) // IO Port C clock enable
					| ( 0x1UL << 9U ); // Configured ADC1 clock is enabled
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000

080024f0 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

	// TEST LED
	// clear bits to remove trash values
	GPIOA->CRL 	&= 	~( 0x3UL << 22U )
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <USER_GPIO_Init+0xc0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <USER_GPIO_Init+0xc0>)
 80024fa:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80024fe:	6013      	str	r3, [r2, #0]
				& 	~( 0x2UL << 20U );

	// set bits to configure
	GPIOA->CRL	|= ( 0x1UL << 20U ); // output, 10mhz
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <USER_GPIO_Init+0xc0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <USER_GPIO_Init+0xc0>)
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	6013      	str	r3, [r2, #0]

	// 4x4 Keypad GPIOs

	// PB4: 'A' | Right movement
	GPIOB->CRL &=  ~( 0x3UL << 18U ) & ~( 0x3UL << 16U ); // Clear to CNF and MODE bits
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002512:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002516:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x2UL << 18U ); // CNF of PB4: Input with pull-up/pull-down
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800251e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002522:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x0UL << 16U ); // MODE of PB4: Input mode (reset state)
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002526:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |=	( 0x1UL <<  4U); // ODR of PB4: Input pull-up
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002532:	f043 0310 	orr.w	r3, r3, #16
 8002536:	60d3      	str	r3, [r2, #12]
	
	// PB5: 'B' | Brake
	GPIOB->CRL &=  ~( 0x3UL << 22U ) & ~( 0x3UL << 20U ); // Clear to CNF and MODE bits
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800253e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002542:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x2UL << 22U ); // CNF of PB5: Input with pull-up/pull-down
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800254a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800254e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x0UL << 20U ); // MODE of PB5: Input mode (reset state)
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |=	( 0x1UL <<  5U); // ODR of PB5: Input pull-up
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800255e:	f043 0320 	orr.w	r3, r3, #32
 8002562:	60d3      	str	r3, [r2, #12]

	// PB3: 'C' | Left movement
	GPIOB->CRL &=  ~( 0x3UL << 14U ) & ~( 0x3UL << 12U ); // Clear to CNF and MODE bits
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800256a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800256e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x2UL << 14U ); // CNF of PB3: Input with pull-up/pull-down
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x0UL << 12U ); // MODE of PB3: Input mode (reset state)
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800257e:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |=	( 0x1UL <<  3U); // ODR of PB3: Input pull-up
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <USER_GPIO_Init+0xc4>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <USER_GPIO_Init+0xc4>)
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	60d3      	str	r3, [r2, #12]
	// GPIOA->CRH |=	( 0x2UL << 10U ); // CNF of PA10: Input with pull-up/pull-down
	// GPIOA->CRH |=	( 0x0UL << 8U ); // MODE of PA10: Input mode (reset state)
	// GPIOA->ODR |=	( 0x1UL << 10U); // ODR of PA10: Input pull-up

	// PA0: Potenciometer Pin
	GPIOA->CRL &= 	~( 0x1UL << 2U ); // CNF of PA0: Analog mode
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <USER_GPIO_Init+0xc0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a06      	ldr	r2, [pc, #24]	; (80025b0 <USER_GPIO_Init+0xc0>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= 	~( 0x1UL << 0U ); // MODE of PA0: Input mode (reset state)
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <USER_GPIO_Init+0xc0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <USER_GPIO_Init+0xc0>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6013      	str	r3, [r2, #0]

}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00

080025b8 <map>:

// Function to map a value from one range to another
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7fe fae1 	bl	8000b90 <__aeabi_fsub>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461c      	mov	r4, r3
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6a38      	ldr	r0, [r7, #32]
 80025d6:	f7fe fadb 	bl	8000b90 <__aeabi_fsub>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	4620      	mov	r0, r4
 80025e0:	f7fe fbe0 	bl	8000da4 <__aeabi_fmul>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461c      	mov	r4, r3
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fad0 	bl	8000b90 <__aeabi_fsub>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4619      	mov	r1, r3
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7fe fc89 	bl	8000f0c <__aeabi_fdiv>
 80025fa:	4603      	mov	r3, r0
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fac8 	bl	8000b94 <__addsf3>
 8002604:	4603      	mov	r3, r0
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}
	...

08002610 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002616:	2340      	movs	r3, #64	; 0x40
 8002618:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b20      	cmp	r3, #32
 800262a:	d10a      	bne.n	8002642 <rtGetInf+0x32>
    inf = rtGetInfF();
 800262c:	f000 f836 	bl	800269c <rtGetInfF>
 8002630:	4603      	mov	r3, r0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff08 	bl	8000448 <__aeabi_f2d>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002640:	e022      	b.n	8002688 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8002642:	2301      	movs	r3, #1
 8002644:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <rtGetInf+0x54>
 800265e:	2b01      	cmp	r3, #1
 8002660:	d009      	beq.n	8002676 <rtGetInf+0x66>
 8002662:	e011      	b.n	8002688 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <rtGetInf+0x88>)
 8002666:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002674:	e008      	b.n	8002688 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <rtGetInf+0x88>)
 8002678:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 800267e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002682:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002686:	bf00      	nop
      }
    }
  }

  return inf;
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	7ff00000 	.word	0x7ff00000

0800269c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 80026a2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80026a6:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 80026a8:	687b      	ldr	r3, [r7, #4]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d10a      	bne.n	80026e6 <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 80026d0:	f000 f836 	bl	8002740 <rtGetMinusInfF>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd feb6 	bl	8000448 <__aeabi_f2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80026e4:	e022      	b.n	800272c <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 80026e6:	2301      	movs	r3, #1
 80026e8:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <rtGetMinusInf+0x54>
 8002702:	2b01      	cmp	r3, #1
 8002704:	d009      	beq.n	800271a <rtGetMinusInf+0x66>
 8002706:	e011      	b.n	800272c <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <rtGetMinusInf+0x88>)
 800270a:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8002710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002714:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002718:	e008      	b.n	800272c <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <rtGetMinusInf+0x88>)
 800271c:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8002722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002726:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800272a:	bf00      	nop
      }
    }
  }

  return minf;
 800272c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	fff00000 	.word	0xfff00000

08002740 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <rtGetMinusInfF+0x18>)
 8002748:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800274a:	687b      	ldr	r3, [r7, #4]
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	ff800000 	.word	0xff800000

0800275c <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002762:	2340      	movs	r3, #64	; 0x40
 8002764:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b20      	cmp	r3, #32
 8002776:	d10a      	bne.n	800278e <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8002778:	f000 f838 	bl	80027ec <rtGetNaNF>
 800277c:	4603      	mov	r3, r0
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fe62 	bl	8000448 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800278c:	e024      	b.n	80027d8 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 800278e:	2301      	movs	r3, #1
 8002790:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <rtGetNaN+0x54>
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d009      	beq.n	80027c2 <rtGetNaN+0x66>
 80027ae:	e013      	b.n	80027d8 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <rtGetNaN+0x8c>)
 80027b2:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 80027b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80027c0:	e00a      	b.n	80027d8 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 80027c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80027c6:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027cc:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 80027ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 80027d6:	bf00      	nop
      }
    }
  }

  return nan;
 80027d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	fff80000 	.word	0xfff80000

080027ec <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 80027f8:	2301      	movs	r3, #1
 80027fa:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <rtGetNaNF+0x2c>
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <rtGetNaNF+0x32>
 8002816:	e006      	b.n	8002826 <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <rtGetNaNF+0x48>)
 800281a:	60bb      	str	r3, [r7, #8]
      break;
 800281c:	e003      	b.n	8002826 <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 800281e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002822:	60bb      	str	r3, [r7, #8]
      break;
 8002824:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 8002826:	68bb      	ldr	r3, [r7, #8]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	ffc00000 	.word	0xffc00000

08002838 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8002840:	f7ff ff8c 	bl	800275c <rtGetNaN>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4911      	ldr	r1, [pc, #68]	; (8002890 <rt_InitInfAndNaN+0x58>)
 800284a:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 800284e:	f7ff ffcd 	bl	80027ec <rtGetNaNF>
 8002852:	4603      	mov	r3, r0
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <rt_InitInfAndNaN+0x5c>)
 8002856:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 8002858:	f7ff feda 	bl	8002610 <rtGetInf>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	490d      	ldr	r1, [pc, #52]	; (8002898 <rt_InitInfAndNaN+0x60>)
 8002862:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8002866:	f7ff ff19 	bl	800269c <rtGetInfF>
 800286a:	4603      	mov	r3, r0
 800286c:	4a0b      	ldr	r2, [pc, #44]	; (800289c <rt_InitInfAndNaN+0x64>)
 800286e:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8002870:	f7ff ff20 	bl	80026b4 <rtGetMinusInf>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4909      	ldr	r1, [pc, #36]	; (80028a0 <rt_InitInfAndNaN+0x68>)
 800287a:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 800287e:	f7ff ff5f 	bl	8002740 <rtGetMinusInfF>
 8002882:	4603      	mov	r3, r0
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <rt_InitInfAndNaN+0x6c>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000290 	.word	0x20000290
 8002894:	200002a0 	.word	0x200002a0
 8002898:	20000280 	.word	0x20000280
 800289c:	20000298 	.word	0x20000298
 80028a0:	20000288 	.word	0x20000288
 80028a4:	2000029c 	.word	0x2000029c

080028a8 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <rtIsInf+0x40>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028bc:	f7fe f884 	bl	80009c8 <__aeabi_dcmpeq>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <rtIsInf+0x32>
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <rtIsInf+0x44>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d0:	f7fe f87a 	bl	80009c8 <__aeabi_dcmpeq>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <rtIsInf+0x36>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <rtIsInf+0x38>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000280 	.word	0x20000280
 80028ec:	20000288 	.word	0x20000288

080028f0 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002900:	2340      	movs	r3, #64	; 0x40
 8002902:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b20      	cmp	r3, #32
 8002908:	d10b      	bne.n	8002922 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 800290a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800290e:	f7fe f8eb 	bl	8000ae8 <__aeabi_d2f>
 8002912:	4603      	mov	r3, r0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f84d 	bl	80029b4 <rtIsNaNF>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002920:	e040      	b.n	80029a4 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 8002922:	2301      	movs	r3, #1
 8002924:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002926:	f107 031c 	add.w	r3, r7, #28
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 8002938:	7ffb      	ldrb	r3, [r7, #31]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <rtIsNaN+0x54>
 800293e:	2b01      	cmp	r3, #1
 8002940:	d018      	beq.n	8002974 <rtIsNaN+0x84>
 8002942:	e02f      	b.n	80029a4 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8002944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002948:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <rtIsNaN+0xc0>)
 8002950:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <rtIsNaN+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d109      	bne.n	800296c <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8002962:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <rtIsNaN+0x7c>
                             0x7FF00000 &&
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <rtIsNaN+0x7e>
 800296c:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8002972:	e017      	b.n	80029a4 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8002974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002978:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <rtIsNaN+0xc0>)
 8002980:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <rtIsNaN+0xc0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d109      	bne.n	800299c <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8002992:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <rtIsNaN+0xac>
                             0x7FF00000 &&
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <rtIsNaN+0xae>
 800299c:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 800299e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 80029a2:	bf00      	nop
      }
    }
  }

  return result;
 80029a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	7ff00000 	.word	0x7ff00000

080029b4 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80029c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80029ca:	d106      	bne.n	80029da <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <rtIsNaNF+0x26>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <rtIsNaNF+0x28>
 80029da:	2300      	movs	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return 1;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <_kill>:

int _kill(int pid, int sig)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a00:	f000 ffac 	bl	800395c <__errno>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2216      	movs	r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_exit>:

void _exit (int status)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffe7 	bl	80029f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a28:	e7fe      	b.n	8002a28 <_exit+0x12>

08002a2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e00a      	b.n	8002a52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a3c:	f3af 8000 	nop.w
 8002a40:	4601      	mov	r1, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	60ba      	str	r2, [r7, #8]
 8002a48:	b2ca      	uxtb	r2, r1
 8002a4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dbf0      	blt.n	8002a3c <_read+0x12>
  }

  return len;
 8002a5a:	687b      	ldr	r3, [r7, #4]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <_isatty>:

int _isatty(int file)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aa0:	2301      	movs	r3, #1
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f000 ff32 	bl	800395c <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20005000 	.word	0x20005000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	200002a4 	.word	0x200002a4
 8002b2c:	200003f8 	.word	0x200003f8

08002b30 <USER_TIM2_Init>:
/////////////
// TIMER 2 //
/////////////

// Function that initializes TIM2 with constant values from tim.h
void USER_TIM2_Init( void ){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	TIM2->SMCR &= ~(TIM2_SMCR_SMS); 	// Enable the internal clock source
 8002b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	6093      	str	r3, [r2, #8]
	TIM2->CR1 &= ~(TIM2_CR1_EA); 		// Set edge-aligned mode
 8002b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b4e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002b52:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(TIM2_CR1_UC); 		// Set up-counter mode
 8002b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b5e:	f023 0310 	bic.w	r3, r3, #16
 8002b62:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(TIM2_CR1_UEV); 		// Set UEV enabled
 8002b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b6e:	f023 0302 	bic.w	r3, r3, #2
 8002b72:	6013      	str	r3, [r2, #0]

	USER_TIM2_Reset(); // Executes reset function
 8002b74:	f000 f804 	bl	8002b80 <USER_TIM2_Reset>

	USER_TIM2_Start(); // Executes start function
 8002b78:	f000 f819 	bl	8002bae <USER_TIM2_Start>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <USER_TIM2_Reset>:

// Set/Reset the values needed to count 1s
void USER_TIM2_Reset( void ){
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM2_SR_UIF);			// Clear the timer update interrupt flag
 8002b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6113      	str	r3, [r2, #16]
	TIM2->CNT = TIM2_CNT;				// Set initial count
 8002b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->PSC = TIM2_PSC;				// Set prescaler
 8002b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba2:	2209      	movs	r2, #9
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <USER_TIM2_Start>:

// Start the counting
void USER_TIM2_Start( void ){
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
	TIM2->CR1 |= TIM2_CR1_CEN;			// Start counting
 8002bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <USER_TIM2_Delay>:

// Wait until the timer overflows and stop the timer
void USER_TIM2_Delay( void ){
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
	while(!( TIM2->SR & TIM2_SR_UIF ));
 8002bce:	bf00      	nop
 8002bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f8      	beq.n	8002bd0 <USER_TIM2_Delay+0x6>

	TIM2->CR1 &= ~(TIM2_CR1_CEN);		// Stop the timer
 8002bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6013      	str	r3, [r2, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <USER_TIM3_Init>:
/////////////
// TIMER 3 //
/////////////

// Function that initializes TIM3 with constant values from tim.h
void USER_TIM3_Init( void ){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	TIM3->SMCR &= ~(TIM3_SMCR_SMS); 	// Enable the internal clock source
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	6093      	str	r3, [r2, #8]
	TIM3->CR1 &= ~(TIM3_CR1_EA); 		// Set edge-aligned mode
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c0e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002c12:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(TIM3_CR1_UC); 		// Set up-counter mode
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c1a:	f023 0310 	bic.w	r3, r3, #16
 8002c1e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(TIM3_CR1_UEV); 		// Set UEV enabled
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c26:	f023 0302 	bic.w	r3, r3, #2
 8002c2a:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= TIM3_DIER_UIE;		// Enable the update interrupt
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <USER_TIM3_Init+0x58>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	60d3      	str	r3, [r2, #12]
	NVIC->ISER[0] |= NVIC_ISER_TIM3;	// Enable the TIM3 interrupt
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <USER_TIM3_Init+0x5c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <USER_TIM3_Init+0x5c>)
 8002c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c42:	6013      	str	r3, [r2, #0]

	USER_TIM3_Reset(); // Executes reset function
 8002c44:	f000 f808 	bl	8002c58 <USER_TIM3_Reset>

	USER_TIM3_Start(); // Executes start function
 8002c48:	f000 f81a 	bl	8002c80 <USER_TIM3_Start>
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40000400 	.word	0x40000400
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <USER_TIM3_Reset>:

// Set/Reset the values needed to count 1s
void USER_TIM3_Reset( void ){
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(TIM3_SR_UIF);			// Clear the timer update interrupt flag
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <USER_TIM3_Reset+0x24>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <USER_TIM3_Reset+0x24>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6113      	str	r3, [r2, #16]
	TIM3->CNT = TIM3_CNT;				// Set initial count
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <USER_TIM3_Reset+0x24>)
 8002c6a:	22e6      	movs	r2, #230	; 0xe6
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->PSC = TIM3_PSC;				// Set prescaler
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <USER_TIM3_Reset+0x24>)
 8002c70:	22c3      	movs	r2, #195	; 0xc3
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40000400 	.word	0x40000400

08002c80 <USER_TIM3_Start>:

// Start the counting
void USER_TIM3_Start( void ){
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM3_CR1_CEN;			// Start counting
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <USER_TIM3_Start+0x18>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a03      	ldr	r2, [pc, #12]	; (8002c98 <USER_TIM3_Start+0x18>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40000400 	.word	0x40000400

08002c9c <TIM3_IRQHandler>:
	while(!( TIM3->SR & TIM3_SR_UIF ));

	TIM3->CR1 &= ~(TIM3_CR1_CEN);		// Stop the timer
}

void TIM3_IRQHandler( void ){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	if ( TIM3->SR & TIM3_SR_UIF ){
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <TIM3_IRQHandler+0x24>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <TIM3_IRQHandler+0x20>
		// LCD_Clear();
		// LCD_Set_Cursor(1, 1);

		GPIOA->ODR ^= ( 0x1UL << 5U );
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <TIM3_IRQHandler+0x28>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <TIM3_IRQHandler+0x28>)
 8002cb2:	f083 0320 	eor.w	r3, r3, #32
 8002cb6:	60d3      	str	r3, [r2, #12]

		// USER_UART_Send_Message(msg, msg_length);		// Send the message

		// USER_LCD_Send_Message(msg, msg_length);			// Show the message

		USER_TIM3_Reset();								// Reset the timer
 8002cb8:	f7ff ffce 	bl	8002c58 <USER_TIM3_Reset>
	}
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40010800 	.word	0x40010800

08002cc8 <USER_TIM4_Init>:
/////////////
// TIMER 4 //
/////////////

// Function that initializes TIM4 with constant values from tim.h
void USER_TIM4_Init( void ){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
	TIM4->SMCR &= ~(TIM4_SMCR_SMS); 	// Enable the internal clock source
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	6093      	str	r3, [r2, #8]
	TIM4->CR1 &= ~(TIM4_CR1_EA); 		// Set edge-aligned mode
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cde:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ce2:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(TIM4_CR1_UC); 		// Set up-counter mode
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cea:	f023 0310 	bic.w	r3, r3, #16
 8002cee:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(TIM4_CR1_UEV); 		// Set UEV enabled
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <USER_TIM4_Init+0x40>)
 8002cf6:	f023 0302 	bic.w	r3, r3, #2
 8002cfa:	6013      	str	r3, [r2, #0]

	USER_TIM4_Reset(); // Executes reset function
 8002cfc:	f000 f806 	bl	8002d0c <USER_TIM4_Reset>

	USER_TIM4_Start(); // Executes start function
 8002d00:	f000 f818 	bl	8002d34 <USER_TIM4_Start>
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40000800 	.word	0x40000800

08002d0c <USER_TIM4_Reset>:

// Set/Reset the values needed to count 1s
void USER_TIM4_Reset( void ){
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(TIM4_SR_UIF);			// Clear the timer update interrupt flag
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <USER_TIM4_Reset+0x24>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <USER_TIM4_Reset+0x24>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6113      	str	r3, [r2, #16]
	TIM4->CNT = TIM4_CNT;				// Set initial count
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <USER_TIM4_Reset+0x24>)
 8002d1e:	22e6      	movs	r2, #230	; 0xe6
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->PSC = TIM4_PSC;				// Set prescaler
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <USER_TIM4_Reset+0x24>)
 8002d24:	2230      	movs	r2, #48	; 0x30
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40000800 	.word	0x40000800

08002d34 <USER_TIM4_Start>:

// Start the counting
void USER_TIM4_Start( void ){
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
	TIM4->CR1 |= TIM4_CR1_CEN;			// Start counting
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <USER_TIM4_Start+0x18>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <USER_TIM4_Start+0x18>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40000800 	.word	0x40000800

08002d50 <USER_TIM4_Delay>:

// Wait until the timer overflows and stop the timer
void USER_TIM4_Delay( void ){
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
	while(!( TIM4->SR & TIM4_SR_UIF ));
 8002d54:	bf00      	nop
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <USER_TIM4_Delay+0x28>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f9      	beq.n	8002d56 <USER_TIM4_Delay+0x6>

	TIM4->CR1 &= ~(TIM4_CR1_CEN);		// Stop the timer
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <USER_TIM4_Delay+0x28>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <USER_TIM4_Delay+0x28>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40000800 	.word	0x40000800

08002d7c <USER_TIM5_Init>:
/////////////
// TIMER 5 //
/////////////

// Function that initializes TIM5 with constant values from tim.h
void USER_TIM5_Init( void ){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	TIM5->SMCR &= ~(TIM5_SMCR_SMS); 	// Enable the internal clock source
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	6093      	str	r3, [r2, #8]
	TIM5->CR1 &= ~(TIM5_CR1_EA); 		// Set edge-aligned mode
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002d92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002d96:	6013      	str	r3, [r2, #0]
	TIM5->CR1 &= ~(TIM5_CR1_UC); 		// Set up-counter mode
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002d9e:	f023 0310 	bic.w	r3, r3, #16
 8002da2:	6013      	str	r3, [r2, #0]
	TIM5->CR1 &= ~(TIM5_CR1_UEV); 		// Set UEV enabled
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <USER_TIM5_Init+0x40>)
 8002daa:	f023 0302 	bic.w	r3, r3, #2
 8002dae:	6013      	str	r3, [r2, #0]

	USER_TIM5_Reset(); // Executes reset function
 8002db0:	f000 f806 	bl	8002dc0 <USER_TIM5_Reset>

	USER_TIM5_Start(); // Executes start function
 8002db4:	f000 f81a 	bl	8002dec <USER_TIM5_Start>
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40000c00 	.word	0x40000c00

08002dc0 <USER_TIM5_Reset>:

// Set/Reset the values needed to count
void USER_TIM5_Reset( void ){
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	TIM5->SR &= ~(TIM5_SR_UIF);			// Clear the timer update interrupt flag
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <USER_TIM5_Reset+0x28>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <USER_TIM5_Reset+0x28>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6113      	str	r3, [r2, #16]
	TIM5->CNT = TIM5_CNT;				// Set initial count
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <USER_TIM5_Reset+0x28>)
 8002dd2:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->PSC = TIM5_PSC;				// Set prescaler
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <USER_TIM5_Reset+0x28>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40000c00 	.word	0x40000c00

08002dec <USER_TIM5_Start>:

// Start the counting
void USER_TIM5_Start( void ){
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
	TIM5->CR1 |= TIM5_CR1_CEN;			// Start counting
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <USER_TIM5_Start+0x18>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <USER_TIM5_Start+0x18>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40000c00 	.word	0x40000c00

08002e08 <USER_TIM5_Delay>:

// Wait until the timer overflows and stop the timer
void USER_TIM5_Delay( void ){
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
	while(!( TIM2->SR & TIM5_SR_UIF ));
 8002e0c:	bf00      	nop
 8002e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f8      	beq.n	8002e0e <USER_TIM5_Delay+0x6>

	TIM5->CR1 &= ~(TIM5_CR1_CEN);		// Stop the timer
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <USER_TIM5_Delay+0x28>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <USER_TIM5_Delay+0x28>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40000c00 	.word	0x40000c00

08002e34 <USER_USART1_Init>:
#include "main.h"
#include "uart.h"

static void USER_USART1_Send_8bit( uint8_t Data );

void USER_USART1_Init( void ){
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;//	Step 1 Usart enabled
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e42:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;//		Step 2 8 Data bits
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e4e:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;//	Step 3 1 Stop bit
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e5a:	6113      	str	r3, [r2, #16]
	USART1->BRR	=	 USARTDIV;//		Step 5 Desired baud rate
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e5e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8002e62:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;//	Step 6 Transmitter enabled
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	60d3      	str	r3, [r2, #12]
	USART1->CR1	|= 	 USART_CR1_RE;//	Step 7 Receiver enabled
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <USER_USART1_Init+0x50>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	40013800 	.word	0x40013800

08002e88 <_write>:
uint8_t USER_USART1_Read_8bit() {
	while(!( USART1->SR & USART_SR_RNXE ));//	wait until next data can be read
	return USART1->DR;
}

int _write(int file, char *ptr, int len) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
	for (int data_idx = 0; data_idx < len; data_idx++) {
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e00f      	b.n	8002eba <_write+0x32>
		while ( !(USART1->SR & USART_SR_TXE) );
 8002e9a:	bf00      	nop
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <_write+0x48>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f9      	beq.n	8002e9c <_write+0x14>
		USART1->DR = *ptr++;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	60ba      	str	r2, [r7, #8]
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <_write+0x48>)
 8002eb2:	605a      	str	r2, [r3, #4]
	for (int data_idx = 0; data_idx < len; data_idx++) {
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dbeb      	blt.n	8002e9a <_write+0x12>
	}
	return len;
 8002ec2:	687b      	ldr	r3, [r7, #4]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40013800 	.word	0x40013800

08002ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ed4:	480d      	ldr	r0, [pc, #52]	; (8002f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ed6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ed8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ede:	490d      	ldr	r1, [pc, #52]	; (8002f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <LoopForever+0xe>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee4:	e002      	b.n	8002eec <LoopCopyDataInit>

08002ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eea:	3304      	adds	r3, #4

08002eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef0:	d3f9      	bcc.n	8002ee6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ef4:	4c0a      	ldr	r4, [pc, #40]	; (8002f20 <LoopForever+0x16>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef8:	e001      	b.n	8002efe <LoopFillZerobss>

08002efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002efc:	3204      	adds	r2, #4

08002efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f00:	d3fb      	bcc.n	8002efa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f02:	f000 fd31 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f06:	f7ff fa11 	bl	800232c <main>

08002f0a <LoopForever>:

LoopForever:
  b LoopForever
 8002f0a:	e7fe      	b.n	8002f0a <LoopForever>
  ldr   r0, =_estack
 8002f0c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f14:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f18:	080073f8 	.word	0x080073f8
  ldr r2, =_sbss
 8002f1c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002f20:	200003f4 	.word	0x200003f4

08002f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f24:	e7fe      	b.n	8002f24 <ADC1_2_IRQHandler>

08002f26 <__cvt>:
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2c:	461f      	mov	r7, r3
 8002f2e:	bfbb      	ittet	lt
 8002f30:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002f34:	461f      	movlt	r7, r3
 8002f36:	2300      	movge	r3, #0
 8002f38:	232d      	movlt	r3, #45	; 0x2d
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002f42:	7013      	strb	r3, [r2, #0]
 8002f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f46:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002f4a:	f023 0820 	bic.w	r8, r3, #32
 8002f4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f52:	d005      	beq.n	8002f60 <__cvt+0x3a>
 8002f54:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f58:	d100      	bne.n	8002f5c <__cvt+0x36>
 8002f5a:	3501      	adds	r5, #1
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e000      	b.n	8002f62 <__cvt+0x3c>
 8002f60:	2303      	movs	r3, #3
 8002f62:	aa07      	add	r2, sp, #28
 8002f64:	9204      	str	r2, [sp, #16]
 8002f66:	aa06      	add	r2, sp, #24
 8002f68:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f6c:	e9cd 3500 	strd	r3, r5, [sp]
 8002f70:	4622      	mov	r2, r4
 8002f72:	463b      	mov	r3, r7
 8002f74:	f000 fdb8 	bl	8003ae8 <_dtoa_r>
 8002f78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	d102      	bne.n	8002f86 <__cvt+0x60>
 8002f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f82:	07db      	lsls	r3, r3, #31
 8002f84:	d522      	bpl.n	8002fcc <__cvt+0xa6>
 8002f86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f8a:	eb06 0905 	add.w	r9, r6, r5
 8002f8e:	d110      	bne.n	8002fb2 <__cvt+0x8c>
 8002f90:	7833      	ldrb	r3, [r6, #0]
 8002f92:	2b30      	cmp	r3, #48	; 0x30
 8002f94:	d10a      	bne.n	8002fac <__cvt+0x86>
 8002f96:	2200      	movs	r2, #0
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	f7fd fd13 	bl	80009c8 <__aeabi_dcmpeq>
 8002fa2:	b918      	cbnz	r0, 8002fac <__cvt+0x86>
 8002fa4:	f1c5 0501 	rsb	r5, r5, #1
 8002fa8:	f8ca 5000 	str.w	r5, [sl]
 8002fac:	f8da 3000 	ldr.w	r3, [sl]
 8002fb0:	4499      	add	r9, r3
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4639      	mov	r1, r7
 8002fba:	f7fd fd05 	bl	80009c8 <__aeabi_dcmpeq>
 8002fbe:	b108      	cbz	r0, 8002fc4 <__cvt+0x9e>
 8002fc0:	f8cd 901c 	str.w	r9, [sp, #28]
 8002fc4:	2230      	movs	r2, #48	; 0x30
 8002fc6:	9b07      	ldr	r3, [sp, #28]
 8002fc8:	454b      	cmp	r3, r9
 8002fca:	d307      	bcc.n	8002fdc <__cvt+0xb6>
 8002fcc:	4630      	mov	r0, r6
 8002fce:	9b07      	ldr	r3, [sp, #28]
 8002fd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002fd2:	1b9b      	subs	r3, r3, r6
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	b008      	add	sp, #32
 8002fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fdc:	1c59      	adds	r1, r3, #1
 8002fde:	9107      	str	r1, [sp, #28]
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e7f0      	b.n	8002fc6 <__cvt+0xa0>

08002fe4 <__exponent>:
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	f803 2b02 	strb.w	r2, [r3], #2
 8002fee:	bfb6      	itet	lt
 8002ff0:	222d      	movlt	r2, #45	; 0x2d
 8002ff2:	222b      	movge	r2, #43	; 0x2b
 8002ff4:	4249      	neglt	r1, r1
 8002ff6:	2909      	cmp	r1, #9
 8002ff8:	7042      	strb	r2, [r0, #1]
 8002ffa:	dd2a      	ble.n	8003052 <__exponent+0x6e>
 8002ffc:	f10d 0207 	add.w	r2, sp, #7
 8003000:	4617      	mov	r7, r2
 8003002:	260a      	movs	r6, #10
 8003004:	fb91 f5f6 	sdiv	r5, r1, r6
 8003008:	4694      	mov	ip, r2
 800300a:	fb06 1415 	mls	r4, r6, r5, r1
 800300e:	3430      	adds	r4, #48	; 0x30
 8003010:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003014:	460c      	mov	r4, r1
 8003016:	2c63      	cmp	r4, #99	; 0x63
 8003018:	4629      	mov	r1, r5
 800301a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800301e:	dcf1      	bgt.n	8003004 <__exponent+0x20>
 8003020:	3130      	adds	r1, #48	; 0x30
 8003022:	f1ac 0402 	sub.w	r4, ip, #2
 8003026:	f802 1c01 	strb.w	r1, [r2, #-1]
 800302a:	4622      	mov	r2, r4
 800302c:	1c41      	adds	r1, r0, #1
 800302e:	42ba      	cmp	r2, r7
 8003030:	d30a      	bcc.n	8003048 <__exponent+0x64>
 8003032:	f10d 0209 	add.w	r2, sp, #9
 8003036:	eba2 020c 	sub.w	r2, r2, ip
 800303a:	42bc      	cmp	r4, r7
 800303c:	bf88      	it	hi
 800303e:	2200      	movhi	r2, #0
 8003040:	4413      	add	r3, r2
 8003042:	1a18      	subs	r0, r3, r0
 8003044:	b003      	add	sp, #12
 8003046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003048:	f812 5b01 	ldrb.w	r5, [r2], #1
 800304c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003050:	e7ed      	b.n	800302e <__exponent+0x4a>
 8003052:	2330      	movs	r3, #48	; 0x30
 8003054:	3130      	adds	r1, #48	; 0x30
 8003056:	7083      	strb	r3, [r0, #2]
 8003058:	70c1      	strb	r1, [r0, #3]
 800305a:	1d03      	adds	r3, r0, #4
 800305c:	e7f1      	b.n	8003042 <__exponent+0x5e>
	...

08003060 <_printf_float>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	b091      	sub	sp, #68	; 0x44
 8003066:	460c      	mov	r4, r1
 8003068:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800306c:	4616      	mov	r6, r2
 800306e:	461f      	mov	r7, r3
 8003070:	4605      	mov	r5, r0
 8003072:	f000 fc6f 	bl	8003954 <_localeconv_r>
 8003076:	6803      	ldr	r3, [r0, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	9309      	str	r3, [sp, #36]	; 0x24
 800307c:	f7fd f878 	bl	8000170 <strlen>
 8003080:	2300      	movs	r3, #0
 8003082:	930e      	str	r3, [sp, #56]	; 0x38
 8003084:	f8d8 3000 	ldr.w	r3, [r8]
 8003088:	900a      	str	r0, [sp, #40]	; 0x28
 800308a:	3307      	adds	r3, #7
 800308c:	f023 0307 	bic.w	r3, r3, #7
 8003090:	f103 0208 	add.w	r2, r3, #8
 8003094:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003098:	f8d4 b000 	ldr.w	fp, [r4]
 800309c:	f8c8 2000 	str.w	r2, [r8]
 80030a0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80030a4:	4652      	mov	r2, sl
 80030a6:	4643      	mov	r3, r8
 80030a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80030ac:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80030b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80030b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030b6:	4650      	mov	r0, sl
 80030b8:	4b9c      	ldr	r3, [pc, #624]	; (800332c <_printf_float+0x2cc>)
 80030ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030bc:	f7fd fcb6 	bl	8000a2c <__aeabi_dcmpun>
 80030c0:	bb70      	cbnz	r0, 8003120 <_printf_float+0xc0>
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030c6:	4650      	mov	r0, sl
 80030c8:	4b98      	ldr	r3, [pc, #608]	; (800332c <_printf_float+0x2cc>)
 80030ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030cc:	f7fd fc90 	bl	80009f0 <__aeabi_dcmple>
 80030d0:	bb30      	cbnz	r0, 8003120 <_printf_float+0xc0>
 80030d2:	2200      	movs	r2, #0
 80030d4:	2300      	movs	r3, #0
 80030d6:	4650      	mov	r0, sl
 80030d8:	4641      	mov	r1, r8
 80030da:	f7fd fc7f 	bl	80009dc <__aeabi_dcmplt>
 80030de:	b110      	cbz	r0, 80030e6 <_printf_float+0x86>
 80030e0:	232d      	movs	r3, #45	; 0x2d
 80030e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e6:	4a92      	ldr	r2, [pc, #584]	; (8003330 <_printf_float+0x2d0>)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <_printf_float+0x2d4>)
 80030ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80030ee:	bf94      	ite	ls
 80030f0:	4690      	movls	r8, r2
 80030f2:	4698      	movhi	r8, r3
 80030f4:	2303      	movs	r3, #3
 80030f6:	f04f 0a00 	mov.w	sl, #0
 80030fa:	6123      	str	r3, [r4, #16]
 80030fc:	f02b 0304 	bic.w	r3, fp, #4
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	4633      	mov	r3, r6
 8003104:	4621      	mov	r1, r4
 8003106:	4628      	mov	r0, r5
 8003108:	9700      	str	r7, [sp, #0]
 800310a:	aa0f      	add	r2, sp, #60	; 0x3c
 800310c:	f000 f9d6 	bl	80034bc <_printf_common>
 8003110:	3001      	adds	r0, #1
 8003112:	f040 8090 	bne.w	8003236 <_printf_float+0x1d6>
 8003116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800311a:	b011      	add	sp, #68	; 0x44
 800311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003120:	4652      	mov	r2, sl
 8003122:	4643      	mov	r3, r8
 8003124:	4650      	mov	r0, sl
 8003126:	4641      	mov	r1, r8
 8003128:	f7fd fc80 	bl	8000a2c <__aeabi_dcmpun>
 800312c:	b148      	cbz	r0, 8003142 <_printf_float+0xe2>
 800312e:	f1b8 0f00 	cmp.w	r8, #0
 8003132:	bfb8      	it	lt
 8003134:	232d      	movlt	r3, #45	; 0x2d
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <_printf_float+0x2d8>)
 8003138:	bfb8      	it	lt
 800313a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800313e:	4b7f      	ldr	r3, [pc, #508]	; (800333c <_printf_float+0x2dc>)
 8003140:	e7d3      	b.n	80030ea <_printf_float+0x8a>
 8003142:	6863      	ldr	r3, [r4, #4]
 8003144:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	d142      	bne.n	80031d2 <_printf_float+0x172>
 800314c:	2306      	movs	r3, #6
 800314e:	6063      	str	r3, [r4, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	9206      	str	r2, [sp, #24]
 8003154:	aa0e      	add	r2, sp, #56	; 0x38
 8003156:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800315a:	aa0d      	add	r2, sp, #52	; 0x34
 800315c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003160:	9203      	str	r2, [sp, #12]
 8003162:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003166:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	6863      	ldr	r3, [r4, #4]
 800316e:	4652      	mov	r2, sl
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4628      	mov	r0, r5
 8003174:	4643      	mov	r3, r8
 8003176:	910b      	str	r1, [sp, #44]	; 0x2c
 8003178:	f7ff fed5 	bl	8002f26 <__cvt>
 800317c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800317e:	4680      	mov	r8, r0
 8003180:	2947      	cmp	r1, #71	; 0x47
 8003182:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003184:	d108      	bne.n	8003198 <_printf_float+0x138>
 8003186:	1cc8      	adds	r0, r1, #3
 8003188:	db02      	blt.n	8003190 <_printf_float+0x130>
 800318a:	6863      	ldr	r3, [r4, #4]
 800318c:	4299      	cmp	r1, r3
 800318e:	dd40      	ble.n	8003212 <_printf_float+0x1b2>
 8003190:	f1a9 0902 	sub.w	r9, r9, #2
 8003194:	fa5f f989 	uxtb.w	r9, r9
 8003198:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800319c:	d81f      	bhi.n	80031de <_printf_float+0x17e>
 800319e:	464a      	mov	r2, r9
 80031a0:	3901      	subs	r1, #1
 80031a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031a6:	910d      	str	r1, [sp, #52]	; 0x34
 80031a8:	f7ff ff1c 	bl	8002fe4 <__exponent>
 80031ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031ae:	4682      	mov	sl, r0
 80031b0:	1813      	adds	r3, r2, r0
 80031b2:	2a01      	cmp	r2, #1
 80031b4:	6123      	str	r3, [r4, #16]
 80031b6:	dc02      	bgt.n	80031be <_printf_float+0x15e>
 80031b8:	6822      	ldr	r2, [r4, #0]
 80031ba:	07d2      	lsls	r2, r2, #31
 80031bc:	d501      	bpl.n	80031c2 <_printf_float+0x162>
 80031be:	3301      	adds	r3, #1
 80031c0:	6123      	str	r3, [r4, #16]
 80031c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d09b      	beq.n	8003102 <_printf_float+0xa2>
 80031ca:	232d      	movs	r3, #45	; 0x2d
 80031cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031d0:	e797      	b.n	8003102 <_printf_float+0xa2>
 80031d2:	2947      	cmp	r1, #71	; 0x47
 80031d4:	d1bc      	bne.n	8003150 <_printf_float+0xf0>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ba      	bne.n	8003150 <_printf_float+0xf0>
 80031da:	2301      	movs	r3, #1
 80031dc:	e7b7      	b.n	800314e <_printf_float+0xee>
 80031de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80031e2:	d118      	bne.n	8003216 <_printf_float+0x1b6>
 80031e4:	2900      	cmp	r1, #0
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	dd0b      	ble.n	8003202 <_printf_float+0x1a2>
 80031ea:	6121      	str	r1, [r4, #16]
 80031ec:	b913      	cbnz	r3, 80031f4 <_printf_float+0x194>
 80031ee:	6822      	ldr	r2, [r4, #0]
 80031f0:	07d0      	lsls	r0, r2, #31
 80031f2:	d502      	bpl.n	80031fa <_printf_float+0x19a>
 80031f4:	3301      	adds	r3, #1
 80031f6:	440b      	add	r3, r1
 80031f8:	6123      	str	r3, [r4, #16]
 80031fa:	f04f 0a00 	mov.w	sl, #0
 80031fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003200:	e7df      	b.n	80031c2 <_printf_float+0x162>
 8003202:	b913      	cbnz	r3, 800320a <_printf_float+0x1aa>
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	07d2      	lsls	r2, r2, #31
 8003208:	d501      	bpl.n	800320e <_printf_float+0x1ae>
 800320a:	3302      	adds	r3, #2
 800320c:	e7f4      	b.n	80031f8 <_printf_float+0x198>
 800320e:	2301      	movs	r3, #1
 8003210:	e7f2      	b.n	80031f8 <_printf_float+0x198>
 8003212:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003218:	4299      	cmp	r1, r3
 800321a:	db05      	blt.n	8003228 <_printf_float+0x1c8>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	6121      	str	r1, [r4, #16]
 8003220:	07d8      	lsls	r0, r3, #31
 8003222:	d5ea      	bpl.n	80031fa <_printf_float+0x19a>
 8003224:	1c4b      	adds	r3, r1, #1
 8003226:	e7e7      	b.n	80031f8 <_printf_float+0x198>
 8003228:	2900      	cmp	r1, #0
 800322a:	bfcc      	ite	gt
 800322c:	2201      	movgt	r2, #1
 800322e:	f1c1 0202 	rsble	r2, r1, #2
 8003232:	4413      	add	r3, r2
 8003234:	e7e0      	b.n	80031f8 <_printf_float+0x198>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	055a      	lsls	r2, r3, #21
 800323a:	d407      	bmi.n	800324c <_printf_float+0x1ec>
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	4642      	mov	r2, r8
 8003240:	4631      	mov	r1, r6
 8003242:	4628      	mov	r0, r5
 8003244:	47b8      	blx	r7
 8003246:	3001      	adds	r0, #1
 8003248:	d12b      	bne.n	80032a2 <_printf_float+0x242>
 800324a:	e764      	b.n	8003116 <_printf_float+0xb6>
 800324c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003250:	f240 80dd 	bls.w	800340e <_printf_float+0x3ae>
 8003254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003258:	2200      	movs	r2, #0
 800325a:	2300      	movs	r3, #0
 800325c:	f7fd fbb4 	bl	80009c8 <__aeabi_dcmpeq>
 8003260:	2800      	cmp	r0, #0
 8003262:	d033      	beq.n	80032cc <_printf_float+0x26c>
 8003264:	2301      	movs	r3, #1
 8003266:	4631      	mov	r1, r6
 8003268:	4628      	mov	r0, r5
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <_printf_float+0x2e0>)
 800326c:	47b8      	blx	r7
 800326e:	3001      	adds	r0, #1
 8003270:	f43f af51 	beq.w	8003116 <_printf_float+0xb6>
 8003274:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003278:	429a      	cmp	r2, r3
 800327a:	db02      	blt.n	8003282 <_printf_float+0x222>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	07d8      	lsls	r0, r3, #31
 8003280:	d50f      	bpl.n	80032a2 <_printf_float+0x242>
 8003282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003286:	4631      	mov	r1, r6
 8003288:	4628      	mov	r0, r5
 800328a:	47b8      	blx	r7
 800328c:	3001      	adds	r0, #1
 800328e:	f43f af42 	beq.w	8003116 <_printf_float+0xb6>
 8003292:	f04f 0800 	mov.w	r8, #0
 8003296:	f104 091a 	add.w	r9, r4, #26
 800329a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800329c:	3b01      	subs	r3, #1
 800329e:	4543      	cmp	r3, r8
 80032a0:	dc09      	bgt.n	80032b6 <_printf_float+0x256>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	079b      	lsls	r3, r3, #30
 80032a6:	f100 8104 	bmi.w	80034b2 <_printf_float+0x452>
 80032aa:	68e0      	ldr	r0, [r4, #12]
 80032ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032ae:	4298      	cmp	r0, r3
 80032b0:	bfb8      	it	lt
 80032b2:	4618      	movlt	r0, r3
 80032b4:	e731      	b.n	800311a <_printf_float+0xba>
 80032b6:	2301      	movs	r3, #1
 80032b8:	464a      	mov	r2, r9
 80032ba:	4631      	mov	r1, r6
 80032bc:	4628      	mov	r0, r5
 80032be:	47b8      	blx	r7
 80032c0:	3001      	adds	r0, #1
 80032c2:	f43f af28 	beq.w	8003116 <_printf_float+0xb6>
 80032c6:	f108 0801 	add.w	r8, r8, #1
 80032ca:	e7e6      	b.n	800329a <_printf_float+0x23a>
 80032cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	dc38      	bgt.n	8003344 <_printf_float+0x2e4>
 80032d2:	2301      	movs	r3, #1
 80032d4:	4631      	mov	r1, r6
 80032d6:	4628      	mov	r0, r5
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <_printf_float+0x2e0>)
 80032da:	47b8      	blx	r7
 80032dc:	3001      	adds	r0, #1
 80032de:	f43f af1a 	beq.w	8003116 <_printf_float+0xb6>
 80032e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d102      	bne.n	80032f0 <_printf_float+0x290>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	07d9      	lsls	r1, r3, #31
 80032ee:	d5d8      	bpl.n	80032a2 <_printf_float+0x242>
 80032f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032f4:	4631      	mov	r1, r6
 80032f6:	4628      	mov	r0, r5
 80032f8:	47b8      	blx	r7
 80032fa:	3001      	adds	r0, #1
 80032fc:	f43f af0b 	beq.w	8003116 <_printf_float+0xb6>
 8003300:	f04f 0900 	mov.w	r9, #0
 8003304:	f104 0a1a 	add.w	sl, r4, #26
 8003308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800330a:	425b      	negs	r3, r3
 800330c:	454b      	cmp	r3, r9
 800330e:	dc01      	bgt.n	8003314 <_printf_float+0x2b4>
 8003310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003312:	e794      	b.n	800323e <_printf_float+0x1de>
 8003314:	2301      	movs	r3, #1
 8003316:	4652      	mov	r2, sl
 8003318:	4631      	mov	r1, r6
 800331a:	4628      	mov	r0, r5
 800331c:	47b8      	blx	r7
 800331e:	3001      	adds	r0, #1
 8003320:	f43f aef9 	beq.w	8003116 <_printf_float+0xb6>
 8003324:	f109 0901 	add.w	r9, r9, #1
 8003328:	e7ee      	b.n	8003308 <_printf_float+0x2a8>
 800332a:	bf00      	nop
 800332c:	7fefffff 	.word	0x7fefffff
 8003330:	08007048 	.word	0x08007048
 8003334:	0800704c 	.word	0x0800704c
 8003338:	08007050 	.word	0x08007050
 800333c:	08007054 	.word	0x08007054
 8003340:	08007058 	.word	0x08007058
 8003344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003348:	429a      	cmp	r2, r3
 800334a:	bfa8      	it	ge
 800334c:	461a      	movge	r2, r3
 800334e:	2a00      	cmp	r2, #0
 8003350:	4691      	mov	r9, r2
 8003352:	dc37      	bgt.n	80033c4 <_printf_float+0x364>
 8003354:	f04f 0b00 	mov.w	fp, #0
 8003358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800335c:	f104 021a 	add.w	r2, r4, #26
 8003360:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003364:	ebaa 0309 	sub.w	r3, sl, r9
 8003368:	455b      	cmp	r3, fp
 800336a:	dc33      	bgt.n	80033d4 <_printf_float+0x374>
 800336c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003370:	429a      	cmp	r2, r3
 8003372:	db3b      	blt.n	80033ec <_printf_float+0x38c>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	07da      	lsls	r2, r3, #31
 8003378:	d438      	bmi.n	80033ec <_printf_float+0x38c>
 800337a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800337e:	eba2 0903 	sub.w	r9, r2, r3
 8003382:	eba2 020a 	sub.w	r2, r2, sl
 8003386:	4591      	cmp	r9, r2
 8003388:	bfa8      	it	ge
 800338a:	4691      	movge	r9, r2
 800338c:	f1b9 0f00 	cmp.w	r9, #0
 8003390:	dc34      	bgt.n	80033fc <_printf_float+0x39c>
 8003392:	f04f 0800 	mov.w	r8, #0
 8003396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800339a:	f104 0a1a 	add.w	sl, r4, #26
 800339e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	eba3 0309 	sub.w	r3, r3, r9
 80033a8:	4543      	cmp	r3, r8
 80033aa:	f77f af7a 	ble.w	80032a2 <_printf_float+0x242>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4652      	mov	r2, sl
 80033b2:	4631      	mov	r1, r6
 80033b4:	4628      	mov	r0, r5
 80033b6:	47b8      	blx	r7
 80033b8:	3001      	adds	r0, #1
 80033ba:	f43f aeac 	beq.w	8003116 <_printf_float+0xb6>
 80033be:	f108 0801 	add.w	r8, r8, #1
 80033c2:	e7ec      	b.n	800339e <_printf_float+0x33e>
 80033c4:	4613      	mov	r3, r2
 80033c6:	4631      	mov	r1, r6
 80033c8:	4642      	mov	r2, r8
 80033ca:	4628      	mov	r0, r5
 80033cc:	47b8      	blx	r7
 80033ce:	3001      	adds	r0, #1
 80033d0:	d1c0      	bne.n	8003354 <_printf_float+0x2f4>
 80033d2:	e6a0      	b.n	8003116 <_printf_float+0xb6>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4631      	mov	r1, r6
 80033d8:	4628      	mov	r0, r5
 80033da:	920b      	str	r2, [sp, #44]	; 0x2c
 80033dc:	47b8      	blx	r7
 80033de:	3001      	adds	r0, #1
 80033e0:	f43f ae99 	beq.w	8003116 <_printf_float+0xb6>
 80033e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033e6:	f10b 0b01 	add.w	fp, fp, #1
 80033ea:	e7b9      	b.n	8003360 <_printf_float+0x300>
 80033ec:	4631      	mov	r1, r6
 80033ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033f2:	4628      	mov	r0, r5
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	d1bf      	bne.n	800337a <_printf_float+0x31a>
 80033fa:	e68c      	b.n	8003116 <_printf_float+0xb6>
 80033fc:	464b      	mov	r3, r9
 80033fe:	4631      	mov	r1, r6
 8003400:	4628      	mov	r0, r5
 8003402:	eb08 020a 	add.w	r2, r8, sl
 8003406:	47b8      	blx	r7
 8003408:	3001      	adds	r0, #1
 800340a:	d1c2      	bne.n	8003392 <_printf_float+0x332>
 800340c:	e683      	b.n	8003116 <_printf_float+0xb6>
 800340e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003410:	2a01      	cmp	r2, #1
 8003412:	dc01      	bgt.n	8003418 <_printf_float+0x3b8>
 8003414:	07db      	lsls	r3, r3, #31
 8003416:	d539      	bpl.n	800348c <_printf_float+0x42c>
 8003418:	2301      	movs	r3, #1
 800341a:	4642      	mov	r2, r8
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	f43f ae77 	beq.w	8003116 <_printf_float+0xb6>
 8003428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f ae6f 	beq.w	8003116 <_printf_float+0xb6>
 8003438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800343c:	2200      	movs	r2, #0
 800343e:	2300      	movs	r3, #0
 8003440:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003444:	f7fd fac0 	bl	80009c8 <__aeabi_dcmpeq>
 8003448:	b9d8      	cbnz	r0, 8003482 <_printf_float+0x422>
 800344a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800344e:	f108 0201 	add.w	r2, r8, #1
 8003452:	4631      	mov	r1, r6
 8003454:	4628      	mov	r0, r5
 8003456:	47b8      	blx	r7
 8003458:	3001      	adds	r0, #1
 800345a:	d10e      	bne.n	800347a <_printf_float+0x41a>
 800345c:	e65b      	b.n	8003116 <_printf_float+0xb6>
 800345e:	2301      	movs	r3, #1
 8003460:	464a      	mov	r2, r9
 8003462:	4631      	mov	r1, r6
 8003464:	4628      	mov	r0, r5
 8003466:	47b8      	blx	r7
 8003468:	3001      	adds	r0, #1
 800346a:	f43f ae54 	beq.w	8003116 <_printf_float+0xb6>
 800346e:	f108 0801 	add.w	r8, r8, #1
 8003472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003474:	3b01      	subs	r3, #1
 8003476:	4543      	cmp	r3, r8
 8003478:	dcf1      	bgt.n	800345e <_printf_float+0x3fe>
 800347a:	4653      	mov	r3, sl
 800347c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003480:	e6de      	b.n	8003240 <_printf_float+0x1e0>
 8003482:	f04f 0800 	mov.w	r8, #0
 8003486:	f104 091a 	add.w	r9, r4, #26
 800348a:	e7f2      	b.n	8003472 <_printf_float+0x412>
 800348c:	2301      	movs	r3, #1
 800348e:	4642      	mov	r2, r8
 8003490:	e7df      	b.n	8003452 <_printf_float+0x3f2>
 8003492:	2301      	movs	r3, #1
 8003494:	464a      	mov	r2, r9
 8003496:	4631      	mov	r1, r6
 8003498:	4628      	mov	r0, r5
 800349a:	47b8      	blx	r7
 800349c:	3001      	adds	r0, #1
 800349e:	f43f ae3a 	beq.w	8003116 <_printf_float+0xb6>
 80034a2:	f108 0801 	add.w	r8, r8, #1
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80034aa:	1a5b      	subs	r3, r3, r1
 80034ac:	4543      	cmp	r3, r8
 80034ae:	dcf0      	bgt.n	8003492 <_printf_float+0x432>
 80034b0:	e6fb      	b.n	80032aa <_printf_float+0x24a>
 80034b2:	f04f 0800 	mov.w	r8, #0
 80034b6:	f104 0919 	add.w	r9, r4, #25
 80034ba:	e7f4      	b.n	80034a6 <_printf_float+0x446>

080034bc <_printf_common>:
 80034bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c0:	4616      	mov	r6, r2
 80034c2:	4699      	mov	r9, r3
 80034c4:	688a      	ldr	r2, [r1, #8]
 80034c6:	690b      	ldr	r3, [r1, #16]
 80034c8:	4607      	mov	r7, r0
 80034ca:	4293      	cmp	r3, r2
 80034cc:	bfb8      	it	lt
 80034ce:	4613      	movlt	r3, r2
 80034d0:	6033      	str	r3, [r6, #0]
 80034d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d6:	460c      	mov	r4, r1
 80034d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034dc:	b10a      	cbz	r2, 80034e2 <_printf_common+0x26>
 80034de:	3301      	adds	r3, #1
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	0699      	lsls	r1, r3, #26
 80034e6:	bf42      	ittt	mi
 80034e8:	6833      	ldrmi	r3, [r6, #0]
 80034ea:	3302      	addmi	r3, #2
 80034ec:	6033      	strmi	r3, [r6, #0]
 80034ee:	6825      	ldr	r5, [r4, #0]
 80034f0:	f015 0506 	ands.w	r5, r5, #6
 80034f4:	d106      	bne.n	8003504 <_printf_common+0x48>
 80034f6:	f104 0a19 	add.w	sl, r4, #25
 80034fa:	68e3      	ldr	r3, [r4, #12]
 80034fc:	6832      	ldr	r2, [r6, #0]
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	42ab      	cmp	r3, r5
 8003502:	dc2b      	bgt.n	800355c <_printf_common+0xa0>
 8003504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003508:	1e13      	subs	r3, r2, #0
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	bf18      	it	ne
 800350e:	2301      	movne	r3, #1
 8003510:	0692      	lsls	r2, r2, #26
 8003512:	d430      	bmi.n	8003576 <_printf_common+0xba>
 8003514:	4649      	mov	r1, r9
 8003516:	4638      	mov	r0, r7
 8003518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800351c:	47c0      	blx	r8
 800351e:	3001      	adds	r0, #1
 8003520:	d023      	beq.n	800356a <_printf_common+0xae>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	6922      	ldr	r2, [r4, #16]
 8003526:	f003 0306 	and.w	r3, r3, #6
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf14      	ite	ne
 800352e:	2500      	movne	r5, #0
 8003530:	6833      	ldreq	r3, [r6, #0]
 8003532:	f04f 0600 	mov.w	r6, #0
 8003536:	bf08      	it	eq
 8003538:	68e5      	ldreq	r5, [r4, #12]
 800353a:	f104 041a 	add.w	r4, r4, #26
 800353e:	bf08      	it	eq
 8003540:	1aed      	subeq	r5, r5, r3
 8003542:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003546:	bf08      	it	eq
 8003548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800354c:	4293      	cmp	r3, r2
 800354e:	bfc4      	itt	gt
 8003550:	1a9b      	subgt	r3, r3, r2
 8003552:	18ed      	addgt	r5, r5, r3
 8003554:	42b5      	cmp	r5, r6
 8003556:	d11a      	bne.n	800358e <_printf_common+0xd2>
 8003558:	2000      	movs	r0, #0
 800355a:	e008      	b.n	800356e <_printf_common+0xb2>
 800355c:	2301      	movs	r3, #1
 800355e:	4652      	mov	r2, sl
 8003560:	4649      	mov	r1, r9
 8003562:	4638      	mov	r0, r7
 8003564:	47c0      	blx	r8
 8003566:	3001      	adds	r0, #1
 8003568:	d103      	bne.n	8003572 <_printf_common+0xb6>
 800356a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003572:	3501      	adds	r5, #1
 8003574:	e7c1      	b.n	80034fa <_printf_common+0x3e>
 8003576:	2030      	movs	r0, #48	; 0x30
 8003578:	18e1      	adds	r1, r4, r3
 800357a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003584:	4422      	add	r2, r4
 8003586:	3302      	adds	r3, #2
 8003588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800358c:	e7c2      	b.n	8003514 <_printf_common+0x58>
 800358e:	2301      	movs	r3, #1
 8003590:	4622      	mov	r2, r4
 8003592:	4649      	mov	r1, r9
 8003594:	4638      	mov	r0, r7
 8003596:	47c0      	blx	r8
 8003598:	3001      	adds	r0, #1
 800359a:	d0e6      	beq.n	800356a <_printf_common+0xae>
 800359c:	3601      	adds	r6, #1
 800359e:	e7d9      	b.n	8003554 <_printf_common+0x98>

080035a0 <_printf_i>:
 80035a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	7e0f      	ldrb	r7, [r1, #24]
 80035a6:	4691      	mov	r9, r2
 80035a8:	2f78      	cmp	r7, #120	; 0x78
 80035aa:	4680      	mov	r8, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	469a      	mov	sl, r3
 80035b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035b6:	d807      	bhi.n	80035c8 <_printf_i+0x28>
 80035b8:	2f62      	cmp	r7, #98	; 0x62
 80035ba:	d80a      	bhi.n	80035d2 <_printf_i+0x32>
 80035bc:	2f00      	cmp	r7, #0
 80035be:	f000 80d5 	beq.w	800376c <_printf_i+0x1cc>
 80035c2:	2f58      	cmp	r7, #88	; 0x58
 80035c4:	f000 80c1 	beq.w	800374a <_printf_i+0x1aa>
 80035c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035d0:	e03a      	b.n	8003648 <_printf_i+0xa8>
 80035d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035d6:	2b15      	cmp	r3, #21
 80035d8:	d8f6      	bhi.n	80035c8 <_printf_i+0x28>
 80035da:	a101      	add	r1, pc, #4	; (adr r1, 80035e0 <_printf_i+0x40>)
 80035dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035e0:	08003639 	.word	0x08003639
 80035e4:	0800364d 	.word	0x0800364d
 80035e8:	080035c9 	.word	0x080035c9
 80035ec:	080035c9 	.word	0x080035c9
 80035f0:	080035c9 	.word	0x080035c9
 80035f4:	080035c9 	.word	0x080035c9
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	080035c9 	.word	0x080035c9
 8003600:	080035c9 	.word	0x080035c9
 8003604:	080035c9 	.word	0x080035c9
 8003608:	080035c9 	.word	0x080035c9
 800360c:	08003753 	.word	0x08003753
 8003610:	08003679 	.word	0x08003679
 8003614:	0800370d 	.word	0x0800370d
 8003618:	080035c9 	.word	0x080035c9
 800361c:	080035c9 	.word	0x080035c9
 8003620:	08003775 	.word	0x08003775
 8003624:	080035c9 	.word	0x080035c9
 8003628:	08003679 	.word	0x08003679
 800362c:	080035c9 	.word	0x080035c9
 8003630:	080035c9 	.word	0x080035c9
 8003634:	08003715 	.word	0x08003715
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	1d1a      	adds	r2, r3, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	602a      	str	r2, [r5, #0]
 8003640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003648:	2301      	movs	r3, #1
 800364a:	e0a0      	b.n	800378e <_printf_i+0x1ee>
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	682b      	ldr	r3, [r5, #0]
 8003650:	0607      	lsls	r7, r0, #24
 8003652:	f103 0104 	add.w	r1, r3, #4
 8003656:	6029      	str	r1, [r5, #0]
 8003658:	d501      	bpl.n	800365e <_printf_i+0xbe>
 800365a:	681e      	ldr	r6, [r3, #0]
 800365c:	e003      	b.n	8003666 <_printf_i+0xc6>
 800365e:	0646      	lsls	r6, r0, #25
 8003660:	d5fb      	bpl.n	800365a <_printf_i+0xba>
 8003662:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003666:	2e00      	cmp	r6, #0
 8003668:	da03      	bge.n	8003672 <_printf_i+0xd2>
 800366a:	232d      	movs	r3, #45	; 0x2d
 800366c:	4276      	negs	r6, r6
 800366e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003672:	230a      	movs	r3, #10
 8003674:	4859      	ldr	r0, [pc, #356]	; (80037dc <_printf_i+0x23c>)
 8003676:	e012      	b.n	800369e <_printf_i+0xfe>
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	1d19      	adds	r1, r3, #4
 800367e:	6029      	str	r1, [r5, #0]
 8003680:	0605      	lsls	r5, r0, #24
 8003682:	d501      	bpl.n	8003688 <_printf_i+0xe8>
 8003684:	681e      	ldr	r6, [r3, #0]
 8003686:	e002      	b.n	800368e <_printf_i+0xee>
 8003688:	0641      	lsls	r1, r0, #25
 800368a:	d5fb      	bpl.n	8003684 <_printf_i+0xe4>
 800368c:	881e      	ldrh	r6, [r3, #0]
 800368e:	2f6f      	cmp	r7, #111	; 0x6f
 8003690:	bf0c      	ite	eq
 8003692:	2308      	moveq	r3, #8
 8003694:	230a      	movne	r3, #10
 8003696:	4851      	ldr	r0, [pc, #324]	; (80037dc <_printf_i+0x23c>)
 8003698:	2100      	movs	r1, #0
 800369a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800369e:	6865      	ldr	r5, [r4, #4]
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	bfa8      	it	ge
 80036a4:	6821      	ldrge	r1, [r4, #0]
 80036a6:	60a5      	str	r5, [r4, #8]
 80036a8:	bfa4      	itt	ge
 80036aa:	f021 0104 	bicge.w	r1, r1, #4
 80036ae:	6021      	strge	r1, [r4, #0]
 80036b0:	b90e      	cbnz	r6, 80036b6 <_printf_i+0x116>
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	d04b      	beq.n	800374e <_printf_i+0x1ae>
 80036b6:	4615      	mov	r5, r2
 80036b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80036bc:	fb03 6711 	mls	r7, r3, r1, r6
 80036c0:	5dc7      	ldrb	r7, [r0, r7]
 80036c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036c6:	4637      	mov	r7, r6
 80036c8:	42bb      	cmp	r3, r7
 80036ca:	460e      	mov	r6, r1
 80036cc:	d9f4      	bls.n	80036b8 <_printf_i+0x118>
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d10b      	bne.n	80036ea <_printf_i+0x14a>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	07de      	lsls	r6, r3, #31
 80036d6:	d508      	bpl.n	80036ea <_printf_i+0x14a>
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	6861      	ldr	r1, [r4, #4]
 80036dc:	4299      	cmp	r1, r3
 80036de:	bfde      	ittt	le
 80036e0:	2330      	movle	r3, #48	; 0x30
 80036e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036ea:	1b52      	subs	r2, r2, r5
 80036ec:	6122      	str	r2, [r4, #16]
 80036ee:	464b      	mov	r3, r9
 80036f0:	4621      	mov	r1, r4
 80036f2:	4640      	mov	r0, r8
 80036f4:	f8cd a000 	str.w	sl, [sp]
 80036f8:	aa03      	add	r2, sp, #12
 80036fa:	f7ff fedf 	bl	80034bc <_printf_common>
 80036fe:	3001      	adds	r0, #1
 8003700:	d14a      	bne.n	8003798 <_printf_i+0x1f8>
 8003702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003706:	b004      	add	sp, #16
 8003708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	2778      	movs	r7, #120	; 0x78
 8003716:	4832      	ldr	r0, [pc, #200]	; (80037e0 <_printf_i+0x240>)
 8003718:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	6829      	ldr	r1, [r5, #0]
 8003720:	061f      	lsls	r7, r3, #24
 8003722:	f851 6b04 	ldr.w	r6, [r1], #4
 8003726:	d402      	bmi.n	800372e <_printf_i+0x18e>
 8003728:	065f      	lsls	r7, r3, #25
 800372a:	bf48      	it	mi
 800372c:	b2b6      	uxthmi	r6, r6
 800372e:	07df      	lsls	r7, r3, #31
 8003730:	bf48      	it	mi
 8003732:	f043 0320 	orrmi.w	r3, r3, #32
 8003736:	6029      	str	r1, [r5, #0]
 8003738:	bf48      	it	mi
 800373a:	6023      	strmi	r3, [r4, #0]
 800373c:	b91e      	cbnz	r6, 8003746 <_printf_i+0x1a6>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f023 0320 	bic.w	r3, r3, #32
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	2310      	movs	r3, #16
 8003748:	e7a6      	b.n	8003698 <_printf_i+0xf8>
 800374a:	4824      	ldr	r0, [pc, #144]	; (80037dc <_printf_i+0x23c>)
 800374c:	e7e4      	b.n	8003718 <_printf_i+0x178>
 800374e:	4615      	mov	r5, r2
 8003750:	e7bd      	b.n	80036ce <_printf_i+0x12e>
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	6826      	ldr	r6, [r4, #0]
 8003756:	1d18      	adds	r0, r3, #4
 8003758:	6961      	ldr	r1, [r4, #20]
 800375a:	6028      	str	r0, [r5, #0]
 800375c:	0635      	lsls	r5, r6, #24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	d501      	bpl.n	8003766 <_printf_i+0x1c6>
 8003762:	6019      	str	r1, [r3, #0]
 8003764:	e002      	b.n	800376c <_printf_i+0x1cc>
 8003766:	0670      	lsls	r0, r6, #25
 8003768:	d5fb      	bpl.n	8003762 <_printf_i+0x1c2>
 800376a:	8019      	strh	r1, [r3, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	4615      	mov	r5, r2
 8003770:	6123      	str	r3, [r4, #16]
 8003772:	e7bc      	b.n	80036ee <_printf_i+0x14e>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	2100      	movs	r1, #0
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	602a      	str	r2, [r5, #0]
 800377c:	681d      	ldr	r5, [r3, #0]
 800377e:	6862      	ldr	r2, [r4, #4]
 8003780:	4628      	mov	r0, r5
 8003782:	f000 f917 	bl	80039b4 <memchr>
 8003786:	b108      	cbz	r0, 800378c <_printf_i+0x1ec>
 8003788:	1b40      	subs	r0, r0, r5
 800378a:	6060      	str	r0, [r4, #4]
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	6123      	str	r3, [r4, #16]
 8003790:	2300      	movs	r3, #0
 8003792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003796:	e7aa      	b.n	80036ee <_printf_i+0x14e>
 8003798:	462a      	mov	r2, r5
 800379a:	4649      	mov	r1, r9
 800379c:	4640      	mov	r0, r8
 800379e:	6923      	ldr	r3, [r4, #16]
 80037a0:	47d0      	blx	sl
 80037a2:	3001      	adds	r0, #1
 80037a4:	d0ad      	beq.n	8003702 <_printf_i+0x162>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	079b      	lsls	r3, r3, #30
 80037aa:	d413      	bmi.n	80037d4 <_printf_i+0x234>
 80037ac:	68e0      	ldr	r0, [r4, #12]
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	4298      	cmp	r0, r3
 80037b2:	bfb8      	it	lt
 80037b4:	4618      	movlt	r0, r3
 80037b6:	e7a6      	b.n	8003706 <_printf_i+0x166>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4632      	mov	r2, r6
 80037bc:	4649      	mov	r1, r9
 80037be:	4640      	mov	r0, r8
 80037c0:	47d0      	blx	sl
 80037c2:	3001      	adds	r0, #1
 80037c4:	d09d      	beq.n	8003702 <_printf_i+0x162>
 80037c6:	3501      	adds	r5, #1
 80037c8:	68e3      	ldr	r3, [r4, #12]
 80037ca:	9903      	ldr	r1, [sp, #12]
 80037cc:	1a5b      	subs	r3, r3, r1
 80037ce:	42ab      	cmp	r3, r5
 80037d0:	dcf2      	bgt.n	80037b8 <_printf_i+0x218>
 80037d2:	e7eb      	b.n	80037ac <_printf_i+0x20c>
 80037d4:	2500      	movs	r5, #0
 80037d6:	f104 0619 	add.w	r6, r4, #25
 80037da:	e7f5      	b.n	80037c8 <_printf_i+0x228>
 80037dc:	0800705a 	.word	0x0800705a
 80037e0:	0800706b 	.word	0x0800706b

080037e4 <std>:
 80037e4:	2300      	movs	r3, #0
 80037e6:	b510      	push	{r4, lr}
 80037e8:	4604      	mov	r4, r0
 80037ea:	e9c0 3300 	strd	r3, r3, [r0]
 80037ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037f2:	6083      	str	r3, [r0, #8]
 80037f4:	8181      	strh	r1, [r0, #12]
 80037f6:	6643      	str	r3, [r0, #100]	; 0x64
 80037f8:	81c2      	strh	r2, [r0, #14]
 80037fa:	6183      	str	r3, [r0, #24]
 80037fc:	4619      	mov	r1, r3
 80037fe:	2208      	movs	r2, #8
 8003800:	305c      	adds	r0, #92	; 0x5c
 8003802:	f000 f89f 	bl	8003944 <memset>
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <std+0x38>)
 8003808:	6224      	str	r4, [r4, #32]
 800380a:	6263      	str	r3, [r4, #36]	; 0x24
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <std+0x3c>)
 800380e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <std+0x40>)
 8003812:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <std+0x44>)
 8003816:	6323      	str	r3, [r4, #48]	; 0x30
 8003818:	bd10      	pop	{r4, pc}
 800381a:	bf00      	nop
 800381c:	0800505d 	.word	0x0800505d
 8003820:	0800507f 	.word	0x0800507f
 8003824:	080050b7 	.word	0x080050b7
 8003828:	080050db 	.word	0x080050db

0800382c <stdio_exit_handler>:
 800382c:	4a02      	ldr	r2, [pc, #8]	; (8003838 <stdio_exit_handler+0xc>)
 800382e:	4903      	ldr	r1, [pc, #12]	; (800383c <stdio_exit_handler+0x10>)
 8003830:	4803      	ldr	r0, [pc, #12]	; (8003840 <stdio_exit_handler+0x14>)
 8003832:	f000 b869 	b.w	8003908 <_fwalk_sglue>
 8003836:	bf00      	nop
 8003838:	20000008 	.word	0x20000008
 800383c:	08004905 	.word	0x08004905
 8003840:	20000014 	.word	0x20000014

08003844 <cleanup_stdio>:
 8003844:	6841      	ldr	r1, [r0, #4]
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <cleanup_stdio+0x34>)
 8003848:	b510      	push	{r4, lr}
 800384a:	4299      	cmp	r1, r3
 800384c:	4604      	mov	r4, r0
 800384e:	d001      	beq.n	8003854 <cleanup_stdio+0x10>
 8003850:	f001 f858 	bl	8004904 <_fflush_r>
 8003854:	68a1      	ldr	r1, [r4, #8]
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <cleanup_stdio+0x38>)
 8003858:	4299      	cmp	r1, r3
 800385a:	d002      	beq.n	8003862 <cleanup_stdio+0x1e>
 800385c:	4620      	mov	r0, r4
 800385e:	f001 f851 	bl	8004904 <_fflush_r>
 8003862:	68e1      	ldr	r1, [r4, #12]
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <cleanup_stdio+0x3c>)
 8003866:	4299      	cmp	r1, r3
 8003868:	d004      	beq.n	8003874 <cleanup_stdio+0x30>
 800386a:	4620      	mov	r0, r4
 800386c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003870:	f001 b848 	b.w	8004904 <_fflush_r>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	bf00      	nop
 8003878:	200002a8 	.word	0x200002a8
 800387c:	20000310 	.word	0x20000310
 8003880:	20000378 	.word	0x20000378

08003884 <global_stdio_init.part.0>:
 8003884:	b510      	push	{r4, lr}
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <global_stdio_init.part.0+0x30>)
 8003888:	4c0b      	ldr	r4, [pc, #44]	; (80038b8 <global_stdio_init.part.0+0x34>)
 800388a:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <global_stdio_init.part.0+0x38>)
 800388c:	4620      	mov	r0, r4
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	2104      	movs	r1, #4
 8003892:	2200      	movs	r2, #0
 8003894:	f7ff ffa6 	bl	80037e4 <std>
 8003898:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800389c:	2201      	movs	r2, #1
 800389e:	2109      	movs	r1, #9
 80038a0:	f7ff ffa0 	bl	80037e4 <std>
 80038a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80038a8:	2202      	movs	r2, #2
 80038aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ae:	2112      	movs	r1, #18
 80038b0:	f7ff bf98 	b.w	80037e4 <std>
 80038b4:	200003e0 	.word	0x200003e0
 80038b8:	200002a8 	.word	0x200002a8
 80038bc:	0800382d 	.word	0x0800382d

080038c0 <__sfp_lock_acquire>:
 80038c0:	4801      	ldr	r0, [pc, #4]	; (80038c8 <__sfp_lock_acquire+0x8>)
 80038c2:	f000 b875 	b.w	80039b0 <__retarget_lock_acquire_recursive>
 80038c6:	bf00      	nop
 80038c8:	200003e5 	.word	0x200003e5

080038cc <__sfp_lock_release>:
 80038cc:	4801      	ldr	r0, [pc, #4]	; (80038d4 <__sfp_lock_release+0x8>)
 80038ce:	f000 b870 	b.w	80039b2 <__retarget_lock_release_recursive>
 80038d2:	bf00      	nop
 80038d4:	200003e5 	.word	0x200003e5

080038d8 <__sinit>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	4604      	mov	r4, r0
 80038dc:	f7ff fff0 	bl	80038c0 <__sfp_lock_acquire>
 80038e0:	6a23      	ldr	r3, [r4, #32]
 80038e2:	b11b      	cbz	r3, 80038ec <__sinit+0x14>
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e8:	f7ff bff0 	b.w	80038cc <__sfp_lock_release>
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <__sinit+0x28>)
 80038ee:	6223      	str	r3, [r4, #32]
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <__sinit+0x2c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f5      	bne.n	80038e4 <__sinit+0xc>
 80038f8:	f7ff ffc4 	bl	8003884 <global_stdio_init.part.0>
 80038fc:	e7f2      	b.n	80038e4 <__sinit+0xc>
 80038fe:	bf00      	nop
 8003900:	08003845 	.word	0x08003845
 8003904:	200003e0 	.word	0x200003e0

08003908 <_fwalk_sglue>:
 8003908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800390c:	4607      	mov	r7, r0
 800390e:	4688      	mov	r8, r1
 8003910:	4614      	mov	r4, r2
 8003912:	2600      	movs	r6, #0
 8003914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003918:	f1b9 0901 	subs.w	r9, r9, #1
 800391c:	d505      	bpl.n	800392a <_fwalk_sglue+0x22>
 800391e:	6824      	ldr	r4, [r4, #0]
 8003920:	2c00      	cmp	r4, #0
 8003922:	d1f7      	bne.n	8003914 <_fwalk_sglue+0xc>
 8003924:	4630      	mov	r0, r6
 8003926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392a:	89ab      	ldrh	r3, [r5, #12]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d907      	bls.n	8003940 <_fwalk_sglue+0x38>
 8003930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003934:	3301      	adds	r3, #1
 8003936:	d003      	beq.n	8003940 <_fwalk_sglue+0x38>
 8003938:	4629      	mov	r1, r5
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	4306      	orrs	r6, r0
 8003940:	3568      	adds	r5, #104	; 0x68
 8003942:	e7e9      	b.n	8003918 <_fwalk_sglue+0x10>

08003944 <memset>:
 8003944:	4603      	mov	r3, r0
 8003946:	4402      	add	r2, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <_localeconv_r>:
 8003954:	4800      	ldr	r0, [pc, #0]	; (8003958 <_localeconv_r+0x4>)
 8003956:	4770      	bx	lr
 8003958:	20000154 	.word	0x20000154

0800395c <__errno>:
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <__errno+0x8>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000060 	.word	0x20000060

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	2600      	movs	r6, #0
 800396c:	4d0c      	ldr	r5, [pc, #48]	; (80039a0 <__libc_init_array+0x38>)
 800396e:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 8003970:	1b64      	subs	r4, r4, r5
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	42a6      	cmp	r6, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	f002 ff18 	bl	80067ac <_init>
 800397c:	2600      	movs	r6, #0
 800397e:	4d0a      	ldr	r5, [pc, #40]	; (80039a8 <__libc_init_array+0x40>)
 8003980:	4c0a      	ldr	r4, [pc, #40]	; (80039ac <__libc_init_array+0x44>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	42a6      	cmp	r6, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003990:	4798      	blx	r3
 8003992:	3601      	adds	r6, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f855 3b04 	ldr.w	r3, [r5], #4
 800399a:	4798      	blx	r3
 800399c:	3601      	adds	r6, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	080073f0 	.word	0x080073f0
 80039a4:	080073f0 	.word	0x080073f0
 80039a8:	080073f0 	.word	0x080073f0
 80039ac:	080073f4 	.word	0x080073f4

080039b0 <__retarget_lock_acquire_recursive>:
 80039b0:	4770      	bx	lr

080039b2 <__retarget_lock_release_recursive>:
 80039b2:	4770      	bx	lr

080039b4 <memchr>:
 80039b4:	4603      	mov	r3, r0
 80039b6:	b510      	push	{r4, lr}
 80039b8:	b2c9      	uxtb	r1, r1
 80039ba:	4402      	add	r2, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	d101      	bne.n	80039c6 <memchr+0x12>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e003      	b.n	80039ce <memchr+0x1a>
 80039c6:	7804      	ldrb	r4, [r0, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	428c      	cmp	r4, r1
 80039cc:	d1f6      	bne.n	80039bc <memchr+0x8>
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <quorem>:
 80039d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	6903      	ldr	r3, [r0, #16]
 80039d6:	690c      	ldr	r4, [r1, #16]
 80039d8:	4607      	mov	r7, r0
 80039da:	42a3      	cmp	r3, r4
 80039dc:	db7f      	blt.n	8003ade <quorem+0x10e>
 80039de:	3c01      	subs	r4, #1
 80039e0:	f100 0514 	add.w	r5, r0, #20
 80039e4:	f101 0814 	add.w	r8, r1, #20
 80039e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80039f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039f6:	3301      	adds	r3, #1
 80039f8:	429a      	cmp	r2, r3
 80039fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80039fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a06:	d331      	bcc.n	8003a6c <quorem+0x9c>
 8003a08:	f04f 0e00 	mov.w	lr, #0
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	46ac      	mov	ip, r5
 8003a10:	46f2      	mov	sl, lr
 8003a12:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a16:	b293      	uxth	r3, r2
 8003a18:	fb06 e303 	mla	r3, r6, r3, lr
 8003a1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a20:	0c1a      	lsrs	r2, r3, #16
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	fb06 220e 	mla	r2, r6, lr, r2
 8003a28:	ebaa 0303 	sub.w	r3, sl, r3
 8003a2c:	f8dc a000 	ldr.w	sl, [ip]
 8003a30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a34:	fa1f fa8a 	uxth.w	sl, sl
 8003a38:	4453      	add	r3, sl
 8003a3a:	f8dc a000 	ldr.w	sl, [ip]
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a4e:	4581      	cmp	r9, r0
 8003a50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003a54:	f84c 3b04 	str.w	r3, [ip], #4
 8003a58:	d2db      	bcs.n	8003a12 <quorem+0x42>
 8003a5a:	f855 300b 	ldr.w	r3, [r5, fp]
 8003a5e:	b92b      	cbnz	r3, 8003a6c <quorem+0x9c>
 8003a60:	9b01      	ldr	r3, [sp, #4]
 8003a62:	3b04      	subs	r3, #4
 8003a64:	429d      	cmp	r5, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	d32d      	bcc.n	8003ac6 <quorem+0xf6>
 8003a6a:	613c      	str	r4, [r7, #16]
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f001 f9f7 	bl	8004e60 <__mcmp>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	db23      	blt.n	8003abe <quorem+0xee>
 8003a76:	4629      	mov	r1, r5
 8003a78:	2000      	movs	r0, #0
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a80:	f8d1 c000 	ldr.w	ip, [r1]
 8003a84:	b293      	uxth	r3, r2
 8003a86:	1ac3      	subs	r3, r0, r3
 8003a88:	0c12      	lsrs	r2, r2, #16
 8003a8a:	fa1f f08c 	uxth.w	r0, ip
 8003a8e:	4403      	add	r3, r0
 8003a90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a9e:	45c1      	cmp	r9, r8
 8003aa0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003aa4:	f841 3b04 	str.w	r3, [r1], #4
 8003aa8:	d2e8      	bcs.n	8003a7c <quorem+0xac>
 8003aaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ab2:	b922      	cbnz	r2, 8003abe <quorem+0xee>
 8003ab4:	3b04      	subs	r3, #4
 8003ab6:	429d      	cmp	r5, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	d30a      	bcc.n	8003ad2 <quorem+0x102>
 8003abc:	613c      	str	r4, [r7, #16]
 8003abe:	4630      	mov	r0, r6
 8003ac0:	b003      	add	sp, #12
 8003ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	3b04      	subs	r3, #4
 8003aca:	2a00      	cmp	r2, #0
 8003acc:	d1cd      	bne.n	8003a6a <quorem+0x9a>
 8003ace:	3c01      	subs	r4, #1
 8003ad0:	e7c8      	b.n	8003a64 <quorem+0x94>
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	3b04      	subs	r3, #4
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d1f0      	bne.n	8003abc <quorem+0xec>
 8003ada:	3c01      	subs	r4, #1
 8003adc:	e7eb      	b.n	8003ab6 <quorem+0xe6>
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e7ee      	b.n	8003ac0 <quorem+0xf0>
 8003ae2:	0000      	movs	r0, r0
 8003ae4:	0000      	movs	r0, r0
	...

08003ae8 <_dtoa_r>:
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	4616      	mov	r6, r2
 8003aee:	461f      	mov	r7, r3
 8003af0:	69c4      	ldr	r4, [r0, #28]
 8003af2:	b099      	sub	sp, #100	; 0x64
 8003af4:	4605      	mov	r5, r0
 8003af6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003afa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003afe:	b974      	cbnz	r4, 8003b1e <_dtoa_r+0x36>
 8003b00:	2010      	movs	r0, #16
 8003b02:	f000 fdd5 	bl	80046b0 <malloc>
 8003b06:	4602      	mov	r2, r0
 8003b08:	61e8      	str	r0, [r5, #28]
 8003b0a:	b920      	cbnz	r0, 8003b16 <_dtoa_r+0x2e>
 8003b0c:	21ef      	movs	r1, #239	; 0xef
 8003b0e:	4bac      	ldr	r3, [pc, #688]	; (8003dc0 <_dtoa_r+0x2d8>)
 8003b10:	48ac      	ldr	r0, [pc, #688]	; (8003dc4 <_dtoa_r+0x2dc>)
 8003b12:	f001 fb4b 	bl	80051ac <__assert_func>
 8003b16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003b1a:	6004      	str	r4, [r0, #0]
 8003b1c:	60c4      	str	r4, [r0, #12]
 8003b1e:	69eb      	ldr	r3, [r5, #28]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	b151      	cbz	r1, 8003b3a <_dtoa_r+0x52>
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	2301      	movs	r3, #1
 8003b28:	4093      	lsls	r3, r2
 8003b2a:	604a      	str	r2, [r1, #4]
 8003b2c:	608b      	str	r3, [r1, #8]
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 ff5c 	bl	80049ec <_Bfree>
 8003b34:	2200      	movs	r2, #0
 8003b36:	69eb      	ldr	r3, [r5, #28]
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	1e3b      	subs	r3, r7, #0
 8003b3c:	bfaf      	iteee	ge
 8003b3e:	2300      	movge	r3, #0
 8003b40:	2201      	movlt	r2, #1
 8003b42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b46:	9305      	strlt	r3, [sp, #20]
 8003b48:	bfa8      	it	ge
 8003b4a:	f8c8 3000 	strge.w	r3, [r8]
 8003b4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003b52:	4b9d      	ldr	r3, [pc, #628]	; (8003dc8 <_dtoa_r+0x2e0>)
 8003b54:	bfb8      	it	lt
 8003b56:	f8c8 2000 	strlt.w	r2, [r8]
 8003b5a:	ea33 0309 	bics.w	r3, r3, r9
 8003b5e:	d119      	bne.n	8003b94 <_dtoa_r+0xac>
 8003b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b6c:	4333      	orrs	r3, r6
 8003b6e:	f000 8589 	beq.w	8004684 <_dtoa_r+0xb9c>
 8003b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b74:	b953      	cbnz	r3, 8003b8c <_dtoa_r+0xa4>
 8003b76:	4b95      	ldr	r3, [pc, #596]	; (8003dcc <_dtoa_r+0x2e4>)
 8003b78:	e023      	b.n	8003bc2 <_dtoa_r+0xda>
 8003b7a:	4b95      	ldr	r3, [pc, #596]	; (8003dd0 <_dtoa_r+0x2e8>)
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	9803      	ldr	r0, [sp, #12]
 8003b86:	b019      	add	sp, #100	; 0x64
 8003b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <_dtoa_r+0x2e4>)
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	3303      	adds	r3, #3
 8003b92:	e7f5      	b.n	8003b80 <_dtoa_r+0x98>
 8003b94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003b98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f7fc ff10 	bl	80009c8 <__aeabi_dcmpeq>
 8003ba8:	4680      	mov	r8, r0
 8003baa:	b160      	cbz	r0, 8003bc6 <_dtoa_r+0xde>
 8003bac:	2301      	movs	r3, #1
 8003bae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8562 	beq.w	800467e <_dtoa_r+0xb96>
 8003bba:	4b86      	ldr	r3, [pc, #536]	; (8003dd4 <_dtoa_r+0x2ec>)
 8003bbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	e7de      	b.n	8003b84 <_dtoa_r+0x9c>
 8003bc6:	ab16      	add	r3, sp, #88	; 0x58
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	ab17      	add	r3, sp, #92	; 0x5c
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4628      	mov	r0, r5
 8003bd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003bd4:	f001 f9ec 	bl	8004fb0 <__d2b>
 8003bd8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003bdc:	4682      	mov	sl, r0
 8003bde:	2c00      	cmp	r4, #0
 8003be0:	d07e      	beq.n	8003ce0 <_dtoa_r+0x1f8>
 8003be2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003be8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003bf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003bf8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4b75      	ldr	r3, [pc, #468]	; (8003dd8 <_dtoa_r+0x2f0>)
 8003c02:	f7fc fac1 	bl	8000188 <__aeabi_dsub>
 8003c06:	a368      	add	r3, pc, #416	; (adr r3, 8003da8 <_dtoa_r+0x2c0>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fc74 	bl	80004f8 <__aeabi_dmul>
 8003c10:	a367      	add	r3, pc, #412	; (adr r3, 8003db0 <_dtoa_r+0x2c8>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fab9 	bl	800018c <__adddf3>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	460f      	mov	r7, r1
 8003c20:	f7fc fc00 	bl	8000424 <__aeabi_i2d>
 8003c24:	a364      	add	r3, pc, #400	; (adr r3, 8003db8 <_dtoa_r+0x2d0>)
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f7fc fc65 	bl	80004f8 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4630      	mov	r0, r6
 8003c34:	4639      	mov	r1, r7
 8003c36:	f7fc faa9 	bl	800018c <__adddf3>
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460f      	mov	r7, r1
 8003c3e:	f7fc ff0b 	bl	8000a58 <__aeabi_d2iz>
 8003c42:	2200      	movs	r2, #0
 8003c44:	4683      	mov	fp, r0
 8003c46:	2300      	movs	r3, #0
 8003c48:	4630      	mov	r0, r6
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	f7fc fec6 	bl	80009dc <__aeabi_dcmplt>
 8003c50:	b148      	cbz	r0, 8003c66 <_dtoa_r+0x17e>
 8003c52:	4658      	mov	r0, fp
 8003c54:	f7fc fbe6 	bl	8000424 <__aeabi_i2d>
 8003c58:	4632      	mov	r2, r6
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	f7fc feb4 	bl	80009c8 <__aeabi_dcmpeq>
 8003c60:	b908      	cbnz	r0, 8003c66 <_dtoa_r+0x17e>
 8003c62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c66:	f1bb 0f16 	cmp.w	fp, #22
 8003c6a:	d857      	bhi.n	8003d1c <_dtoa_r+0x234>
 8003c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c70:	4b5a      	ldr	r3, [pc, #360]	; (8003ddc <_dtoa_r+0x2f4>)
 8003c72:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc feaf 	bl	80009dc <__aeabi_dcmplt>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d04e      	beq.n	8003d20 <_dtoa_r+0x238>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c8c:	1b1b      	subs	r3, r3, r4
 8003c8e:	1e5a      	subs	r2, r3, #1
 8003c90:	bf46      	itte	mi
 8003c92:	f1c3 0901 	rsbmi	r9, r3, #1
 8003c96:	2300      	movmi	r3, #0
 8003c98:	f04f 0900 	movpl.w	r9, #0
 8003c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c9e:	bf48      	it	mi
 8003ca0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003ca2:	f1bb 0f00 	cmp.w	fp, #0
 8003ca6:	db3d      	blt.n	8003d24 <_dtoa_r+0x23c>
 8003ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003caa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003cae:	445b      	add	r3, fp
 8003cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8003cb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	d867      	bhi.n	8003d8c <_dtoa_r+0x2a4>
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	bfc4      	itt	gt
 8003cc0:	3b04      	subgt	r3, #4
 8003cc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cc6:	bfc8      	it	gt
 8003cc8:	2400      	movgt	r4, #0
 8003cca:	f1a3 0302 	sub.w	r3, r3, #2
 8003cce:	bfd8      	it	le
 8003cd0:	2401      	movle	r4, #1
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	f200 8086 	bhi.w	8003de4 <_dtoa_r+0x2fc>
 8003cd8:	e8df f003 	tbb	[pc, r3]
 8003cdc:	5637392c 	.word	0x5637392c
 8003ce0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	bfc1      	itttt	gt
 8003cee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003cf2:	fa09 f903 	lslgt.w	r9, r9, r3
 8003cf6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003cfa:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003cfe:	bfd6      	itet	le
 8003d00:	f1c3 0320 	rsble	r3, r3, #32
 8003d04:	ea49 0003 	orrgt.w	r0, r9, r3
 8003d08:	fa06 f003 	lslle.w	r0, r6, r3
 8003d0c:	f7fc fb7a 	bl	8000404 <__aeabi_ui2d>
 8003d10:	2201      	movs	r2, #1
 8003d12:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003d16:	3c01      	subs	r4, #1
 8003d18:	9213      	str	r2, [sp, #76]	; 0x4c
 8003d1a:	e76f      	b.n	8003bfc <_dtoa_r+0x114>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e7b3      	b.n	8003c88 <_dtoa_r+0x1a0>
 8003d20:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d22:	e7b2      	b.n	8003c8a <_dtoa_r+0x1a2>
 8003d24:	f1cb 0300 	rsb	r3, fp, #0
 8003d28:	930a      	str	r3, [sp, #40]	; 0x28
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	eba9 090b 	sub.w	r9, r9, fp
 8003d30:	930e      	str	r3, [sp, #56]	; 0x38
 8003d32:	e7c0      	b.n	8003cb6 <_dtoa_r+0x1ce>
 8003d34:	2300      	movs	r3, #0
 8003d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	dc55      	bgt.n	8003dea <_dtoa_r+0x302>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	461a      	mov	r2, r3
 8003d42:	9306      	str	r3, [sp, #24]
 8003d44:	9308      	str	r3, [sp, #32]
 8003d46:	9223      	str	r2, [sp, #140]	; 0x8c
 8003d48:	e00b      	b.n	8003d62 <_dtoa_r+0x27a>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e7f3      	b.n	8003d36 <_dtoa_r+0x24e>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d54:	445b      	add	r3, fp
 8003d56:	9306      	str	r3, [sp, #24]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	9308      	str	r3, [sp, #32]
 8003d5e:	bfb8      	it	lt
 8003d60:	2301      	movlt	r3, #1
 8003d62:	2100      	movs	r1, #0
 8003d64:	2204      	movs	r2, #4
 8003d66:	69e8      	ldr	r0, [r5, #28]
 8003d68:	f102 0614 	add.w	r6, r2, #20
 8003d6c:	429e      	cmp	r6, r3
 8003d6e:	d940      	bls.n	8003df2 <_dtoa_r+0x30a>
 8003d70:	6041      	str	r1, [r0, #4]
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 fdfa 	bl	800496c <_Balloc>
 8003d78:	9003      	str	r0, [sp, #12]
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d13c      	bne.n	8003df8 <_dtoa_r+0x310>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f240 11af 	movw	r1, #431	; 0x1af
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <_dtoa_r+0x2f8>)
 8003d86:	e6c3      	b.n	8003b10 <_dtoa_r+0x28>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e7e1      	b.n	8003d50 <_dtoa_r+0x268>
 8003d8c:	2401      	movs	r4, #1
 8003d8e:	2300      	movs	r3, #0
 8003d90:	940b      	str	r4, [sp, #44]	; 0x2c
 8003d92:	9322      	str	r3, [sp, #136]	; 0x88
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d98:	2200      	movs	r2, #0
 8003d9a:	9306      	str	r3, [sp, #24]
 8003d9c:	9308      	str	r3, [sp, #32]
 8003d9e:	2312      	movs	r3, #18
 8003da0:	e7d1      	b.n	8003d46 <_dtoa_r+0x25e>
 8003da2:	bf00      	nop
 8003da4:	f3af 8000 	nop.w
 8003da8:	636f4361 	.word	0x636f4361
 8003dac:	3fd287a7 	.word	0x3fd287a7
 8003db0:	8b60c8b3 	.word	0x8b60c8b3
 8003db4:	3fc68a28 	.word	0x3fc68a28
 8003db8:	509f79fb 	.word	0x509f79fb
 8003dbc:	3fd34413 	.word	0x3fd34413
 8003dc0:	08007089 	.word	0x08007089
 8003dc4:	080070a0 	.word	0x080070a0
 8003dc8:	7ff00000 	.word	0x7ff00000
 8003dcc:	08007085 	.word	0x08007085
 8003dd0:	0800707c 	.word	0x0800707c
 8003dd4:	08007059 	.word	0x08007059
 8003dd8:	3ff80000 	.word	0x3ff80000
 8003ddc:	08007190 	.word	0x08007190
 8003de0:	080070f8 	.word	0x080070f8
 8003de4:	2301      	movs	r3, #1
 8003de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003de8:	e7d4      	b.n	8003d94 <_dtoa_r+0x2ac>
 8003dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003dec:	9306      	str	r3, [sp, #24]
 8003dee:	9308      	str	r3, [sp, #32]
 8003df0:	e7b7      	b.n	8003d62 <_dtoa_r+0x27a>
 8003df2:	3101      	adds	r1, #1
 8003df4:	0052      	lsls	r2, r2, #1
 8003df6:	e7b7      	b.n	8003d68 <_dtoa_r+0x280>
 8003df8:	69eb      	ldr	r3, [r5, #28]
 8003dfa:	9a03      	ldr	r2, [sp, #12]
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	9b08      	ldr	r3, [sp, #32]
 8003e00:	2b0e      	cmp	r3, #14
 8003e02:	f200 80a8 	bhi.w	8003f56 <_dtoa_r+0x46e>
 8003e06:	2c00      	cmp	r4, #0
 8003e08:	f000 80a5 	beq.w	8003f56 <_dtoa_r+0x46e>
 8003e0c:	f1bb 0f00 	cmp.w	fp, #0
 8003e10:	dd34      	ble.n	8003e7c <_dtoa_r+0x394>
 8003e12:	4b9a      	ldr	r3, [pc, #616]	; (800407c <_dtoa_r+0x594>)
 8003e14:	f00b 020f 	and.w	r2, fp, #15
 8003e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003e20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e28:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003e2c:	d016      	beq.n	8003e5c <_dtoa_r+0x374>
 8003e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e32:	4b93      	ldr	r3, [pc, #588]	; (8004080 <_dtoa_r+0x598>)
 8003e34:	2703      	movs	r7, #3
 8003e36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e3a:	f7fc fc87 	bl	800074c <__aeabi_ddiv>
 8003e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e42:	f004 040f 	and.w	r4, r4, #15
 8003e46:	4e8e      	ldr	r6, [pc, #568]	; (8004080 <_dtoa_r+0x598>)
 8003e48:	b954      	cbnz	r4, 8003e60 <_dtoa_r+0x378>
 8003e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e52:	f7fc fc7b 	bl	800074c <__aeabi_ddiv>
 8003e56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e5a:	e029      	b.n	8003eb0 <_dtoa_r+0x3c8>
 8003e5c:	2702      	movs	r7, #2
 8003e5e:	e7f2      	b.n	8003e46 <_dtoa_r+0x35e>
 8003e60:	07e1      	lsls	r1, r4, #31
 8003e62:	d508      	bpl.n	8003e76 <_dtoa_r+0x38e>
 8003e64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e6c:	f7fc fb44 	bl	80004f8 <__aeabi_dmul>
 8003e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e74:	3701      	adds	r7, #1
 8003e76:	1064      	asrs	r4, r4, #1
 8003e78:	3608      	adds	r6, #8
 8003e7a:	e7e5      	b.n	8003e48 <_dtoa_r+0x360>
 8003e7c:	f000 80a5 	beq.w	8003fca <_dtoa_r+0x4e2>
 8003e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e84:	f1cb 0400 	rsb	r4, fp, #0
 8003e88:	4b7c      	ldr	r3, [pc, #496]	; (800407c <_dtoa_r+0x594>)
 8003e8a:	f004 020f 	and.w	r2, r4, #15
 8003e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f7fc fb2f 	bl	80004f8 <__aeabi_dmul>
 8003e9a:	2702      	movs	r7, #2
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea2:	4e77      	ldr	r6, [pc, #476]	; (8004080 <_dtoa_r+0x598>)
 8003ea4:	1124      	asrs	r4, r4, #4
 8003ea6:	2c00      	cmp	r4, #0
 8003ea8:	f040 8084 	bne.w	8003fb4 <_dtoa_r+0x4cc>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1d2      	bne.n	8003e56 <_dtoa_r+0x36e>
 8003eb0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003eb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8087 	beq.w	8003fce <_dtoa_r+0x4e6>
 8003ec0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <_dtoa_r+0x59c>)
 8003ec8:	f7fc fd88 	bl	80009dc <__aeabi_dcmplt>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d07e      	beq.n	8003fce <_dtoa_r+0x4e6>
 8003ed0:	9b08      	ldr	r3, [sp, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d07b      	beq.n	8003fce <_dtoa_r+0x4e6>
 8003ed6:	9b06      	ldr	r3, [sp, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dd38      	ble.n	8003f4e <_dtoa_r+0x466>
 8003edc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4b69      	ldr	r3, [pc, #420]	; (8004088 <_dtoa_r+0x5a0>)
 8003ee4:	f7fc fb08 	bl	80004f8 <__aeabi_dmul>
 8003ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003eec:	9c06      	ldr	r4, [sp, #24]
 8003eee:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8003ef2:	3701      	adds	r7, #1
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f7fc fa95 	bl	8000424 <__aeabi_i2d>
 8003efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003efe:	f7fc fafb 	bl	80004f8 <__aeabi_dmul>
 8003f02:	2200      	movs	r2, #0
 8003f04:	4b61      	ldr	r3, [pc, #388]	; (800408c <_dtoa_r+0x5a4>)
 8003f06:	f7fc f941 	bl	800018c <__adddf3>
 8003f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003f0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f12:	9611      	str	r6, [sp, #68]	; 0x44
 8003f14:	2c00      	cmp	r4, #0
 8003f16:	d15d      	bne.n	8003fd4 <_dtoa_r+0x4ec>
 8003f18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <_dtoa_r+0x5a8>)
 8003f20:	f7fc f932 	bl	8000188 <__aeabi_dsub>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f2c:	4633      	mov	r3, r6
 8003f2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f30:	f7fc fd72 	bl	8000a18 <__aeabi_dcmpgt>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	f040 8295 	bne.w	8004464 <_dtoa_r+0x97c>
 8003f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003f44:	f7fc fd4a 	bl	80009dc <__aeabi_dcmplt>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f040 8289 	bne.w	8004460 <_dtoa_r+0x978>
 8003f4e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003f52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f2c0 8151 	blt.w	8004200 <_dtoa_r+0x718>
 8003f5e:	f1bb 0f0e 	cmp.w	fp, #14
 8003f62:	f300 814d 	bgt.w	8004200 <_dtoa_r+0x718>
 8003f66:	4b45      	ldr	r3, [pc, #276]	; (800407c <_dtoa_r+0x594>)
 8003f68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f70:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003f74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f280 80da 	bge.w	8004130 <_dtoa_r+0x648>
 8003f7c:	9b08      	ldr	r3, [sp, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f300 80d6 	bgt.w	8004130 <_dtoa_r+0x648>
 8003f84:	f040 826b 	bne.w	800445e <_dtoa_r+0x976>
 8003f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <_dtoa_r+0x5a8>)
 8003f90:	f7fc fab2 	bl	80004f8 <__aeabi_dmul>
 8003f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f98:	f7fc fd34 	bl	8000a04 <__aeabi_dcmpge>
 8003f9c:	9c08      	ldr	r4, [sp, #32]
 8003f9e:	4626      	mov	r6, r4
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	f040 8241 	bne.w	8004428 <_dtoa_r+0x940>
 8003fa6:	2331      	movs	r3, #49	; 0x31
 8003fa8:	9f03      	ldr	r7, [sp, #12]
 8003faa:	f10b 0b01 	add.w	fp, fp, #1
 8003fae:	f807 3b01 	strb.w	r3, [r7], #1
 8003fb2:	e23d      	b.n	8004430 <_dtoa_r+0x948>
 8003fb4:	07e2      	lsls	r2, r4, #31
 8003fb6:	d505      	bpl.n	8003fc4 <_dtoa_r+0x4dc>
 8003fb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003fbc:	f7fc fa9c 	bl	80004f8 <__aeabi_dmul>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	3701      	adds	r7, #1
 8003fc4:	1064      	asrs	r4, r4, #1
 8003fc6:	3608      	adds	r6, #8
 8003fc8:	e76d      	b.n	8003ea6 <_dtoa_r+0x3be>
 8003fca:	2702      	movs	r7, #2
 8003fcc:	e770      	b.n	8003eb0 <_dtoa_r+0x3c8>
 8003fce:	46d8      	mov	r8, fp
 8003fd0:	9c08      	ldr	r4, [sp, #32]
 8003fd2:	e78f      	b.n	8003ef4 <_dtoa_r+0x40c>
 8003fd4:	9903      	ldr	r1, [sp, #12]
 8003fd6:	4b29      	ldr	r3, [pc, #164]	; (800407c <_dtoa_r+0x594>)
 8003fd8:	4421      	add	r1, r4
 8003fda:	9112      	str	r1, [sp, #72]	; 0x48
 8003fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003fe2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003fe6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003fea:	2900      	cmp	r1, #0
 8003fec:	d054      	beq.n	8004098 <_dtoa_r+0x5b0>
 8003fee:	2000      	movs	r0, #0
 8003ff0:	4928      	ldr	r1, [pc, #160]	; (8004094 <_dtoa_r+0x5ac>)
 8003ff2:	f7fc fbab 	bl	800074c <__aeabi_ddiv>
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	f7fc f8c5 	bl	8000188 <__aeabi_dsub>
 8003ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004002:	9f03      	ldr	r7, [sp, #12]
 8004004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004008:	f7fc fd26 	bl	8000a58 <__aeabi_d2iz>
 800400c:	4604      	mov	r4, r0
 800400e:	f7fc fa09 	bl	8000424 <__aeabi_i2d>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800401a:	f7fc f8b5 	bl	8000188 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	3430      	adds	r4, #48	; 0x30
 8004024:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800402c:	f807 4b01 	strb.w	r4, [r7], #1
 8004030:	f7fc fcd4 	bl	80009dc <__aeabi_dcmplt>
 8004034:	2800      	cmp	r0, #0
 8004036:	d173      	bne.n	8004120 <_dtoa_r+0x638>
 8004038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800403c:	2000      	movs	r0, #0
 800403e:	4911      	ldr	r1, [pc, #68]	; (8004084 <_dtoa_r+0x59c>)
 8004040:	f7fc f8a2 	bl	8000188 <__aeabi_dsub>
 8004044:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004048:	f7fc fcc8 	bl	80009dc <__aeabi_dcmplt>
 800404c:	2800      	cmp	r0, #0
 800404e:	f040 80b6 	bne.w	80041be <_dtoa_r+0x6d6>
 8004052:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004054:	429f      	cmp	r7, r3
 8004056:	f43f af7a 	beq.w	8003f4e <_dtoa_r+0x466>
 800405a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800405e:	2200      	movs	r2, #0
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <_dtoa_r+0x5a0>)
 8004062:	f7fc fa49 	bl	80004f8 <__aeabi_dmul>
 8004066:	2200      	movs	r2, #0
 8004068:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800406c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <_dtoa_r+0x5a0>)
 8004072:	f7fc fa41 	bl	80004f8 <__aeabi_dmul>
 8004076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800407a:	e7c3      	b.n	8004004 <_dtoa_r+0x51c>
 800407c:	08007190 	.word	0x08007190
 8004080:	08007168 	.word	0x08007168
 8004084:	3ff00000 	.word	0x3ff00000
 8004088:	40240000 	.word	0x40240000
 800408c:	401c0000 	.word	0x401c0000
 8004090:	40140000 	.word	0x40140000
 8004094:	3fe00000 	.word	0x3fe00000
 8004098:	4630      	mov	r0, r6
 800409a:	4639      	mov	r1, r7
 800409c:	f7fc fa2c 	bl	80004f8 <__aeabi_dmul>
 80040a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040a6:	9c03      	ldr	r4, [sp, #12]
 80040a8:	9314      	str	r3, [sp, #80]	; 0x50
 80040aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ae:	f7fc fcd3 	bl	8000a58 <__aeabi_d2iz>
 80040b2:	9015      	str	r0, [sp, #84]	; 0x54
 80040b4:	f7fc f9b6 	bl	8000424 <__aeabi_i2d>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c0:	f7fc f862 	bl	8000188 <__aeabi_dsub>
 80040c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040c6:	4606      	mov	r6, r0
 80040c8:	3330      	adds	r3, #48	; 0x30
 80040ca:	f804 3b01 	strb.w	r3, [r4], #1
 80040ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040d0:	460f      	mov	r7, r1
 80040d2:	429c      	cmp	r4, r3
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	d124      	bne.n	8004124 <_dtoa_r+0x63c>
 80040da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040de:	4baf      	ldr	r3, [pc, #700]	; (800439c <_dtoa_r+0x8b4>)
 80040e0:	f7fc f854 	bl	800018c <__adddf3>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4630      	mov	r0, r6
 80040ea:	4639      	mov	r1, r7
 80040ec:	f7fc fc94 	bl	8000a18 <__aeabi_dcmpgt>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d163      	bne.n	80041bc <_dtoa_r+0x6d4>
 80040f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040f8:	2000      	movs	r0, #0
 80040fa:	49a8      	ldr	r1, [pc, #672]	; (800439c <_dtoa_r+0x8b4>)
 80040fc:	f7fc f844 	bl	8000188 <__aeabi_dsub>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4630      	mov	r0, r6
 8004106:	4639      	mov	r1, r7
 8004108:	f7fc fc68 	bl	80009dc <__aeabi_dcmplt>
 800410c:	2800      	cmp	r0, #0
 800410e:	f43f af1e 	beq.w	8003f4e <_dtoa_r+0x466>
 8004112:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004114:	1e7b      	subs	r3, r7, #1
 8004116:	9314      	str	r3, [sp, #80]	; 0x50
 8004118:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800411c:	2b30      	cmp	r3, #48	; 0x30
 800411e:	d0f8      	beq.n	8004112 <_dtoa_r+0x62a>
 8004120:	46c3      	mov	fp, r8
 8004122:	e03b      	b.n	800419c <_dtoa_r+0x6b4>
 8004124:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <_dtoa_r+0x8b8>)
 8004126:	f7fc f9e7 	bl	80004f8 <__aeabi_dmul>
 800412a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800412e:	e7bc      	b.n	80040aa <_dtoa_r+0x5c2>
 8004130:	9f03      	ldr	r7, [sp, #12]
 8004132:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800413a:	4640      	mov	r0, r8
 800413c:	4649      	mov	r1, r9
 800413e:	f7fc fb05 	bl	800074c <__aeabi_ddiv>
 8004142:	f7fc fc89 	bl	8000a58 <__aeabi_d2iz>
 8004146:	4604      	mov	r4, r0
 8004148:	f7fc f96c 	bl	8000424 <__aeabi_i2d>
 800414c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004150:	f7fc f9d2 	bl	80004f8 <__aeabi_dmul>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4640      	mov	r0, r8
 800415a:	4649      	mov	r1, r9
 800415c:	f7fc f814 	bl	8000188 <__aeabi_dsub>
 8004160:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004164:	f807 6b01 	strb.w	r6, [r7], #1
 8004168:	9e03      	ldr	r6, [sp, #12]
 800416a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800416e:	1bbe      	subs	r6, r7, r6
 8004170:	45b4      	cmp	ip, r6
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	d136      	bne.n	80041e6 <_dtoa_r+0x6fe>
 8004178:	f7fc f808 	bl	800018c <__adddf3>
 800417c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004180:	4680      	mov	r8, r0
 8004182:	4689      	mov	r9, r1
 8004184:	f7fc fc48 	bl	8000a18 <__aeabi_dcmpgt>
 8004188:	bb58      	cbnz	r0, 80041e2 <_dtoa_r+0x6fa>
 800418a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800418e:	4640      	mov	r0, r8
 8004190:	4649      	mov	r1, r9
 8004192:	f7fc fc19 	bl	80009c8 <__aeabi_dcmpeq>
 8004196:	b108      	cbz	r0, 800419c <_dtoa_r+0x6b4>
 8004198:	07e3      	lsls	r3, r4, #31
 800419a:	d422      	bmi.n	80041e2 <_dtoa_r+0x6fa>
 800419c:	4651      	mov	r1, sl
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 fc24 	bl	80049ec <_Bfree>
 80041a4:	2300      	movs	r3, #0
 80041a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80041a8:	703b      	strb	r3, [r7, #0]
 80041aa:	f10b 0301 	add.w	r3, fp, #1
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f43f ace6 	beq.w	8003b84 <_dtoa_r+0x9c>
 80041b8:	601f      	str	r7, [r3, #0]
 80041ba:	e4e3      	b.n	8003b84 <_dtoa_r+0x9c>
 80041bc:	4627      	mov	r7, r4
 80041be:	463b      	mov	r3, r7
 80041c0:	461f      	mov	r7, r3
 80041c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041c6:	2a39      	cmp	r2, #57	; 0x39
 80041c8:	d107      	bne.n	80041da <_dtoa_r+0x6f2>
 80041ca:	9a03      	ldr	r2, [sp, #12]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1f7      	bne.n	80041c0 <_dtoa_r+0x6d8>
 80041d0:	2230      	movs	r2, #48	; 0x30
 80041d2:	9903      	ldr	r1, [sp, #12]
 80041d4:	f108 0801 	add.w	r8, r8, #1
 80041d8:	700a      	strb	r2, [r1, #0]
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	3201      	adds	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e79e      	b.n	8004120 <_dtoa_r+0x638>
 80041e2:	46d8      	mov	r8, fp
 80041e4:	e7eb      	b.n	80041be <_dtoa_r+0x6d6>
 80041e6:	2200      	movs	r2, #0
 80041e8:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <_dtoa_r+0x8b8>)
 80041ea:	f7fc f985 	bl	80004f8 <__aeabi_dmul>
 80041ee:	2200      	movs	r2, #0
 80041f0:	2300      	movs	r3, #0
 80041f2:	4680      	mov	r8, r0
 80041f4:	4689      	mov	r9, r1
 80041f6:	f7fc fbe7 	bl	80009c8 <__aeabi_dcmpeq>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d09b      	beq.n	8004136 <_dtoa_r+0x64e>
 80041fe:	e7cd      	b.n	800419c <_dtoa_r+0x6b4>
 8004200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004202:	2a00      	cmp	r2, #0
 8004204:	f000 80c4 	beq.w	8004390 <_dtoa_r+0x8a8>
 8004208:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800420a:	2a01      	cmp	r2, #1
 800420c:	f300 80a8 	bgt.w	8004360 <_dtoa_r+0x878>
 8004210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004212:	2a00      	cmp	r2, #0
 8004214:	f000 80a0 	beq.w	8004358 <_dtoa_r+0x870>
 8004218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800421c:	464f      	mov	r7, r9
 800421e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004222:	2101      	movs	r1, #1
 8004224:	441a      	add	r2, r3
 8004226:	4628      	mov	r0, r5
 8004228:	4499      	add	r9, r3
 800422a:	9209      	str	r2, [sp, #36]	; 0x24
 800422c:	f000 fc94 	bl	8004b58 <__i2b>
 8004230:	4606      	mov	r6, r0
 8004232:	b15f      	cbz	r7, 800424c <_dtoa_r+0x764>
 8004234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	dd08      	ble.n	800424c <_dtoa_r+0x764>
 800423a:	42bb      	cmp	r3, r7
 800423c:	bfa8      	it	ge
 800423e:	463b      	movge	r3, r7
 8004240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004242:	eba9 0903 	sub.w	r9, r9, r3
 8004246:	1aff      	subs	r7, r7, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	9309      	str	r3, [sp, #36]	; 0x24
 800424c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800424e:	b1f3      	cbz	r3, 800428e <_dtoa_r+0x7a6>
 8004250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80a0 	beq.w	8004398 <_dtoa_r+0x8b0>
 8004258:	2c00      	cmp	r4, #0
 800425a:	dd10      	ble.n	800427e <_dtoa_r+0x796>
 800425c:	4631      	mov	r1, r6
 800425e:	4622      	mov	r2, r4
 8004260:	4628      	mov	r0, r5
 8004262:	f000 fd37 	bl	8004cd4 <__pow5mult>
 8004266:	4652      	mov	r2, sl
 8004268:	4601      	mov	r1, r0
 800426a:	4606      	mov	r6, r0
 800426c:	4628      	mov	r0, r5
 800426e:	f000 fc89 	bl	8004b84 <__multiply>
 8004272:	4680      	mov	r8, r0
 8004274:	4651      	mov	r1, sl
 8004276:	4628      	mov	r0, r5
 8004278:	f000 fbb8 	bl	80049ec <_Bfree>
 800427c:	46c2      	mov	sl, r8
 800427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004280:	1b1a      	subs	r2, r3, r4
 8004282:	d004      	beq.n	800428e <_dtoa_r+0x7a6>
 8004284:	4651      	mov	r1, sl
 8004286:	4628      	mov	r0, r5
 8004288:	f000 fd24 	bl	8004cd4 <__pow5mult>
 800428c:	4682      	mov	sl, r0
 800428e:	2101      	movs	r1, #1
 8004290:	4628      	mov	r0, r5
 8004292:	f000 fc61 	bl	8004b58 <__i2b>
 8004296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004298:	4604      	mov	r4, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f340 8082 	ble.w	80043a4 <_dtoa_r+0x8bc>
 80042a0:	461a      	mov	r2, r3
 80042a2:	4601      	mov	r1, r0
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 fd15 	bl	8004cd4 <__pow5mult>
 80042aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ac:	4604      	mov	r4, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	dd7b      	ble.n	80043aa <_dtoa_r+0x8c2>
 80042b2:	f04f 0800 	mov.w	r8, #0
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80042bc:	6918      	ldr	r0, [r3, #16]
 80042be:	f000 fbfd 	bl	8004abc <__hi0bits>
 80042c2:	f1c0 0020 	rsb	r0, r0, #32
 80042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c8:	4418      	add	r0, r3
 80042ca:	f010 001f 	ands.w	r0, r0, #31
 80042ce:	f000 8092 	beq.w	80043f6 <_dtoa_r+0x90e>
 80042d2:	f1c0 0320 	rsb	r3, r0, #32
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	f340 8085 	ble.w	80043e6 <_dtoa_r+0x8fe>
 80042dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042de:	f1c0 001c 	rsb	r0, r0, #28
 80042e2:	4403      	add	r3, r0
 80042e4:	4481      	add	r9, r0
 80042e6:	4407      	add	r7, r0
 80042e8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ea:	f1b9 0f00 	cmp.w	r9, #0
 80042ee:	dd05      	ble.n	80042fc <_dtoa_r+0x814>
 80042f0:	4651      	mov	r1, sl
 80042f2:	464a      	mov	r2, r9
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 fd47 	bl	8004d88 <__lshift>
 80042fa:	4682      	mov	sl, r0
 80042fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dd05      	ble.n	800430e <_dtoa_r+0x826>
 8004302:	4621      	mov	r1, r4
 8004304:	461a      	mov	r2, r3
 8004306:	4628      	mov	r0, r5
 8004308:	f000 fd3e 	bl	8004d88 <__lshift>
 800430c:	4604      	mov	r4, r0
 800430e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d072      	beq.n	80043fa <_dtoa_r+0x912>
 8004314:	4621      	mov	r1, r4
 8004316:	4650      	mov	r0, sl
 8004318:	f000 fda2 	bl	8004e60 <__mcmp>
 800431c:	2800      	cmp	r0, #0
 800431e:	da6c      	bge.n	80043fa <_dtoa_r+0x912>
 8004320:	2300      	movs	r3, #0
 8004322:	4651      	mov	r1, sl
 8004324:	220a      	movs	r2, #10
 8004326:	4628      	mov	r0, r5
 8004328:	f000 fb82 	bl	8004a30 <__multadd>
 800432c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800432e:	4682      	mov	sl, r0
 8004330:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 81ac 	beq.w	8004692 <_dtoa_r+0xbaa>
 800433a:	2300      	movs	r3, #0
 800433c:	4631      	mov	r1, r6
 800433e:	220a      	movs	r2, #10
 8004340:	4628      	mov	r0, r5
 8004342:	f000 fb75 	bl	8004a30 <__multadd>
 8004346:	9b06      	ldr	r3, [sp, #24]
 8004348:	4606      	mov	r6, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	f300 8093 	bgt.w	8004476 <_dtoa_r+0x98e>
 8004350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004352:	2b02      	cmp	r3, #2
 8004354:	dc59      	bgt.n	800440a <_dtoa_r+0x922>
 8004356:	e08e      	b.n	8004476 <_dtoa_r+0x98e>
 8004358:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800435a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800435e:	e75d      	b.n	800421c <_dtoa_r+0x734>
 8004360:	9b08      	ldr	r3, [sp, #32]
 8004362:	1e5c      	subs	r4, r3, #1
 8004364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004366:	42a3      	cmp	r3, r4
 8004368:	bfbf      	itttt	lt
 800436a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800436c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800436e:	1ae3      	sublt	r3, r4, r3
 8004370:	18d2      	addlt	r2, r2, r3
 8004372:	bfa8      	it	ge
 8004374:	1b1c      	subge	r4, r3, r4
 8004376:	9b08      	ldr	r3, [sp, #32]
 8004378:	bfbe      	ittt	lt
 800437a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800437c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800437e:	2400      	movlt	r4, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfb5      	itete	lt
 8004384:	eba9 0703 	sublt.w	r7, r9, r3
 8004388:	464f      	movge	r7, r9
 800438a:	2300      	movlt	r3, #0
 800438c:	9b08      	ldrge	r3, [sp, #32]
 800438e:	e747      	b.n	8004220 <_dtoa_r+0x738>
 8004390:	464f      	mov	r7, r9
 8004392:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004394:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004396:	e74c      	b.n	8004232 <_dtoa_r+0x74a>
 8004398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800439a:	e773      	b.n	8004284 <_dtoa_r+0x79c>
 800439c:	3fe00000 	.word	0x3fe00000
 80043a0:	40240000 	.word	0x40240000
 80043a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	dc18      	bgt.n	80043dc <_dtoa_r+0x8f4>
 80043aa:	9b04      	ldr	r3, [sp, #16]
 80043ac:	b9b3      	cbnz	r3, 80043dc <_dtoa_r+0x8f4>
 80043ae:	9b05      	ldr	r3, [sp, #20]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	b993      	cbnz	r3, 80043dc <_dtoa_r+0x8f4>
 80043b6:	9b05      	ldr	r3, [sp, #20]
 80043b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	0d1b      	lsrs	r3, r3, #20
 80043be:	051b      	lsls	r3, r3, #20
 80043c0:	b17b      	cbz	r3, 80043e2 <_dtoa_r+0x8fa>
 80043c2:	f04f 0801 	mov.w	r8, #1
 80043c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c8:	f109 0901 	add.w	r9, r9, #1
 80043cc:	3301      	adds	r3, #1
 80043ce:	9309      	str	r3, [sp, #36]	; 0x24
 80043d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af6f 	bne.w	80042b6 <_dtoa_r+0x7ce>
 80043d8:	2001      	movs	r0, #1
 80043da:	e774      	b.n	80042c6 <_dtoa_r+0x7de>
 80043dc:	f04f 0800 	mov.w	r8, #0
 80043e0:	e7f6      	b.n	80043d0 <_dtoa_r+0x8e8>
 80043e2:	4698      	mov	r8, r3
 80043e4:	e7f4      	b.n	80043d0 <_dtoa_r+0x8e8>
 80043e6:	d080      	beq.n	80042ea <_dtoa_r+0x802>
 80043e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ea:	331c      	adds	r3, #28
 80043ec:	441a      	add	r2, r3
 80043ee:	4499      	add	r9, r3
 80043f0:	441f      	add	r7, r3
 80043f2:	9209      	str	r2, [sp, #36]	; 0x24
 80043f4:	e779      	b.n	80042ea <_dtoa_r+0x802>
 80043f6:	4603      	mov	r3, r0
 80043f8:	e7f6      	b.n	80043e8 <_dtoa_r+0x900>
 80043fa:	9b08      	ldr	r3, [sp, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dc34      	bgt.n	800446a <_dtoa_r+0x982>
 8004400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004402:	2b02      	cmp	r3, #2
 8004404:	dd31      	ble.n	800446a <_dtoa_r+0x982>
 8004406:	9b08      	ldr	r3, [sp, #32]
 8004408:	9306      	str	r3, [sp, #24]
 800440a:	9b06      	ldr	r3, [sp, #24]
 800440c:	b963      	cbnz	r3, 8004428 <_dtoa_r+0x940>
 800440e:	4621      	mov	r1, r4
 8004410:	2205      	movs	r2, #5
 8004412:	4628      	mov	r0, r5
 8004414:	f000 fb0c 	bl	8004a30 <__multadd>
 8004418:	4601      	mov	r1, r0
 800441a:	4604      	mov	r4, r0
 800441c:	4650      	mov	r0, sl
 800441e:	f000 fd1f 	bl	8004e60 <__mcmp>
 8004422:	2800      	cmp	r0, #0
 8004424:	f73f adbf 	bgt.w	8003fa6 <_dtoa_r+0x4be>
 8004428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800442a:	9f03      	ldr	r7, [sp, #12]
 800442c:	ea6f 0b03 	mvn.w	fp, r3
 8004430:	f04f 0800 	mov.w	r8, #0
 8004434:	4621      	mov	r1, r4
 8004436:	4628      	mov	r0, r5
 8004438:	f000 fad8 	bl	80049ec <_Bfree>
 800443c:	2e00      	cmp	r6, #0
 800443e:	f43f aead 	beq.w	800419c <_dtoa_r+0x6b4>
 8004442:	f1b8 0f00 	cmp.w	r8, #0
 8004446:	d005      	beq.n	8004454 <_dtoa_r+0x96c>
 8004448:	45b0      	cmp	r8, r6
 800444a:	d003      	beq.n	8004454 <_dtoa_r+0x96c>
 800444c:	4641      	mov	r1, r8
 800444e:	4628      	mov	r0, r5
 8004450:	f000 facc 	bl	80049ec <_Bfree>
 8004454:	4631      	mov	r1, r6
 8004456:	4628      	mov	r0, r5
 8004458:	f000 fac8 	bl	80049ec <_Bfree>
 800445c:	e69e      	b.n	800419c <_dtoa_r+0x6b4>
 800445e:	2400      	movs	r4, #0
 8004460:	4626      	mov	r6, r4
 8004462:	e7e1      	b.n	8004428 <_dtoa_r+0x940>
 8004464:	46c3      	mov	fp, r8
 8004466:	4626      	mov	r6, r4
 8004468:	e59d      	b.n	8003fa6 <_dtoa_r+0x4be>
 800446a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80c8 	beq.w	8004602 <_dtoa_r+0xb1a>
 8004472:	9b08      	ldr	r3, [sp, #32]
 8004474:	9306      	str	r3, [sp, #24]
 8004476:	2f00      	cmp	r7, #0
 8004478:	dd05      	ble.n	8004486 <_dtoa_r+0x99e>
 800447a:	4631      	mov	r1, r6
 800447c:	463a      	mov	r2, r7
 800447e:	4628      	mov	r0, r5
 8004480:	f000 fc82 	bl	8004d88 <__lshift>
 8004484:	4606      	mov	r6, r0
 8004486:	f1b8 0f00 	cmp.w	r8, #0
 800448a:	d05b      	beq.n	8004544 <_dtoa_r+0xa5c>
 800448c:	4628      	mov	r0, r5
 800448e:	6871      	ldr	r1, [r6, #4]
 8004490:	f000 fa6c 	bl	800496c <_Balloc>
 8004494:	4607      	mov	r7, r0
 8004496:	b928      	cbnz	r0, 80044a4 <_dtoa_r+0x9bc>
 8004498:	4602      	mov	r2, r0
 800449a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800449e:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <_dtoa_r+0xbbc>)
 80044a0:	f7ff bb36 	b.w	8003b10 <_dtoa_r+0x28>
 80044a4:	6932      	ldr	r2, [r6, #16]
 80044a6:	f106 010c 	add.w	r1, r6, #12
 80044aa:	3202      	adds	r2, #2
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	300c      	adds	r0, #12
 80044b0:	f000 fe6e 	bl	8005190 <memcpy>
 80044b4:	2201      	movs	r2, #1
 80044b6:	4639      	mov	r1, r7
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 fc65 	bl	8004d88 <__lshift>
 80044be:	46b0      	mov	r8, r6
 80044c0:	4606      	mov	r6, r0
 80044c2:	9b03      	ldr	r3, [sp, #12]
 80044c4:	9a03      	ldr	r2, [sp, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	9308      	str	r3, [sp, #32]
 80044ca:	9b06      	ldr	r3, [sp, #24]
 80044cc:	4413      	add	r3, r2
 80044ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80044d0:	9b04      	ldr	r3, [sp, #16]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	930a      	str	r3, [sp, #40]	; 0x28
 80044d8:	9b08      	ldr	r3, [sp, #32]
 80044da:	4621      	mov	r1, r4
 80044dc:	3b01      	subs	r3, #1
 80044de:	4650      	mov	r0, sl
 80044e0:	9304      	str	r3, [sp, #16]
 80044e2:	f7ff fa75 	bl	80039d0 <quorem>
 80044e6:	4641      	mov	r1, r8
 80044e8:	9006      	str	r0, [sp, #24]
 80044ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80044ee:	4650      	mov	r0, sl
 80044f0:	f000 fcb6 	bl	8004e60 <__mcmp>
 80044f4:	4632      	mov	r2, r6
 80044f6:	9009      	str	r0, [sp, #36]	; 0x24
 80044f8:	4621      	mov	r1, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 fccc 	bl	8004e98 <__mdiff>
 8004500:	68c2      	ldr	r2, [r0, #12]
 8004502:	4607      	mov	r7, r0
 8004504:	bb02      	cbnz	r2, 8004548 <_dtoa_r+0xa60>
 8004506:	4601      	mov	r1, r0
 8004508:	4650      	mov	r0, sl
 800450a:	f000 fca9 	bl	8004e60 <__mcmp>
 800450e:	4602      	mov	r2, r0
 8004510:	4639      	mov	r1, r7
 8004512:	4628      	mov	r0, r5
 8004514:	920c      	str	r2, [sp, #48]	; 0x30
 8004516:	f000 fa69 	bl	80049ec <_Bfree>
 800451a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800451c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800451e:	9f08      	ldr	r7, [sp, #32]
 8004520:	ea43 0102 	orr.w	r1, r3, r2
 8004524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004526:	4319      	orrs	r1, r3
 8004528:	d110      	bne.n	800454c <_dtoa_r+0xa64>
 800452a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800452e:	d029      	beq.n	8004584 <_dtoa_r+0xa9c>
 8004530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	dd02      	ble.n	800453c <_dtoa_r+0xa54>
 8004536:	9b06      	ldr	r3, [sp, #24]
 8004538:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	f883 9000 	strb.w	r9, [r3]
 8004542:	e777      	b.n	8004434 <_dtoa_r+0x94c>
 8004544:	4630      	mov	r0, r6
 8004546:	e7ba      	b.n	80044be <_dtoa_r+0x9d6>
 8004548:	2201      	movs	r2, #1
 800454a:	e7e1      	b.n	8004510 <_dtoa_r+0xa28>
 800454c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	db04      	blt.n	800455c <_dtoa_r+0xa74>
 8004552:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004554:	430b      	orrs	r3, r1
 8004556:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004558:	430b      	orrs	r3, r1
 800455a:	d120      	bne.n	800459e <_dtoa_r+0xab6>
 800455c:	2a00      	cmp	r2, #0
 800455e:	dded      	ble.n	800453c <_dtoa_r+0xa54>
 8004560:	4651      	mov	r1, sl
 8004562:	2201      	movs	r2, #1
 8004564:	4628      	mov	r0, r5
 8004566:	f000 fc0f 	bl	8004d88 <__lshift>
 800456a:	4621      	mov	r1, r4
 800456c:	4682      	mov	sl, r0
 800456e:	f000 fc77 	bl	8004e60 <__mcmp>
 8004572:	2800      	cmp	r0, #0
 8004574:	dc03      	bgt.n	800457e <_dtoa_r+0xa96>
 8004576:	d1e1      	bne.n	800453c <_dtoa_r+0xa54>
 8004578:	f019 0f01 	tst.w	r9, #1
 800457c:	d0de      	beq.n	800453c <_dtoa_r+0xa54>
 800457e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004582:	d1d8      	bne.n	8004536 <_dtoa_r+0xa4e>
 8004584:	2339      	movs	r3, #57	; 0x39
 8004586:	9a04      	ldr	r2, [sp, #16]
 8004588:	7013      	strb	r3, [r2, #0]
 800458a:	463b      	mov	r3, r7
 800458c:	461f      	mov	r7, r3
 800458e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004592:	3b01      	subs	r3, #1
 8004594:	2a39      	cmp	r2, #57	; 0x39
 8004596:	d06b      	beq.n	8004670 <_dtoa_r+0xb88>
 8004598:	3201      	adds	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e74a      	b.n	8004434 <_dtoa_r+0x94c>
 800459e:	2a00      	cmp	r2, #0
 80045a0:	dd07      	ble.n	80045b2 <_dtoa_r+0xaca>
 80045a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045a6:	d0ed      	beq.n	8004584 <_dtoa_r+0xa9c>
 80045a8:	9a04      	ldr	r2, [sp, #16]
 80045aa:	f109 0301 	add.w	r3, r9, #1
 80045ae:	7013      	strb	r3, [r2, #0]
 80045b0:	e740      	b.n	8004434 <_dtoa_r+0x94c>
 80045b2:	9b08      	ldr	r3, [sp, #32]
 80045b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045b6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d042      	beq.n	8004644 <_dtoa_r+0xb5c>
 80045be:	4651      	mov	r1, sl
 80045c0:	2300      	movs	r3, #0
 80045c2:	220a      	movs	r2, #10
 80045c4:	4628      	mov	r0, r5
 80045c6:	f000 fa33 	bl	8004a30 <__multadd>
 80045ca:	45b0      	cmp	r8, r6
 80045cc:	4682      	mov	sl, r0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	f04f 020a 	mov.w	r2, #10
 80045d6:	4641      	mov	r1, r8
 80045d8:	4628      	mov	r0, r5
 80045da:	d107      	bne.n	80045ec <_dtoa_r+0xb04>
 80045dc:	f000 fa28 	bl	8004a30 <__multadd>
 80045e0:	4680      	mov	r8, r0
 80045e2:	4606      	mov	r6, r0
 80045e4:	9b08      	ldr	r3, [sp, #32]
 80045e6:	3301      	adds	r3, #1
 80045e8:	9308      	str	r3, [sp, #32]
 80045ea:	e775      	b.n	80044d8 <_dtoa_r+0x9f0>
 80045ec:	f000 fa20 	bl	8004a30 <__multadd>
 80045f0:	4631      	mov	r1, r6
 80045f2:	4680      	mov	r8, r0
 80045f4:	2300      	movs	r3, #0
 80045f6:	220a      	movs	r2, #10
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 fa19 	bl	8004a30 <__multadd>
 80045fe:	4606      	mov	r6, r0
 8004600:	e7f0      	b.n	80045e4 <_dtoa_r+0xafc>
 8004602:	9b08      	ldr	r3, [sp, #32]
 8004604:	9306      	str	r3, [sp, #24]
 8004606:	9f03      	ldr	r7, [sp, #12]
 8004608:	4621      	mov	r1, r4
 800460a:	4650      	mov	r0, sl
 800460c:	f7ff f9e0 	bl	80039d0 <quorem>
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004616:	f807 9b01 	strb.w	r9, [r7], #1
 800461a:	1afa      	subs	r2, r7, r3
 800461c:	9b06      	ldr	r3, [sp, #24]
 800461e:	4293      	cmp	r3, r2
 8004620:	dd07      	ble.n	8004632 <_dtoa_r+0xb4a>
 8004622:	4651      	mov	r1, sl
 8004624:	2300      	movs	r3, #0
 8004626:	220a      	movs	r2, #10
 8004628:	4628      	mov	r0, r5
 800462a:	f000 fa01 	bl	8004a30 <__multadd>
 800462e:	4682      	mov	sl, r0
 8004630:	e7ea      	b.n	8004608 <_dtoa_r+0xb20>
 8004632:	9b06      	ldr	r3, [sp, #24]
 8004634:	f04f 0800 	mov.w	r8, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	bfcc      	ite	gt
 800463c:	461f      	movgt	r7, r3
 800463e:	2701      	movle	r7, #1
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	441f      	add	r7, r3
 8004644:	4651      	mov	r1, sl
 8004646:	2201      	movs	r2, #1
 8004648:	4628      	mov	r0, r5
 800464a:	f000 fb9d 	bl	8004d88 <__lshift>
 800464e:	4621      	mov	r1, r4
 8004650:	4682      	mov	sl, r0
 8004652:	f000 fc05 	bl	8004e60 <__mcmp>
 8004656:	2800      	cmp	r0, #0
 8004658:	dc97      	bgt.n	800458a <_dtoa_r+0xaa2>
 800465a:	d102      	bne.n	8004662 <_dtoa_r+0xb7a>
 800465c:	f019 0f01 	tst.w	r9, #1
 8004660:	d193      	bne.n	800458a <_dtoa_r+0xaa2>
 8004662:	463b      	mov	r3, r7
 8004664:	461f      	mov	r7, r3
 8004666:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800466a:	2a30      	cmp	r2, #48	; 0x30
 800466c:	d0fa      	beq.n	8004664 <_dtoa_r+0xb7c>
 800466e:	e6e1      	b.n	8004434 <_dtoa_r+0x94c>
 8004670:	9a03      	ldr	r2, [sp, #12]
 8004672:	429a      	cmp	r2, r3
 8004674:	d18a      	bne.n	800458c <_dtoa_r+0xaa4>
 8004676:	2331      	movs	r3, #49	; 0x31
 8004678:	f10b 0b01 	add.w	fp, fp, #1
 800467c:	e797      	b.n	80045ae <_dtoa_r+0xac6>
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <_dtoa_r+0xbc0>)
 8004680:	f7ff ba9f 	b.w	8003bc2 <_dtoa_r+0xda>
 8004684:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004686:	2b00      	cmp	r3, #0
 8004688:	f47f aa77 	bne.w	8003b7a <_dtoa_r+0x92>
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <_dtoa_r+0xbc4>)
 800468e:	f7ff ba98 	b.w	8003bc2 <_dtoa_r+0xda>
 8004692:	9b06      	ldr	r3, [sp, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	dcb6      	bgt.n	8004606 <_dtoa_r+0xb1e>
 8004698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800469a:	2b02      	cmp	r3, #2
 800469c:	f73f aeb5 	bgt.w	800440a <_dtoa_r+0x922>
 80046a0:	e7b1      	b.n	8004606 <_dtoa_r+0xb1e>
 80046a2:	bf00      	nop
 80046a4:	080070f8 	.word	0x080070f8
 80046a8:	08007058 	.word	0x08007058
 80046ac:	0800707c 	.word	0x0800707c

080046b0 <malloc>:
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <malloc+0xc>)
 80046b2:	4601      	mov	r1, r0
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f000 b823 	b.w	8004700 <_malloc_r>
 80046ba:	bf00      	nop
 80046bc:	20000060 	.word	0x20000060

080046c0 <sbrk_aligned>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4e0e      	ldr	r6, [pc, #56]	; (80046fc <sbrk_aligned+0x3c>)
 80046c4:	460c      	mov	r4, r1
 80046c6:	6831      	ldr	r1, [r6, #0]
 80046c8:	4605      	mov	r5, r0
 80046ca:	b911      	cbnz	r1, 80046d2 <sbrk_aligned+0x12>
 80046cc:	f000 fd3e 	bl	800514c <_sbrk_r>
 80046d0:	6030      	str	r0, [r6, #0]
 80046d2:	4621      	mov	r1, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 fd39 	bl	800514c <_sbrk_r>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	d00a      	beq.n	80046f4 <sbrk_aligned+0x34>
 80046de:	1cc4      	adds	r4, r0, #3
 80046e0:	f024 0403 	bic.w	r4, r4, #3
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d007      	beq.n	80046f8 <sbrk_aligned+0x38>
 80046e8:	1a21      	subs	r1, r4, r0
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 fd2e 	bl	800514c <_sbrk_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d101      	bne.n	80046f8 <sbrk_aligned+0x38>
 80046f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046f8:	4620      	mov	r0, r4
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	200003ec 	.word	0x200003ec

08004700 <_malloc_r>:
 8004700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004704:	1ccd      	adds	r5, r1, #3
 8004706:	f025 0503 	bic.w	r5, r5, #3
 800470a:	3508      	adds	r5, #8
 800470c:	2d0c      	cmp	r5, #12
 800470e:	bf38      	it	cc
 8004710:	250c      	movcc	r5, #12
 8004712:	2d00      	cmp	r5, #0
 8004714:	4607      	mov	r7, r0
 8004716:	db01      	blt.n	800471c <_malloc_r+0x1c>
 8004718:	42a9      	cmp	r1, r5
 800471a:	d905      	bls.n	8004728 <_malloc_r+0x28>
 800471c:	230c      	movs	r3, #12
 800471e:	2600      	movs	r6, #0
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4630      	mov	r0, r6
 8004724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004728:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047fc <_malloc_r+0xfc>
 800472c:	f000 f912 	bl	8004954 <__malloc_lock>
 8004730:	f8d8 3000 	ldr.w	r3, [r8]
 8004734:	461c      	mov	r4, r3
 8004736:	bb5c      	cbnz	r4, 8004790 <_malloc_r+0x90>
 8004738:	4629      	mov	r1, r5
 800473a:	4638      	mov	r0, r7
 800473c:	f7ff ffc0 	bl	80046c0 <sbrk_aligned>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	4604      	mov	r4, r0
 8004744:	d155      	bne.n	80047f2 <_malloc_r+0xf2>
 8004746:	f8d8 4000 	ldr.w	r4, [r8]
 800474a:	4626      	mov	r6, r4
 800474c:	2e00      	cmp	r6, #0
 800474e:	d145      	bne.n	80047dc <_malloc_r+0xdc>
 8004750:	2c00      	cmp	r4, #0
 8004752:	d048      	beq.n	80047e6 <_malloc_r+0xe6>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	4631      	mov	r1, r6
 8004758:	4638      	mov	r0, r7
 800475a:	eb04 0903 	add.w	r9, r4, r3
 800475e:	f000 fcf5 	bl	800514c <_sbrk_r>
 8004762:	4581      	cmp	r9, r0
 8004764:	d13f      	bne.n	80047e6 <_malloc_r+0xe6>
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	4638      	mov	r0, r7
 800476a:	1a6d      	subs	r5, r5, r1
 800476c:	4629      	mov	r1, r5
 800476e:	f7ff ffa7 	bl	80046c0 <sbrk_aligned>
 8004772:	3001      	adds	r0, #1
 8004774:	d037      	beq.n	80047e6 <_malloc_r+0xe6>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	442b      	add	r3, r5
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	f8d8 3000 	ldr.w	r3, [r8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d038      	beq.n	80047f6 <_malloc_r+0xf6>
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	42a2      	cmp	r2, r4
 8004788:	d12b      	bne.n	80047e2 <_malloc_r+0xe2>
 800478a:	2200      	movs	r2, #0
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e00f      	b.n	80047b0 <_malloc_r+0xb0>
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	1b52      	subs	r2, r2, r5
 8004794:	d41f      	bmi.n	80047d6 <_malloc_r+0xd6>
 8004796:	2a0b      	cmp	r2, #11
 8004798:	d917      	bls.n	80047ca <_malloc_r+0xca>
 800479a:	1961      	adds	r1, r4, r5
 800479c:	42a3      	cmp	r3, r4
 800479e:	6025      	str	r5, [r4, #0]
 80047a0:	bf18      	it	ne
 80047a2:	6059      	strne	r1, [r3, #4]
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	bf08      	it	eq
 80047a8:	f8c8 1000 	streq.w	r1, [r8]
 80047ac:	5162      	str	r2, [r4, r5]
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	4638      	mov	r0, r7
 80047b2:	f104 060b 	add.w	r6, r4, #11
 80047b6:	f000 f8d3 	bl	8004960 <__malloc_unlock>
 80047ba:	f026 0607 	bic.w	r6, r6, #7
 80047be:	1d23      	adds	r3, r4, #4
 80047c0:	1af2      	subs	r2, r6, r3
 80047c2:	d0ae      	beq.n	8004722 <_malloc_r+0x22>
 80047c4:	1b9b      	subs	r3, r3, r6
 80047c6:	50a3      	str	r3, [r4, r2]
 80047c8:	e7ab      	b.n	8004722 <_malloc_r+0x22>
 80047ca:	42a3      	cmp	r3, r4
 80047cc:	6862      	ldr	r2, [r4, #4]
 80047ce:	d1dd      	bne.n	800478c <_malloc_r+0x8c>
 80047d0:	f8c8 2000 	str.w	r2, [r8]
 80047d4:	e7ec      	b.n	80047b0 <_malloc_r+0xb0>
 80047d6:	4623      	mov	r3, r4
 80047d8:	6864      	ldr	r4, [r4, #4]
 80047da:	e7ac      	b.n	8004736 <_malloc_r+0x36>
 80047dc:	4634      	mov	r4, r6
 80047de:	6876      	ldr	r6, [r6, #4]
 80047e0:	e7b4      	b.n	800474c <_malloc_r+0x4c>
 80047e2:	4613      	mov	r3, r2
 80047e4:	e7cc      	b.n	8004780 <_malloc_r+0x80>
 80047e6:	230c      	movs	r3, #12
 80047e8:	4638      	mov	r0, r7
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	f000 f8b8 	bl	8004960 <__malloc_unlock>
 80047f0:	e797      	b.n	8004722 <_malloc_r+0x22>
 80047f2:	6025      	str	r5, [r4, #0]
 80047f4:	e7dc      	b.n	80047b0 <_malloc_r+0xb0>
 80047f6:	605b      	str	r3, [r3, #4]
 80047f8:	deff      	udf	#255	; 0xff
 80047fa:	bf00      	nop
 80047fc:	200003e8 	.word	0x200003e8

08004800 <__sflush_r>:
 8004800:	898a      	ldrh	r2, [r1, #12]
 8004802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004804:	4605      	mov	r5, r0
 8004806:	0710      	lsls	r0, r2, #28
 8004808:	460c      	mov	r4, r1
 800480a:	d457      	bmi.n	80048bc <__sflush_r+0xbc>
 800480c:	684b      	ldr	r3, [r1, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	dc04      	bgt.n	800481c <__sflush_r+0x1c>
 8004812:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	dc01      	bgt.n	800481c <__sflush_r+0x1c>
 8004818:	2000      	movs	r0, #0
 800481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800481c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481e:	2e00      	cmp	r6, #0
 8004820:	d0fa      	beq.n	8004818 <__sflush_r+0x18>
 8004822:	2300      	movs	r3, #0
 8004824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004828:	682f      	ldr	r7, [r5, #0]
 800482a:	6a21      	ldr	r1, [r4, #32]
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	d032      	beq.n	8004896 <__sflush_r+0x96>
 8004830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	075a      	lsls	r2, r3, #29
 8004836:	d505      	bpl.n	8004844 <__sflush_r+0x44>
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	1ac0      	subs	r0, r0, r3
 800483c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800483e:	b10b      	cbz	r3, 8004844 <__sflush_r+0x44>
 8004840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004842:	1ac0      	subs	r0, r0, r3
 8004844:	2300      	movs	r3, #0
 8004846:	4602      	mov	r2, r0
 8004848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800484a:	4628      	mov	r0, r5
 800484c:	6a21      	ldr	r1, [r4, #32]
 800484e:	47b0      	blx	r6
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	d106      	bne.n	8004864 <__sflush_r+0x64>
 8004856:	6829      	ldr	r1, [r5, #0]
 8004858:	291d      	cmp	r1, #29
 800485a:	d82b      	bhi.n	80048b4 <__sflush_r+0xb4>
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <__sflush_r+0x100>)
 800485e:	410a      	asrs	r2, r1
 8004860:	07d6      	lsls	r6, r2, #31
 8004862:	d427      	bmi.n	80048b4 <__sflush_r+0xb4>
 8004864:	2200      	movs	r2, #0
 8004866:	6062      	str	r2, [r4, #4]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	04d9      	lsls	r1, r3, #19
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	d504      	bpl.n	800487a <__sflush_r+0x7a>
 8004870:	1c42      	adds	r2, r0, #1
 8004872:	d101      	bne.n	8004878 <__sflush_r+0x78>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b903      	cbnz	r3, 800487a <__sflush_r+0x7a>
 8004878:	6560      	str	r0, [r4, #84]	; 0x54
 800487a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800487c:	602f      	str	r7, [r5, #0]
 800487e:	2900      	cmp	r1, #0
 8004880:	d0ca      	beq.n	8004818 <__sflush_r+0x18>
 8004882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004886:	4299      	cmp	r1, r3
 8004888:	d002      	beq.n	8004890 <__sflush_r+0x90>
 800488a:	4628      	mov	r0, r5
 800488c:	f000 fcc0 	bl	8005210 <_free_r>
 8004890:	2000      	movs	r0, #0
 8004892:	6360      	str	r0, [r4, #52]	; 0x34
 8004894:	e7c1      	b.n	800481a <__sflush_r+0x1a>
 8004896:	2301      	movs	r3, #1
 8004898:	4628      	mov	r0, r5
 800489a:	47b0      	blx	r6
 800489c:	1c41      	adds	r1, r0, #1
 800489e:	d1c8      	bne.n	8004832 <__sflush_r+0x32>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0c5      	beq.n	8004832 <__sflush_r+0x32>
 80048a6:	2b1d      	cmp	r3, #29
 80048a8:	d001      	beq.n	80048ae <__sflush_r+0xae>
 80048aa:	2b16      	cmp	r3, #22
 80048ac:	d101      	bne.n	80048b2 <__sflush_r+0xb2>
 80048ae:	602f      	str	r7, [r5, #0]
 80048b0:	e7b2      	b.n	8004818 <__sflush_r+0x18>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	e7ae      	b.n	800481a <__sflush_r+0x1a>
 80048bc:	690f      	ldr	r7, [r1, #16]
 80048be:	2f00      	cmp	r7, #0
 80048c0:	d0aa      	beq.n	8004818 <__sflush_r+0x18>
 80048c2:	0793      	lsls	r3, r2, #30
 80048c4:	bf18      	it	ne
 80048c6:	2300      	movne	r3, #0
 80048c8:	680e      	ldr	r6, [r1, #0]
 80048ca:	bf08      	it	eq
 80048cc:	694b      	ldreq	r3, [r1, #20]
 80048ce:	1bf6      	subs	r6, r6, r7
 80048d0:	600f      	str	r7, [r1, #0]
 80048d2:	608b      	str	r3, [r1, #8]
 80048d4:	2e00      	cmp	r6, #0
 80048d6:	dd9f      	ble.n	8004818 <__sflush_r+0x18>
 80048d8:	4633      	mov	r3, r6
 80048da:	463a      	mov	r2, r7
 80048dc:	4628      	mov	r0, r5
 80048de:	6a21      	ldr	r1, [r4, #32]
 80048e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80048e4:	47e0      	blx	ip
 80048e6:	2800      	cmp	r0, #0
 80048e8:	dc06      	bgt.n	80048f8 <__sflush_r+0xf8>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	e790      	b.n	800481a <__sflush_r+0x1a>
 80048f8:	4407      	add	r7, r0
 80048fa:	1a36      	subs	r6, r6, r0
 80048fc:	e7ea      	b.n	80048d4 <__sflush_r+0xd4>
 80048fe:	bf00      	nop
 8004900:	dfbffffe 	.word	0xdfbffffe

08004904 <_fflush_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b913      	cbnz	r3, 8004914 <_fflush_r+0x10>
 800490e:	2500      	movs	r5, #0
 8004910:	4628      	mov	r0, r5
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	b118      	cbz	r0, 800491e <_fflush_r+0x1a>
 8004916:	6a03      	ldr	r3, [r0, #32]
 8004918:	b90b      	cbnz	r3, 800491e <_fflush_r+0x1a>
 800491a:	f7fe ffdd 	bl	80038d8 <__sinit>
 800491e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f3      	beq.n	800490e <_fflush_r+0xa>
 8004926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004928:	07d0      	lsls	r0, r2, #31
 800492a:	d404      	bmi.n	8004936 <_fflush_r+0x32>
 800492c:	0599      	lsls	r1, r3, #22
 800492e:	d402      	bmi.n	8004936 <_fflush_r+0x32>
 8004930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004932:	f7ff f83d 	bl	80039b0 <__retarget_lock_acquire_recursive>
 8004936:	4628      	mov	r0, r5
 8004938:	4621      	mov	r1, r4
 800493a:	f7ff ff61 	bl	8004800 <__sflush_r>
 800493e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004940:	4605      	mov	r5, r0
 8004942:	07da      	lsls	r2, r3, #31
 8004944:	d4e4      	bmi.n	8004910 <_fflush_r+0xc>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	d4e1      	bmi.n	8004910 <_fflush_r+0xc>
 800494c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800494e:	f7ff f830 	bl	80039b2 <__retarget_lock_release_recursive>
 8004952:	e7dd      	b.n	8004910 <_fflush_r+0xc>

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_lock+0x8>)
 8004956:	f7ff b82b 	b.w	80039b0 <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	200003e4 	.word	0x200003e4

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_unlock+0x8>)
 8004962:	f7ff b826 	b.w	80039b2 <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	200003e4 	.word	0x200003e4

0800496c <_Balloc>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	69c6      	ldr	r6, [r0, #28]
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	b976      	cbnz	r6, 8004994 <_Balloc+0x28>
 8004976:	2010      	movs	r0, #16
 8004978:	f7ff fe9a 	bl	80046b0 <malloc>
 800497c:	4602      	mov	r2, r0
 800497e:	61e0      	str	r0, [r4, #28]
 8004980:	b920      	cbnz	r0, 800498c <_Balloc+0x20>
 8004982:	216b      	movs	r1, #107	; 0x6b
 8004984:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <_Balloc+0x78>)
 8004986:	4818      	ldr	r0, [pc, #96]	; (80049e8 <_Balloc+0x7c>)
 8004988:	f000 fc10 	bl	80051ac <__assert_func>
 800498c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004990:	6006      	str	r6, [r0, #0]
 8004992:	60c6      	str	r6, [r0, #12]
 8004994:	69e6      	ldr	r6, [r4, #28]
 8004996:	68f3      	ldr	r3, [r6, #12]
 8004998:	b183      	cbz	r3, 80049bc <_Balloc+0x50>
 800499a:	69e3      	ldr	r3, [r4, #28]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80049a2:	b9b8      	cbnz	r0, 80049d4 <_Balloc+0x68>
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f605 	lsl.w	r6, r1, r5
 80049aa:	1d72      	adds	r2, r6, #5
 80049ac:	4620      	mov	r0, r4
 80049ae:	0092      	lsls	r2, r2, #2
 80049b0:	f000 fc1a 	bl	80051e8 <_calloc_r>
 80049b4:	b160      	cbz	r0, 80049d0 <_Balloc+0x64>
 80049b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80049ba:	e00e      	b.n	80049da <_Balloc+0x6e>
 80049bc:	2221      	movs	r2, #33	; 0x21
 80049be:	2104      	movs	r1, #4
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fc11 	bl	80051e8 <_calloc_r>
 80049c6:	69e3      	ldr	r3, [r4, #28]
 80049c8:	60f0      	str	r0, [r6, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e4      	bne.n	800499a <_Balloc+0x2e>
 80049d0:	2000      	movs	r0, #0
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	6802      	ldr	r2, [r0, #0]
 80049d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049da:	2300      	movs	r3, #0
 80049dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049e0:	e7f7      	b.n	80049d2 <_Balloc+0x66>
 80049e2:	bf00      	nop
 80049e4:	08007089 	.word	0x08007089
 80049e8:	08007109 	.word	0x08007109

080049ec <_Bfree>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	69c6      	ldr	r6, [r0, #28]
 80049f0:	4605      	mov	r5, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	b976      	cbnz	r6, 8004a14 <_Bfree+0x28>
 80049f6:	2010      	movs	r0, #16
 80049f8:	f7ff fe5a 	bl	80046b0 <malloc>
 80049fc:	4602      	mov	r2, r0
 80049fe:	61e8      	str	r0, [r5, #28]
 8004a00:	b920      	cbnz	r0, 8004a0c <_Bfree+0x20>
 8004a02:	218f      	movs	r1, #143	; 0x8f
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <_Bfree+0x3c>)
 8004a06:	4809      	ldr	r0, [pc, #36]	; (8004a2c <_Bfree+0x40>)
 8004a08:	f000 fbd0 	bl	80051ac <__assert_func>
 8004a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a10:	6006      	str	r6, [r0, #0]
 8004a12:	60c6      	str	r6, [r0, #12]
 8004a14:	b13c      	cbz	r4, 8004a26 <_Bfree+0x3a>
 8004a16:	69eb      	ldr	r3, [r5, #28]
 8004a18:	6862      	ldr	r2, [r4, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a20:	6021      	str	r1, [r4, #0]
 8004a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	08007089 	.word	0x08007089
 8004a2c:	08007109 	.word	0x08007109

08004a30 <__multadd>:
 8004a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a34:	4607      	mov	r7, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	461e      	mov	r6, r3
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	690d      	ldr	r5, [r1, #16]
 8004a3e:	f101 0c14 	add.w	ip, r1, #20
 8004a42:	f8dc 3000 	ldr.w	r3, [ip]
 8004a46:	3001      	adds	r0, #1
 8004a48:	b299      	uxth	r1, r3
 8004a4a:	fb02 6101 	mla	r1, r2, r1, r6
 8004a4e:	0c1e      	lsrs	r6, r3, #16
 8004a50:	0c0b      	lsrs	r3, r1, #16
 8004a52:	fb02 3306 	mla	r3, r2, r6, r3
 8004a56:	b289      	uxth	r1, r1
 8004a58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a5c:	4285      	cmp	r5, r0
 8004a5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a62:	f84c 1b04 	str.w	r1, [ip], #4
 8004a66:	dcec      	bgt.n	8004a42 <__multadd+0x12>
 8004a68:	b30e      	cbz	r6, 8004aae <__multadd+0x7e>
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dc19      	bgt.n	8004aa4 <__multadd+0x74>
 8004a70:	6861      	ldr	r1, [r4, #4]
 8004a72:	4638      	mov	r0, r7
 8004a74:	3101      	adds	r1, #1
 8004a76:	f7ff ff79 	bl	800496c <_Balloc>
 8004a7a:	4680      	mov	r8, r0
 8004a7c:	b928      	cbnz	r0, 8004a8a <__multadd+0x5a>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	21ba      	movs	r1, #186	; 0xba
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <__multadd+0x84>)
 8004a84:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <__multadd+0x88>)
 8004a86:	f000 fb91 	bl	80051ac <__assert_func>
 8004a8a:	6922      	ldr	r2, [r4, #16]
 8004a8c:	f104 010c 	add.w	r1, r4, #12
 8004a90:	3202      	adds	r2, #2
 8004a92:	0092      	lsls	r2, r2, #2
 8004a94:	300c      	adds	r0, #12
 8004a96:	f000 fb7b 	bl	8005190 <memcpy>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7ff ffa5 	bl	80049ec <_Bfree>
 8004aa2:	4644      	mov	r4, r8
 8004aa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004aa8:	3501      	adds	r5, #1
 8004aaa:	615e      	str	r6, [r3, #20]
 8004aac:	6125      	str	r5, [r4, #16]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab4:	080070f8 	.word	0x080070f8
 8004ab8:	08007109 	.word	0x08007109

08004abc <__hi0bits>:
 8004abc:	0c02      	lsrs	r2, r0, #16
 8004abe:	0412      	lsls	r2, r2, #16
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	b9ca      	cbnz	r2, 8004af8 <__hi0bits+0x3c>
 8004ac4:	0403      	lsls	r3, r0, #16
 8004ac6:	2010      	movs	r0, #16
 8004ac8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004acc:	bf04      	itt	eq
 8004ace:	021b      	lsleq	r3, r3, #8
 8004ad0:	3008      	addeq	r0, #8
 8004ad2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ad6:	bf04      	itt	eq
 8004ad8:	011b      	lsleq	r3, r3, #4
 8004ada:	3004      	addeq	r0, #4
 8004adc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004ae0:	bf04      	itt	eq
 8004ae2:	009b      	lsleq	r3, r3, #2
 8004ae4:	3002      	addeq	r0, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db05      	blt.n	8004af6 <__hi0bits+0x3a>
 8004aea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004aee:	f100 0001 	add.w	r0, r0, #1
 8004af2:	bf08      	it	eq
 8004af4:	2020      	moveq	r0, #32
 8004af6:	4770      	bx	lr
 8004af8:	2000      	movs	r0, #0
 8004afa:	e7e5      	b.n	8004ac8 <__hi0bits+0xc>

08004afc <__lo0bits>:
 8004afc:	6803      	ldr	r3, [r0, #0]
 8004afe:	4602      	mov	r2, r0
 8004b00:	f013 0007 	ands.w	r0, r3, #7
 8004b04:	d00b      	beq.n	8004b1e <__lo0bits+0x22>
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	d421      	bmi.n	8004b4e <__lo0bits+0x52>
 8004b0a:	0798      	lsls	r0, r3, #30
 8004b0c:	bf49      	itett	mi
 8004b0e:	085b      	lsrmi	r3, r3, #1
 8004b10:	089b      	lsrpl	r3, r3, #2
 8004b12:	2001      	movmi	r0, #1
 8004b14:	6013      	strmi	r3, [r2, #0]
 8004b16:	bf5c      	itt	pl
 8004b18:	2002      	movpl	r0, #2
 8004b1a:	6013      	strpl	r3, [r2, #0]
 8004b1c:	4770      	bx	lr
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	b909      	cbnz	r1, 8004b26 <__lo0bits+0x2a>
 8004b22:	2010      	movs	r0, #16
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	b2d9      	uxtb	r1, r3
 8004b28:	b909      	cbnz	r1, 8004b2e <__lo0bits+0x32>
 8004b2a:	3008      	adds	r0, #8
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	0719      	lsls	r1, r3, #28
 8004b30:	bf04      	itt	eq
 8004b32:	091b      	lsreq	r3, r3, #4
 8004b34:	3004      	addeq	r0, #4
 8004b36:	0799      	lsls	r1, r3, #30
 8004b38:	bf04      	itt	eq
 8004b3a:	089b      	lsreq	r3, r3, #2
 8004b3c:	3002      	addeq	r0, #2
 8004b3e:	07d9      	lsls	r1, r3, #31
 8004b40:	d403      	bmi.n	8004b4a <__lo0bits+0x4e>
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	f100 0001 	add.w	r0, r0, #1
 8004b48:	d003      	beq.n	8004b52 <__lo0bits+0x56>
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4770      	bx	lr
 8004b4e:	2000      	movs	r0, #0
 8004b50:	4770      	bx	lr
 8004b52:	2020      	movs	r0, #32
 8004b54:	4770      	bx	lr
	...

08004b58 <__i2b>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	f7ff ff05 	bl	800496c <_Balloc>
 8004b62:	4602      	mov	r2, r0
 8004b64:	b928      	cbnz	r0, 8004b72 <__i2b+0x1a>
 8004b66:	f240 1145 	movw	r1, #325	; 0x145
 8004b6a:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <__i2b+0x24>)
 8004b6c:	4804      	ldr	r0, [pc, #16]	; (8004b80 <__i2b+0x28>)
 8004b6e:	f000 fb1d 	bl	80051ac <__assert_func>
 8004b72:	2301      	movs	r3, #1
 8004b74:	6144      	str	r4, [r0, #20]
 8004b76:	6103      	str	r3, [r0, #16]
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	bf00      	nop
 8004b7c:	080070f8 	.word	0x080070f8
 8004b80:	08007109 	.word	0x08007109

08004b84 <__multiply>:
 8004b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	4691      	mov	r9, r2
 8004b8a:	690a      	ldr	r2, [r1, #16]
 8004b8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b90:	460c      	mov	r4, r1
 8004b92:	429a      	cmp	r2, r3
 8004b94:	bfbe      	ittt	lt
 8004b96:	460b      	movlt	r3, r1
 8004b98:	464c      	movlt	r4, r9
 8004b9a:	4699      	movlt	r9, r3
 8004b9c:	6927      	ldr	r7, [r4, #16]
 8004b9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	6861      	ldr	r1, [r4, #4]
 8004ba6:	eb07 060a 	add.w	r6, r7, sl
 8004baa:	42b3      	cmp	r3, r6
 8004bac:	b085      	sub	sp, #20
 8004bae:	bfb8      	it	lt
 8004bb0:	3101      	addlt	r1, #1
 8004bb2:	f7ff fedb 	bl	800496c <_Balloc>
 8004bb6:	b930      	cbnz	r0, 8004bc6 <__multiply+0x42>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004bbe:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <__multiply+0x148>)
 8004bc0:	4843      	ldr	r0, [pc, #268]	; (8004cd0 <__multiply+0x14c>)
 8004bc2:	f000 faf3 	bl	80051ac <__assert_func>
 8004bc6:	f100 0514 	add.w	r5, r0, #20
 8004bca:	462b      	mov	r3, r5
 8004bcc:	2200      	movs	r2, #0
 8004bce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004bd2:	4543      	cmp	r3, r8
 8004bd4:	d321      	bcc.n	8004c1a <__multiply+0x96>
 8004bd6:	f104 0314 	add.w	r3, r4, #20
 8004bda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004bde:	f109 0314 	add.w	r3, r9, #20
 8004be2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004be6:	9202      	str	r2, [sp, #8]
 8004be8:	1b3a      	subs	r2, r7, r4
 8004bea:	3a15      	subs	r2, #21
 8004bec:	f022 0203 	bic.w	r2, r2, #3
 8004bf0:	3204      	adds	r2, #4
 8004bf2:	f104 0115 	add.w	r1, r4, #21
 8004bf6:	428f      	cmp	r7, r1
 8004bf8:	bf38      	it	cc
 8004bfa:	2204      	movcc	r2, #4
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	9a02      	ldr	r2, [sp, #8]
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d80c      	bhi.n	8004c20 <__multiply+0x9c>
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	dd03      	ble.n	8004c12 <__multiply+0x8e>
 8004c0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d05a      	beq.n	8004cc8 <__multiply+0x144>
 8004c12:	6106      	str	r6, [r0, #16]
 8004c14:	b005      	add	sp, #20
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	f843 2b04 	str.w	r2, [r3], #4
 8004c1e:	e7d8      	b.n	8004bd2 <__multiply+0x4e>
 8004c20:	f8b3 a000 	ldrh.w	sl, [r3]
 8004c24:	f1ba 0f00 	cmp.w	sl, #0
 8004c28:	d023      	beq.n	8004c72 <__multiply+0xee>
 8004c2a:	46a9      	mov	r9, r5
 8004c2c:	f04f 0c00 	mov.w	ip, #0
 8004c30:	f104 0e14 	add.w	lr, r4, #20
 8004c34:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004c38:	f8d9 1000 	ldr.w	r1, [r9]
 8004c3c:	fa1f fb82 	uxth.w	fp, r2
 8004c40:	b289      	uxth	r1, r1
 8004c42:	fb0a 110b 	mla	r1, sl, fp, r1
 8004c46:	4461      	add	r1, ip
 8004c48:	f8d9 c000 	ldr.w	ip, [r9]
 8004c4c:	0c12      	lsrs	r2, r2, #16
 8004c4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004c52:	fb0a c202 	mla	r2, sl, r2, ip
 8004c56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004c5a:	b289      	uxth	r1, r1
 8004c5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c60:	4577      	cmp	r7, lr
 8004c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004c66:	f849 1b04 	str.w	r1, [r9], #4
 8004c6a:	d8e3      	bhi.n	8004c34 <__multiply+0xb0>
 8004c6c:	9a01      	ldr	r2, [sp, #4]
 8004c6e:	f845 c002 	str.w	ip, [r5, r2]
 8004c72:	9a03      	ldr	r2, [sp, #12]
 8004c74:	3304      	adds	r3, #4
 8004c76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c7a:	f1b9 0f00 	cmp.w	r9, #0
 8004c7e:	d021      	beq.n	8004cc4 <__multiply+0x140>
 8004c80:	46ae      	mov	lr, r5
 8004c82:	f04f 0a00 	mov.w	sl, #0
 8004c86:	6829      	ldr	r1, [r5, #0]
 8004c88:	f104 0c14 	add.w	ip, r4, #20
 8004c8c:	f8bc b000 	ldrh.w	fp, [ip]
 8004c90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004c94:	b289      	uxth	r1, r1
 8004c96:	fb09 220b 	mla	r2, r9, fp, r2
 8004c9a:	4452      	add	r2, sl
 8004c9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ca0:	f84e 1b04 	str.w	r1, [lr], #4
 8004ca4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004ca8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004cac:	f8be 1000 	ldrh.w	r1, [lr]
 8004cb0:	4567      	cmp	r7, ip
 8004cb2:	fb09 110a 	mla	r1, r9, sl, r1
 8004cb6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004cba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004cbe:	d8e5      	bhi.n	8004c8c <__multiply+0x108>
 8004cc0:	9a01      	ldr	r2, [sp, #4]
 8004cc2:	50a9      	str	r1, [r5, r2]
 8004cc4:	3504      	adds	r5, #4
 8004cc6:	e79a      	b.n	8004bfe <__multiply+0x7a>
 8004cc8:	3e01      	subs	r6, #1
 8004cca:	e79c      	b.n	8004c06 <__multiply+0x82>
 8004ccc:	080070f8 	.word	0x080070f8
 8004cd0:	08007109 	.word	0x08007109

08004cd4 <__pow5mult>:
 8004cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd8:	4615      	mov	r5, r2
 8004cda:	f012 0203 	ands.w	r2, r2, #3
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460f      	mov	r7, r1
 8004ce2:	d007      	beq.n	8004cf4 <__pow5mult+0x20>
 8004ce4:	4c25      	ldr	r4, [pc, #148]	; (8004d7c <__pow5mult+0xa8>)
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cee:	f7ff fe9f 	bl	8004a30 <__multadd>
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	10ad      	asrs	r5, r5, #2
 8004cf6:	d03d      	beq.n	8004d74 <__pow5mult+0xa0>
 8004cf8:	69f4      	ldr	r4, [r6, #28]
 8004cfa:	b97c      	cbnz	r4, 8004d1c <__pow5mult+0x48>
 8004cfc:	2010      	movs	r0, #16
 8004cfe:	f7ff fcd7 	bl	80046b0 <malloc>
 8004d02:	4602      	mov	r2, r0
 8004d04:	61f0      	str	r0, [r6, #28]
 8004d06:	b928      	cbnz	r0, 8004d14 <__pow5mult+0x40>
 8004d08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004d0c:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <__pow5mult+0xac>)
 8004d0e:	481d      	ldr	r0, [pc, #116]	; (8004d84 <__pow5mult+0xb0>)
 8004d10:	f000 fa4c 	bl	80051ac <__assert_func>
 8004d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d18:	6004      	str	r4, [r0, #0]
 8004d1a:	60c4      	str	r4, [r0, #12]
 8004d1c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d24:	b94c      	cbnz	r4, 8004d3a <__pow5mult+0x66>
 8004d26:	f240 2171 	movw	r1, #625	; 0x271
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ff14 	bl	8004b58 <__i2b>
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d38:	6003      	str	r3, [r0, #0]
 8004d3a:	f04f 0900 	mov.w	r9, #0
 8004d3e:	07eb      	lsls	r3, r5, #31
 8004d40:	d50a      	bpl.n	8004d58 <__pow5mult+0x84>
 8004d42:	4639      	mov	r1, r7
 8004d44:	4622      	mov	r2, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff ff1c 	bl	8004b84 <__multiply>
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	4639      	mov	r1, r7
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff fe4b 	bl	80049ec <_Bfree>
 8004d56:	4647      	mov	r7, r8
 8004d58:	106d      	asrs	r5, r5, #1
 8004d5a:	d00b      	beq.n	8004d74 <__pow5mult+0xa0>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	b938      	cbnz	r0, 8004d70 <__pow5mult+0x9c>
 8004d60:	4622      	mov	r2, r4
 8004d62:	4621      	mov	r1, r4
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7ff ff0d 	bl	8004b84 <__multiply>
 8004d6a:	6020      	str	r0, [r4, #0]
 8004d6c:	f8c0 9000 	str.w	r9, [r0]
 8004d70:	4604      	mov	r4, r0
 8004d72:	e7e4      	b.n	8004d3e <__pow5mult+0x6a>
 8004d74:	4638      	mov	r0, r7
 8004d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08007258 	.word	0x08007258
 8004d80:	08007089 	.word	0x08007089
 8004d84:	08007109 	.word	0x08007109

08004d88 <__lshift>:
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	4607      	mov	r7, r0
 8004d90:	4691      	mov	r9, r2
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	6849      	ldr	r1, [r1, #4]
 8004d96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004da0:	f108 0601 	add.w	r6, r8, #1
 8004da4:	42b3      	cmp	r3, r6
 8004da6:	db0b      	blt.n	8004dc0 <__lshift+0x38>
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7ff fddf 	bl	800496c <_Balloc>
 8004dae:	4605      	mov	r5, r0
 8004db0:	b948      	cbnz	r0, 8004dc6 <__lshift+0x3e>
 8004db2:	4602      	mov	r2, r0
 8004db4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <__lshift+0xd0>)
 8004dba:	4828      	ldr	r0, [pc, #160]	; (8004e5c <__lshift+0xd4>)
 8004dbc:	f000 f9f6 	bl	80051ac <__assert_func>
 8004dc0:	3101      	adds	r1, #1
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	e7ee      	b.n	8004da4 <__lshift+0x1c>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f100 0114 	add.w	r1, r0, #20
 8004dcc:	f100 0210 	add.w	r2, r0, #16
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	4553      	cmp	r3, sl
 8004dd4:	db33      	blt.n	8004e3e <__lshift+0xb6>
 8004dd6:	6920      	ldr	r0, [r4, #16]
 8004dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ddc:	f104 0314 	add.w	r3, r4, #20
 8004de0:	f019 091f 	ands.w	r9, r9, #31
 8004de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004de8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004dec:	d02b      	beq.n	8004e46 <__lshift+0xbe>
 8004dee:	468a      	mov	sl, r1
 8004df0:	2200      	movs	r2, #0
 8004df2:	f1c9 0e20 	rsb	lr, r9, #32
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	fa00 f009 	lsl.w	r0, r0, r9
 8004dfc:	4310      	orrs	r0, r2
 8004dfe:	f84a 0b04 	str.w	r0, [sl], #4
 8004e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e06:	459c      	cmp	ip, r3
 8004e08:	fa22 f20e 	lsr.w	r2, r2, lr
 8004e0c:	d8f3      	bhi.n	8004df6 <__lshift+0x6e>
 8004e0e:	ebac 0304 	sub.w	r3, ip, r4
 8004e12:	3b15      	subs	r3, #21
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	3304      	adds	r3, #4
 8004e1a:	f104 0015 	add.w	r0, r4, #21
 8004e1e:	4584      	cmp	ip, r0
 8004e20:	bf38      	it	cc
 8004e22:	2304      	movcc	r3, #4
 8004e24:	50ca      	str	r2, [r1, r3]
 8004e26:	b10a      	cbz	r2, 8004e2c <__lshift+0xa4>
 8004e28:	f108 0602 	add.w	r6, r8, #2
 8004e2c:	3e01      	subs	r6, #1
 8004e2e:	4638      	mov	r0, r7
 8004e30:	4621      	mov	r1, r4
 8004e32:	612e      	str	r6, [r5, #16]
 8004e34:	f7ff fdda 	bl	80049ec <_Bfree>
 8004e38:	4628      	mov	r0, r5
 8004e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e42:	3301      	adds	r3, #1
 8004e44:	e7c5      	b.n	8004dd2 <__lshift+0x4a>
 8004e46:	3904      	subs	r1, #4
 8004e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e4c:	459c      	cmp	ip, r3
 8004e4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e52:	d8f9      	bhi.n	8004e48 <__lshift+0xc0>
 8004e54:	e7ea      	b.n	8004e2c <__lshift+0xa4>
 8004e56:	bf00      	nop
 8004e58:	080070f8 	.word	0x080070f8
 8004e5c:	08007109 	.word	0x08007109

08004e60 <__mcmp>:
 8004e60:	4603      	mov	r3, r0
 8004e62:	690a      	ldr	r2, [r1, #16]
 8004e64:	6900      	ldr	r0, [r0, #16]
 8004e66:	b530      	push	{r4, r5, lr}
 8004e68:	1a80      	subs	r0, r0, r2
 8004e6a:	d10d      	bne.n	8004e88 <__mcmp+0x28>
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	3114      	adds	r1, #20
 8004e70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e80:	4295      	cmp	r5, r2
 8004e82:	d002      	beq.n	8004e8a <__mcmp+0x2a>
 8004e84:	d304      	bcc.n	8004e90 <__mcmp+0x30>
 8004e86:	2001      	movs	r0, #1
 8004e88:	bd30      	pop	{r4, r5, pc}
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	d3f4      	bcc.n	8004e78 <__mcmp+0x18>
 8004e8e:	e7fb      	b.n	8004e88 <__mcmp+0x28>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e94:	e7f8      	b.n	8004e88 <__mcmp+0x28>
	...

08004e98 <__mdiff>:
 8004e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	f7ff ffdb 	bl	8004e60 <__mcmp>
 8004eaa:	1e06      	subs	r6, r0, #0
 8004eac:	d111      	bne.n	8004ed2 <__mdiff+0x3a>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff fd5b 	bl	800496c <_Balloc>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	b928      	cbnz	r0, 8004ec6 <__mdiff+0x2e>
 8004eba:	f240 2137 	movw	r1, #567	; 0x237
 8004ebe:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <__mdiff+0x110>)
 8004ec0:	483a      	ldr	r0, [pc, #232]	; (8004fac <__mdiff+0x114>)
 8004ec2:	f000 f973 	bl	80051ac <__assert_func>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004ecc:	4610      	mov	r0, r2
 8004ece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed2:	bfa4      	itt	ge
 8004ed4:	4623      	movge	r3, r4
 8004ed6:	462c      	movge	r4, r5
 8004ed8:	4638      	mov	r0, r7
 8004eda:	6861      	ldr	r1, [r4, #4]
 8004edc:	bfa6      	itte	ge
 8004ede:	461d      	movge	r5, r3
 8004ee0:	2600      	movge	r6, #0
 8004ee2:	2601      	movlt	r6, #1
 8004ee4:	f7ff fd42 	bl	800496c <_Balloc>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	b918      	cbnz	r0, 8004ef4 <__mdiff+0x5c>
 8004eec:	f240 2145 	movw	r1, #581	; 0x245
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <__mdiff+0x110>)
 8004ef2:	e7e5      	b.n	8004ec0 <__mdiff+0x28>
 8004ef4:	f102 0814 	add.w	r8, r2, #20
 8004ef8:	46c2      	mov	sl, r8
 8004efa:	f04f 0c00 	mov.w	ip, #0
 8004efe:	6927      	ldr	r7, [r4, #16]
 8004f00:	60c6      	str	r6, [r0, #12]
 8004f02:	692e      	ldr	r6, [r5, #16]
 8004f04:	f104 0014 	add.w	r0, r4, #20
 8004f08:	f105 0914 	add.w	r9, r5, #20
 8004f0c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004f10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004f14:	3410      	adds	r4, #16
 8004f16:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004f1a:	f859 3b04 	ldr.w	r3, [r9], #4
 8004f1e:	fa1f f18b 	uxth.w	r1, fp
 8004f22:	4461      	add	r1, ip
 8004f24:	fa1f fc83 	uxth.w	ip, r3
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	eba1 010c 	sub.w	r1, r1, ip
 8004f2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004f32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004f36:	b289      	uxth	r1, r1
 8004f38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004f3c:	454e      	cmp	r6, r9
 8004f3e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004f42:	f84a 1b04 	str.w	r1, [sl], #4
 8004f46:	d8e6      	bhi.n	8004f16 <__mdiff+0x7e>
 8004f48:	1b73      	subs	r3, r6, r5
 8004f4a:	3b15      	subs	r3, #21
 8004f4c:	f023 0303 	bic.w	r3, r3, #3
 8004f50:	3515      	adds	r5, #21
 8004f52:	3304      	adds	r3, #4
 8004f54:	42ae      	cmp	r6, r5
 8004f56:	bf38      	it	cc
 8004f58:	2304      	movcc	r3, #4
 8004f5a:	4418      	add	r0, r3
 8004f5c:	4443      	add	r3, r8
 8004f5e:	461e      	mov	r6, r3
 8004f60:	4605      	mov	r5, r0
 8004f62:	4575      	cmp	r5, lr
 8004f64:	d30e      	bcc.n	8004f84 <__mdiff+0xec>
 8004f66:	f10e 0103 	add.w	r1, lr, #3
 8004f6a:	1a09      	subs	r1, r1, r0
 8004f6c:	f021 0103 	bic.w	r1, r1, #3
 8004f70:	3803      	subs	r0, #3
 8004f72:	4586      	cmp	lr, r0
 8004f74:	bf38      	it	cc
 8004f76:	2100      	movcc	r1, #0
 8004f78:	440b      	add	r3, r1
 8004f7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f7e:	b189      	cbz	r1, 8004fa4 <__mdiff+0x10c>
 8004f80:	6117      	str	r7, [r2, #16]
 8004f82:	e7a3      	b.n	8004ecc <__mdiff+0x34>
 8004f84:	f855 8b04 	ldr.w	r8, [r5], #4
 8004f88:	fa1f f188 	uxth.w	r1, r8
 8004f8c:	4461      	add	r1, ip
 8004f8e:	140c      	asrs	r4, r1, #16
 8004f90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004f94:	b289      	uxth	r1, r1
 8004f96:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004f9a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004f9e:	f846 1b04 	str.w	r1, [r6], #4
 8004fa2:	e7de      	b.n	8004f62 <__mdiff+0xca>
 8004fa4:	3f01      	subs	r7, #1
 8004fa6:	e7e8      	b.n	8004f7a <__mdiff+0xe2>
 8004fa8:	080070f8 	.word	0x080070f8
 8004fac:	08007109 	.word	0x08007109

08004fb0 <__d2b>:
 8004fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	4617      	mov	r7, r2
 8004fb6:	461c      	mov	r4, r3
 8004fb8:	9e08      	ldr	r6, [sp, #32]
 8004fba:	f7ff fcd7 	bl	800496c <_Balloc>
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	b930      	cbnz	r0, 8004fd0 <__d2b+0x20>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f240 310f 	movw	r1, #783	; 0x30f
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <__d2b+0xa4>)
 8004fca:	4823      	ldr	r0, [pc, #140]	; (8005058 <__d2b+0xa8>)
 8004fcc:	f000 f8ee 	bl	80051ac <__assert_func>
 8004fd0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004fd4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004fd8:	bb24      	cbnz	r4, 8005024 <__d2b+0x74>
 8004fda:	2f00      	cmp	r7, #0
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	d026      	beq.n	800502e <__d2b+0x7e>
 8004fe0:	4668      	mov	r0, sp
 8004fe2:	9700      	str	r7, [sp, #0]
 8004fe4:	f7ff fd8a 	bl	8004afc <__lo0bits>
 8004fe8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004fec:	b1e8      	cbz	r0, 800502a <__d2b+0x7a>
 8004fee:	f1c0 0320 	rsb	r3, r0, #32
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	40c2      	lsrs	r2, r0
 8004ffa:	616b      	str	r3, [r5, #20]
 8004ffc:	9201      	str	r2, [sp, #4]
 8004ffe:	9b01      	ldr	r3, [sp, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf14      	ite	ne
 8005004:	2102      	movne	r1, #2
 8005006:	2101      	moveq	r1, #1
 8005008:	61ab      	str	r3, [r5, #24]
 800500a:	6129      	str	r1, [r5, #16]
 800500c:	b1bc      	cbz	r4, 800503e <__d2b+0x8e>
 800500e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005012:	4404      	add	r4, r0
 8005014:	6034      	str	r4, [r6, #0]
 8005016:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800501a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501c:	6018      	str	r0, [r3, #0]
 800501e:	4628      	mov	r0, r5
 8005020:	b003      	add	sp, #12
 8005022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005028:	e7d7      	b.n	8004fda <__d2b+0x2a>
 800502a:	6169      	str	r1, [r5, #20]
 800502c:	e7e7      	b.n	8004ffe <__d2b+0x4e>
 800502e:	a801      	add	r0, sp, #4
 8005030:	f7ff fd64 	bl	8004afc <__lo0bits>
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	2101      	movs	r1, #1
 8005038:	616b      	str	r3, [r5, #20]
 800503a:	3020      	adds	r0, #32
 800503c:	e7e5      	b.n	800500a <__d2b+0x5a>
 800503e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005042:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005046:	6030      	str	r0, [r6, #0]
 8005048:	6918      	ldr	r0, [r3, #16]
 800504a:	f7ff fd37 	bl	8004abc <__hi0bits>
 800504e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005052:	e7e2      	b.n	800501a <__d2b+0x6a>
 8005054:	080070f8 	.word	0x080070f8
 8005058:	08007109 	.word	0x08007109

0800505c <__sread>:
 800505c:	b510      	push	{r4, lr}
 800505e:	460c      	mov	r4, r1
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	f000 f860 	bl	8005128 <_read_r>
 8005068:	2800      	cmp	r0, #0
 800506a:	bfab      	itete	ge
 800506c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800506e:	89a3      	ldrhlt	r3, [r4, #12]
 8005070:	181b      	addge	r3, r3, r0
 8005072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005076:	bfac      	ite	ge
 8005078:	6563      	strge	r3, [r4, #84]	; 0x54
 800507a:	81a3      	strhlt	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__swrite>:
 800507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	461f      	mov	r7, r3
 8005084:	898b      	ldrh	r3, [r1, #12]
 8005086:	4605      	mov	r5, r0
 8005088:	05db      	lsls	r3, r3, #23
 800508a:	460c      	mov	r4, r1
 800508c:	4616      	mov	r6, r2
 800508e:	d505      	bpl.n	800509c <__swrite+0x1e>
 8005090:	2302      	movs	r3, #2
 8005092:	2200      	movs	r2, #0
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	f000 f834 	bl	8005104 <_lseek_r>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	4632      	mov	r2, r6
 80050a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a4:	81a3      	strh	r3, [r4, #12]
 80050a6:	4628      	mov	r0, r5
 80050a8:	463b      	mov	r3, r7
 80050aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b2:	f000 b85b 	b.w	800516c <_write_r>

080050b6 <__sseek>:
 80050b6:	b510      	push	{r4, lr}
 80050b8:	460c      	mov	r4, r1
 80050ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050be:	f000 f821 	bl	8005104 <_lseek_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	bf15      	itete	ne
 80050c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050d2:	81a3      	strheq	r3, [r4, #12]
 80050d4:	bf18      	it	ne
 80050d6:	81a3      	strhne	r3, [r4, #12]
 80050d8:	bd10      	pop	{r4, pc}

080050da <__sclose>:
 80050da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050de:	f000 b801 	b.w	80050e4 <_close_r>
	...

080050e4 <_close_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	2300      	movs	r3, #0
 80050e8:	4d05      	ldr	r5, [pc, #20]	; (8005100 <_close_r+0x1c>)
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fd fcb8 	bl	8002a64 <_close>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_close_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_close_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	200003f0 	.word	0x200003f0

08005104 <_lseek_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	2200      	movs	r2, #0
 800510e:	4d05      	ldr	r5, [pc, #20]	; (8005124 <_lseek_r+0x20>)
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fd fcca 	bl	8002aac <_lseek>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_lseek_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_lseek_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	200003f0 	.word	0x200003f0

08005128 <_read_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	2200      	movs	r2, #0
 8005132:	4d05      	ldr	r5, [pc, #20]	; (8005148 <_read_r+0x20>)
 8005134:	602a      	str	r2, [r5, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fd fc77 	bl	8002a2a <_read>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_read_r+0x1e>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_read_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	200003f0 	.word	0x200003f0

0800514c <_sbrk_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	2300      	movs	r3, #0
 8005150:	4d05      	ldr	r5, [pc, #20]	; (8005168 <_sbrk_r+0x1c>)
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	f7fd fcb4 	bl	8002ac4 <_sbrk>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_sbrk_r+0x1a>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_sbrk_r+0x1a>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	200003f0 	.word	0x200003f0

0800516c <_write_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	2200      	movs	r2, #0
 8005176:	4d05      	ldr	r5, [pc, #20]	; (800518c <_write_r+0x20>)
 8005178:	602a      	str	r2, [r5, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	f7fd fe84 	bl	8002e88 <_write>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d102      	bne.n	800518a <_write_r+0x1e>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	b103      	cbz	r3, 800518a <_write_r+0x1e>
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	200003f0 	.word	0x200003f0

08005190 <memcpy>:
 8005190:	440a      	add	r2, r1
 8005192:	4291      	cmp	r1, r2
 8005194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005198:	d100      	bne.n	800519c <memcpy+0xc>
 800519a:	4770      	bx	lr
 800519c:	b510      	push	{r4, lr}
 800519e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a2:	4291      	cmp	r1, r2
 80051a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a8:	d1f9      	bne.n	800519e <memcpy+0xe>
 80051aa:	bd10      	pop	{r4, pc}

080051ac <__assert_func>:
 80051ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ae:	4614      	mov	r4, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <__assert_func+0x2c>)
 80051b4:	4605      	mov	r5, r0
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68d8      	ldr	r0, [r3, #12]
 80051ba:	b14c      	cbz	r4, 80051d0 <__assert_func+0x24>
 80051bc:	4b07      	ldr	r3, [pc, #28]	; (80051dc <__assert_func+0x30>)
 80051be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051c2:	9100      	str	r1, [sp, #0]
 80051c4:	462b      	mov	r3, r5
 80051c6:	4906      	ldr	r1, [pc, #24]	; (80051e0 <__assert_func+0x34>)
 80051c8:	f000 f87c 	bl	80052c4 <fiprintf>
 80051cc:	f000 f899 	bl	8005302 <abort>
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <__assert_func+0x38>)
 80051d2:	461c      	mov	r4, r3
 80051d4:	e7f3      	b.n	80051be <__assert_func+0x12>
 80051d6:	bf00      	nop
 80051d8:	20000060 	.word	0x20000060
 80051dc:	0800736f 	.word	0x0800736f
 80051e0:	0800737c 	.word	0x0800737c
 80051e4:	080073aa 	.word	0x080073aa

080051e8 <_calloc_r>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	fba1 5402 	umull	r5, r4, r1, r2
 80051ee:	b934      	cbnz	r4, 80051fe <_calloc_r+0x16>
 80051f0:	4629      	mov	r1, r5
 80051f2:	f7ff fa85 	bl	8004700 <_malloc_r>
 80051f6:	4606      	mov	r6, r0
 80051f8:	b928      	cbnz	r0, 8005206 <_calloc_r+0x1e>
 80051fa:	4630      	mov	r0, r6
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
 80051fe:	220c      	movs	r2, #12
 8005200:	2600      	movs	r6, #0
 8005202:	6002      	str	r2, [r0, #0]
 8005204:	e7f9      	b.n	80051fa <_calloc_r+0x12>
 8005206:	462a      	mov	r2, r5
 8005208:	4621      	mov	r1, r4
 800520a:	f7fe fb9b 	bl	8003944 <memset>
 800520e:	e7f4      	b.n	80051fa <_calloc_r+0x12>

08005210 <_free_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4605      	mov	r5, r0
 8005214:	2900      	cmp	r1, #0
 8005216:	d040      	beq.n	800529a <_free_r+0x8a>
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f0c      	subs	r4, r1, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfb8      	it	lt
 8005222:	18e4      	addlt	r4, r4, r3
 8005224:	f7ff fb96 	bl	8004954 <__malloc_lock>
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <_free_r+0x8c>)
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	b933      	cbnz	r3, 800523c <_free_r+0x2c>
 800522e:	6063      	str	r3, [r4, #4]
 8005230:	6014      	str	r4, [r2, #0]
 8005232:	4628      	mov	r0, r5
 8005234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005238:	f7ff bb92 	b.w	8004960 <__malloc_unlock>
 800523c:	42a3      	cmp	r3, r4
 800523e:	d908      	bls.n	8005252 <_free_r+0x42>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	1821      	adds	r1, r4, r0
 8005244:	428b      	cmp	r3, r1
 8005246:	bf01      	itttt	eq
 8005248:	6819      	ldreq	r1, [r3, #0]
 800524a:	685b      	ldreq	r3, [r3, #4]
 800524c:	1809      	addeq	r1, r1, r0
 800524e:	6021      	streq	r1, [r4, #0]
 8005250:	e7ed      	b.n	800522e <_free_r+0x1e>
 8005252:	461a      	mov	r2, r3
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b10b      	cbz	r3, 800525c <_free_r+0x4c>
 8005258:	42a3      	cmp	r3, r4
 800525a:	d9fa      	bls.n	8005252 <_free_r+0x42>
 800525c:	6811      	ldr	r1, [r2, #0]
 800525e:	1850      	adds	r0, r2, r1
 8005260:	42a0      	cmp	r0, r4
 8005262:	d10b      	bne.n	800527c <_free_r+0x6c>
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	4401      	add	r1, r0
 8005268:	1850      	adds	r0, r2, r1
 800526a:	4283      	cmp	r3, r0
 800526c:	6011      	str	r1, [r2, #0]
 800526e:	d1e0      	bne.n	8005232 <_free_r+0x22>
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4408      	add	r0, r1
 8005276:	6010      	str	r0, [r2, #0]
 8005278:	6053      	str	r3, [r2, #4]
 800527a:	e7da      	b.n	8005232 <_free_r+0x22>
 800527c:	d902      	bls.n	8005284 <_free_r+0x74>
 800527e:	230c      	movs	r3, #12
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	e7d6      	b.n	8005232 <_free_r+0x22>
 8005284:	6820      	ldr	r0, [r4, #0]
 8005286:	1821      	adds	r1, r4, r0
 8005288:	428b      	cmp	r3, r1
 800528a:	bf01      	itttt	eq
 800528c:	6819      	ldreq	r1, [r3, #0]
 800528e:	685b      	ldreq	r3, [r3, #4]
 8005290:	1809      	addeq	r1, r1, r0
 8005292:	6021      	streq	r1, [r4, #0]
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	6054      	str	r4, [r2, #4]
 8005298:	e7cb      	b.n	8005232 <_free_r+0x22>
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	200003e8 	.word	0x200003e8

080052a0 <__ascii_mbtowc>:
 80052a0:	b082      	sub	sp, #8
 80052a2:	b901      	cbnz	r1, 80052a6 <__ascii_mbtowc+0x6>
 80052a4:	a901      	add	r1, sp, #4
 80052a6:	b142      	cbz	r2, 80052ba <__ascii_mbtowc+0x1a>
 80052a8:	b14b      	cbz	r3, 80052be <__ascii_mbtowc+0x1e>
 80052aa:	7813      	ldrb	r3, [r2, #0]
 80052ac:	600b      	str	r3, [r1, #0]
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	1e10      	subs	r0, r2, #0
 80052b2:	bf18      	it	ne
 80052b4:	2001      	movne	r0, #1
 80052b6:	b002      	add	sp, #8
 80052b8:	4770      	bx	lr
 80052ba:	4610      	mov	r0, r2
 80052bc:	e7fb      	b.n	80052b6 <__ascii_mbtowc+0x16>
 80052be:	f06f 0001 	mvn.w	r0, #1
 80052c2:	e7f8      	b.n	80052b6 <__ascii_mbtowc+0x16>

080052c4 <fiprintf>:
 80052c4:	b40e      	push	{r1, r2, r3}
 80052c6:	b503      	push	{r0, r1, lr}
 80052c8:	4601      	mov	r1, r0
 80052ca:	ab03      	add	r3, sp, #12
 80052cc:	4805      	ldr	r0, [pc, #20]	; (80052e4 <fiprintf+0x20>)
 80052ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d2:	6800      	ldr	r0, [r0, #0]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	f000 f843 	bl	8005360 <_vfiprintf_r>
 80052da:	b002      	add	sp, #8
 80052dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e0:	b003      	add	sp, #12
 80052e2:	4770      	bx	lr
 80052e4:	20000060 	.word	0x20000060

080052e8 <__ascii_wctomb>:
 80052e8:	4603      	mov	r3, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	b141      	cbz	r1, 8005300 <__ascii_wctomb+0x18>
 80052ee:	2aff      	cmp	r2, #255	; 0xff
 80052f0:	d904      	bls.n	80052fc <__ascii_wctomb+0x14>
 80052f2:	228a      	movs	r2, #138	; 0x8a
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	4770      	bx	lr
 80052fc:	2001      	movs	r0, #1
 80052fe:	700a      	strb	r2, [r1, #0]
 8005300:	4770      	bx	lr

08005302 <abort>:
 8005302:	2006      	movs	r0, #6
 8005304:	b508      	push	{r3, lr}
 8005306:	f000 fa87 	bl	8005818 <raise>
 800530a:	2001      	movs	r0, #1
 800530c:	f7fd fb83 	bl	8002a16 <_exit>

08005310 <__sfputc_r>:
 8005310:	6893      	ldr	r3, [r2, #8]
 8005312:	b410      	push	{r4}
 8005314:	3b01      	subs	r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	6093      	str	r3, [r2, #8]
 800531a:	da07      	bge.n	800532c <__sfputc_r+0x1c>
 800531c:	6994      	ldr	r4, [r2, #24]
 800531e:	42a3      	cmp	r3, r4
 8005320:	db01      	blt.n	8005326 <__sfputc_r+0x16>
 8005322:	290a      	cmp	r1, #10
 8005324:	d102      	bne.n	800532c <__sfputc_r+0x1c>
 8005326:	bc10      	pop	{r4}
 8005328:	f000 b934 	b.w	8005594 <__swbuf_r>
 800532c:	6813      	ldr	r3, [r2, #0]
 800532e:	1c58      	adds	r0, r3, #1
 8005330:	6010      	str	r0, [r2, #0]
 8005332:	7019      	strb	r1, [r3, #0]
 8005334:	4608      	mov	r0, r1
 8005336:	bc10      	pop	{r4}
 8005338:	4770      	bx	lr

0800533a <__sfputs_r>:
 800533a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533c:	4606      	mov	r6, r0
 800533e:	460f      	mov	r7, r1
 8005340:	4614      	mov	r4, r2
 8005342:	18d5      	adds	r5, r2, r3
 8005344:	42ac      	cmp	r4, r5
 8005346:	d101      	bne.n	800534c <__sfputs_r+0x12>
 8005348:	2000      	movs	r0, #0
 800534a:	e007      	b.n	800535c <__sfputs_r+0x22>
 800534c:	463a      	mov	r2, r7
 800534e:	4630      	mov	r0, r6
 8005350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005354:	f7ff ffdc 	bl	8005310 <__sfputc_r>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d1f3      	bne.n	8005344 <__sfputs_r+0xa>
 800535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005360 <_vfiprintf_r>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	460d      	mov	r5, r1
 8005366:	4614      	mov	r4, r2
 8005368:	4698      	mov	r8, r3
 800536a:	4606      	mov	r6, r0
 800536c:	b09d      	sub	sp, #116	; 0x74
 800536e:	b118      	cbz	r0, 8005378 <_vfiprintf_r+0x18>
 8005370:	6a03      	ldr	r3, [r0, #32]
 8005372:	b90b      	cbnz	r3, 8005378 <_vfiprintf_r+0x18>
 8005374:	f7fe fab0 	bl	80038d8 <__sinit>
 8005378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800537a:	07d9      	lsls	r1, r3, #31
 800537c:	d405      	bmi.n	800538a <_vfiprintf_r+0x2a>
 800537e:	89ab      	ldrh	r3, [r5, #12]
 8005380:	059a      	lsls	r2, r3, #22
 8005382:	d402      	bmi.n	800538a <_vfiprintf_r+0x2a>
 8005384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005386:	f7fe fb13 	bl	80039b0 <__retarget_lock_acquire_recursive>
 800538a:	89ab      	ldrh	r3, [r5, #12]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	d501      	bpl.n	8005394 <_vfiprintf_r+0x34>
 8005390:	692b      	ldr	r3, [r5, #16]
 8005392:	b99b      	cbnz	r3, 80053bc <_vfiprintf_r+0x5c>
 8005394:	4629      	mov	r1, r5
 8005396:	4630      	mov	r0, r6
 8005398:	f000 f93a 	bl	8005610 <__swsetup_r>
 800539c:	b170      	cbz	r0, 80053bc <_vfiprintf_r+0x5c>
 800539e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a0:	07dc      	lsls	r4, r3, #31
 80053a2:	d504      	bpl.n	80053ae <_vfiprintf_r+0x4e>
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a8:	b01d      	add	sp, #116	; 0x74
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	89ab      	ldrh	r3, [r5, #12]
 80053b0:	0598      	lsls	r0, r3, #22
 80053b2:	d4f7      	bmi.n	80053a4 <_vfiprintf_r+0x44>
 80053b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053b6:	f7fe fafc 	bl	80039b2 <__retarget_lock_release_recursive>
 80053ba:	e7f3      	b.n	80053a4 <_vfiprintf_r+0x44>
 80053bc:	2300      	movs	r3, #0
 80053be:	9309      	str	r3, [sp, #36]	; 0x24
 80053c0:	2320      	movs	r3, #32
 80053c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053c6:	2330      	movs	r3, #48	; 0x30
 80053c8:	f04f 0901 	mov.w	r9, #1
 80053cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005580 <_vfiprintf_r+0x220>
 80053d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053d8:	4623      	mov	r3, r4
 80053da:	469a      	mov	sl, r3
 80053dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e0:	b10a      	cbz	r2, 80053e6 <_vfiprintf_r+0x86>
 80053e2:	2a25      	cmp	r2, #37	; 0x25
 80053e4:	d1f9      	bne.n	80053da <_vfiprintf_r+0x7a>
 80053e6:	ebba 0b04 	subs.w	fp, sl, r4
 80053ea:	d00b      	beq.n	8005404 <_vfiprintf_r+0xa4>
 80053ec:	465b      	mov	r3, fp
 80053ee:	4622      	mov	r2, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7ff ffa1 	bl	800533a <__sfputs_r>
 80053f8:	3001      	adds	r0, #1
 80053fa:	f000 80a9 	beq.w	8005550 <_vfiprintf_r+0x1f0>
 80053fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005400:	445a      	add	r2, fp
 8005402:	9209      	str	r2, [sp, #36]	; 0x24
 8005404:	f89a 3000 	ldrb.w	r3, [sl]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80a1 	beq.w	8005550 <_vfiprintf_r+0x1f0>
 800540e:	2300      	movs	r3, #0
 8005410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005418:	f10a 0a01 	add.w	sl, sl, #1
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	9307      	str	r3, [sp, #28]
 8005420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005424:	931a      	str	r3, [sp, #104]	; 0x68
 8005426:	4654      	mov	r4, sl
 8005428:	2205      	movs	r2, #5
 800542a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542e:	4854      	ldr	r0, [pc, #336]	; (8005580 <_vfiprintf_r+0x220>)
 8005430:	f7fe fac0 	bl	80039b4 <memchr>
 8005434:	9a04      	ldr	r2, [sp, #16]
 8005436:	b9d8      	cbnz	r0, 8005470 <_vfiprintf_r+0x110>
 8005438:	06d1      	lsls	r1, r2, #27
 800543a:	bf44      	itt	mi
 800543c:	2320      	movmi	r3, #32
 800543e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005442:	0713      	lsls	r3, r2, #28
 8005444:	bf44      	itt	mi
 8005446:	232b      	movmi	r3, #43	; 0x2b
 8005448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800544c:	f89a 3000 	ldrb.w	r3, [sl]
 8005450:	2b2a      	cmp	r3, #42	; 0x2a
 8005452:	d015      	beq.n	8005480 <_vfiprintf_r+0x120>
 8005454:	4654      	mov	r4, sl
 8005456:	2000      	movs	r0, #0
 8005458:	f04f 0c0a 	mov.w	ip, #10
 800545c:	9a07      	ldr	r2, [sp, #28]
 800545e:	4621      	mov	r1, r4
 8005460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005464:	3b30      	subs	r3, #48	; 0x30
 8005466:	2b09      	cmp	r3, #9
 8005468:	d94d      	bls.n	8005506 <_vfiprintf_r+0x1a6>
 800546a:	b1b0      	cbz	r0, 800549a <_vfiprintf_r+0x13a>
 800546c:	9207      	str	r2, [sp, #28]
 800546e:	e014      	b.n	800549a <_vfiprintf_r+0x13a>
 8005470:	eba0 0308 	sub.w	r3, r0, r8
 8005474:	fa09 f303 	lsl.w	r3, r9, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	46a2      	mov	sl, r4
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	e7d2      	b.n	8005426 <_vfiprintf_r+0xc6>
 8005480:	9b03      	ldr	r3, [sp, #12]
 8005482:	1d19      	adds	r1, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	9103      	str	r1, [sp, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	bfbb      	ittet	lt
 800548c:	425b      	neglt	r3, r3
 800548e:	f042 0202 	orrlt.w	r2, r2, #2
 8005492:	9307      	strge	r3, [sp, #28]
 8005494:	9307      	strlt	r3, [sp, #28]
 8005496:	bfb8      	it	lt
 8005498:	9204      	strlt	r2, [sp, #16]
 800549a:	7823      	ldrb	r3, [r4, #0]
 800549c:	2b2e      	cmp	r3, #46	; 0x2e
 800549e:	d10c      	bne.n	80054ba <_vfiprintf_r+0x15a>
 80054a0:	7863      	ldrb	r3, [r4, #1]
 80054a2:	2b2a      	cmp	r3, #42	; 0x2a
 80054a4:	d134      	bne.n	8005510 <_vfiprintf_r+0x1b0>
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	3402      	adds	r4, #2
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	9203      	str	r2, [sp, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bfb8      	it	lt
 80054b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005584 <_vfiprintf_r+0x224>
 80054be:	2203      	movs	r2, #3
 80054c0:	4650      	mov	r0, sl
 80054c2:	7821      	ldrb	r1, [r4, #0]
 80054c4:	f7fe fa76 	bl	80039b4 <memchr>
 80054c8:	b138      	cbz	r0, 80054da <_vfiprintf_r+0x17a>
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	eba0 000a 	sub.w	r0, r0, sl
 80054d2:	4082      	lsls	r2, r0
 80054d4:	4313      	orrs	r3, r2
 80054d6:	3401      	adds	r4, #1
 80054d8:	9304      	str	r3, [sp, #16]
 80054da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054de:	2206      	movs	r2, #6
 80054e0:	4829      	ldr	r0, [pc, #164]	; (8005588 <_vfiprintf_r+0x228>)
 80054e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054e6:	f7fe fa65 	bl	80039b4 <memchr>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d03f      	beq.n	800556e <_vfiprintf_r+0x20e>
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <_vfiprintf_r+0x22c>)
 80054f0:	bb1b      	cbnz	r3, 800553a <_vfiprintf_r+0x1da>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	3307      	adds	r3, #7
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	3308      	adds	r3, #8
 80054fc:	9303      	str	r3, [sp, #12]
 80054fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005500:	443b      	add	r3, r7
 8005502:	9309      	str	r3, [sp, #36]	; 0x24
 8005504:	e768      	b.n	80053d8 <_vfiprintf_r+0x78>
 8005506:	460c      	mov	r4, r1
 8005508:	2001      	movs	r0, #1
 800550a:	fb0c 3202 	mla	r2, ip, r2, r3
 800550e:	e7a6      	b.n	800545e <_vfiprintf_r+0xfe>
 8005510:	2300      	movs	r3, #0
 8005512:	f04f 0c0a 	mov.w	ip, #10
 8005516:	4619      	mov	r1, r3
 8005518:	3401      	adds	r4, #1
 800551a:	9305      	str	r3, [sp, #20]
 800551c:	4620      	mov	r0, r4
 800551e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005522:	3a30      	subs	r2, #48	; 0x30
 8005524:	2a09      	cmp	r2, #9
 8005526:	d903      	bls.n	8005530 <_vfiprintf_r+0x1d0>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0c6      	beq.n	80054ba <_vfiprintf_r+0x15a>
 800552c:	9105      	str	r1, [sp, #20]
 800552e:	e7c4      	b.n	80054ba <_vfiprintf_r+0x15a>
 8005530:	4604      	mov	r4, r0
 8005532:	2301      	movs	r3, #1
 8005534:	fb0c 2101 	mla	r1, ip, r1, r2
 8005538:	e7f0      	b.n	800551c <_vfiprintf_r+0x1bc>
 800553a:	ab03      	add	r3, sp, #12
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	462a      	mov	r2, r5
 8005540:	4630      	mov	r0, r6
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <_vfiprintf_r+0x230>)
 8005544:	a904      	add	r1, sp, #16
 8005546:	f7fd fd8b 	bl	8003060 <_printf_float>
 800554a:	4607      	mov	r7, r0
 800554c:	1c78      	adds	r0, r7, #1
 800554e:	d1d6      	bne.n	80054fe <_vfiprintf_r+0x19e>
 8005550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005552:	07d9      	lsls	r1, r3, #31
 8005554:	d405      	bmi.n	8005562 <_vfiprintf_r+0x202>
 8005556:	89ab      	ldrh	r3, [r5, #12]
 8005558:	059a      	lsls	r2, r3, #22
 800555a:	d402      	bmi.n	8005562 <_vfiprintf_r+0x202>
 800555c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800555e:	f7fe fa28 	bl	80039b2 <__retarget_lock_release_recursive>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	065b      	lsls	r3, r3, #25
 8005566:	f53f af1d 	bmi.w	80053a4 <_vfiprintf_r+0x44>
 800556a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800556c:	e71c      	b.n	80053a8 <_vfiprintf_r+0x48>
 800556e:	ab03      	add	r3, sp, #12
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	462a      	mov	r2, r5
 8005574:	4630      	mov	r0, r6
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <_vfiprintf_r+0x230>)
 8005578:	a904      	add	r1, sp, #16
 800557a:	f7fe f811 	bl	80035a0 <_printf_i>
 800557e:	e7e4      	b.n	800554a <_vfiprintf_r+0x1ea>
 8005580:	080073ab 	.word	0x080073ab
 8005584:	080073b1 	.word	0x080073b1
 8005588:	080073b5 	.word	0x080073b5
 800558c:	08003061 	.word	0x08003061
 8005590:	0800533b 	.word	0x0800533b

08005594 <__swbuf_r>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	460e      	mov	r6, r1
 8005598:	4614      	mov	r4, r2
 800559a:	4605      	mov	r5, r0
 800559c:	b118      	cbz	r0, 80055a6 <__swbuf_r+0x12>
 800559e:	6a03      	ldr	r3, [r0, #32]
 80055a0:	b90b      	cbnz	r3, 80055a6 <__swbuf_r+0x12>
 80055a2:	f7fe f999 	bl	80038d8 <__sinit>
 80055a6:	69a3      	ldr	r3, [r4, #24]
 80055a8:	60a3      	str	r3, [r4, #8]
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	071a      	lsls	r2, r3, #28
 80055ae:	d525      	bpl.n	80055fc <__swbuf_r+0x68>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	b31b      	cbz	r3, 80055fc <__swbuf_r+0x68>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	6922      	ldr	r2, [r4, #16]
 80055b8:	b2f6      	uxtb	r6, r6
 80055ba:	1a98      	subs	r0, r3, r2
 80055bc:	6963      	ldr	r3, [r4, #20]
 80055be:	4637      	mov	r7, r6
 80055c0:	4283      	cmp	r3, r0
 80055c2:	dc04      	bgt.n	80055ce <__swbuf_r+0x3a>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7ff f99c 	bl	8004904 <_fflush_r>
 80055cc:	b9e0      	cbnz	r0, 8005608 <__swbuf_r+0x74>
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6022      	str	r2, [r4, #0]
 80055da:	701e      	strb	r6, [r3, #0]
 80055dc:	6962      	ldr	r2, [r4, #20]
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d004      	beq.n	80055ee <__swbuf_r+0x5a>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	07db      	lsls	r3, r3, #31
 80055e8:	d506      	bpl.n	80055f8 <__swbuf_r+0x64>
 80055ea:	2e0a      	cmp	r6, #10
 80055ec:	d104      	bne.n	80055f8 <__swbuf_r+0x64>
 80055ee:	4621      	mov	r1, r4
 80055f0:	4628      	mov	r0, r5
 80055f2:	f7ff f987 	bl	8004904 <_fflush_r>
 80055f6:	b938      	cbnz	r0, 8005608 <__swbuf_r+0x74>
 80055f8:	4638      	mov	r0, r7
 80055fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055fc:	4621      	mov	r1, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 f806 	bl	8005610 <__swsetup_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	d0d5      	beq.n	80055b4 <__swbuf_r+0x20>
 8005608:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800560c:	e7f4      	b.n	80055f8 <__swbuf_r+0x64>
	...

08005610 <__swsetup_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <__swsetup_r+0xac>)
 8005614:	4605      	mov	r5, r0
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	460c      	mov	r4, r1
 800561a:	b118      	cbz	r0, 8005624 <__swsetup_r+0x14>
 800561c:	6a03      	ldr	r3, [r0, #32]
 800561e:	b90b      	cbnz	r3, 8005624 <__swsetup_r+0x14>
 8005620:	f7fe f95a 	bl	80038d8 <__sinit>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800562a:	0718      	lsls	r0, r3, #28
 800562c:	d422      	bmi.n	8005674 <__swsetup_r+0x64>
 800562e:	06d9      	lsls	r1, r3, #27
 8005630:	d407      	bmi.n	8005642 <__swsetup_r+0x32>
 8005632:	2309      	movs	r3, #9
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800563a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	e034      	b.n	80056ac <__swsetup_r+0x9c>
 8005642:	0758      	lsls	r0, r3, #29
 8005644:	d512      	bpl.n	800566c <__swsetup_r+0x5c>
 8005646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005648:	b141      	cbz	r1, 800565c <__swsetup_r+0x4c>
 800564a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800564e:	4299      	cmp	r1, r3
 8005650:	d002      	beq.n	8005658 <__swsetup_r+0x48>
 8005652:	4628      	mov	r0, r5
 8005654:	f7ff fddc 	bl	8005210 <_free_r>
 8005658:	2300      	movs	r3, #0
 800565a:	6363      	str	r3, [r4, #52]	; 0x34
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	2300      	movs	r3, #0
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f043 0308 	orr.w	r3, r3, #8
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	b94b      	cbnz	r3, 800568c <__swsetup_r+0x7c>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800567e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005682:	d003      	beq.n	800568c <__swsetup_r+0x7c>
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f83f 	bl	800570a <__smakebuf_r>
 800568c:	89a0      	ldrh	r0, [r4, #12]
 800568e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005692:	f010 0301 	ands.w	r3, r0, #1
 8005696:	d00a      	beq.n	80056ae <__swsetup_r+0x9e>
 8005698:	2300      	movs	r3, #0
 800569a:	60a3      	str	r3, [r4, #8]
 800569c:	6963      	ldr	r3, [r4, #20]
 800569e:	425b      	negs	r3, r3
 80056a0:	61a3      	str	r3, [r4, #24]
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	b943      	cbnz	r3, 80056b8 <__swsetup_r+0xa8>
 80056a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056aa:	d1c4      	bne.n	8005636 <__swsetup_r+0x26>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	0781      	lsls	r1, r0, #30
 80056b0:	bf58      	it	pl
 80056b2:	6963      	ldrpl	r3, [r4, #20]
 80056b4:	60a3      	str	r3, [r4, #8]
 80056b6:	e7f4      	b.n	80056a2 <__swsetup_r+0x92>
 80056b8:	2000      	movs	r0, #0
 80056ba:	e7f7      	b.n	80056ac <__swsetup_r+0x9c>
 80056bc:	20000060 	.word	0x20000060

080056c0 <__swhatbuf_r>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	460c      	mov	r4, r1
 80056c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c8:	4615      	mov	r5, r2
 80056ca:	2900      	cmp	r1, #0
 80056cc:	461e      	mov	r6, r3
 80056ce:	b096      	sub	sp, #88	; 0x58
 80056d0:	da0c      	bge.n	80056ec <__swhatbuf_r+0x2c>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	2100      	movs	r1, #0
 80056d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056da:	bf0c      	ite	eq
 80056dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80056e0:	2340      	movne	r3, #64	; 0x40
 80056e2:	2000      	movs	r0, #0
 80056e4:	6031      	str	r1, [r6, #0]
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	b016      	add	sp, #88	; 0x58
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	466a      	mov	r2, sp
 80056ee:	f000 f849 	bl	8005784 <_fstat_r>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	dbed      	blt.n	80056d2 <__swhatbuf_r+0x12>
 80056f6:	9901      	ldr	r1, [sp, #4]
 80056f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80056fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005700:	4259      	negs	r1, r3
 8005702:	4159      	adcs	r1, r3
 8005704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005708:	e7eb      	b.n	80056e2 <__swhatbuf_r+0x22>

0800570a <__smakebuf_r>:
 800570a:	898b      	ldrh	r3, [r1, #12]
 800570c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800570e:	079d      	lsls	r5, r3, #30
 8005710:	4606      	mov	r6, r0
 8005712:	460c      	mov	r4, r1
 8005714:	d507      	bpl.n	8005726 <__smakebuf_r+0x1c>
 8005716:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	2301      	movs	r3, #1
 8005720:	6163      	str	r3, [r4, #20]
 8005722:	b002      	add	sp, #8
 8005724:	bd70      	pop	{r4, r5, r6, pc}
 8005726:	466a      	mov	r2, sp
 8005728:	ab01      	add	r3, sp, #4
 800572a:	f7ff ffc9 	bl	80056c0 <__swhatbuf_r>
 800572e:	9900      	ldr	r1, [sp, #0]
 8005730:	4605      	mov	r5, r0
 8005732:	4630      	mov	r0, r6
 8005734:	f7fe ffe4 	bl	8004700 <_malloc_r>
 8005738:	b948      	cbnz	r0, 800574e <__smakebuf_r+0x44>
 800573a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573e:	059a      	lsls	r2, r3, #22
 8005740:	d4ef      	bmi.n	8005722 <__smakebuf_r+0x18>
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	81a3      	strh	r3, [r4, #12]
 800574c:	e7e3      	b.n	8005716 <__smakebuf_r+0xc>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	6020      	str	r0, [r4, #0]
 8005752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	9b00      	ldr	r3, [sp, #0]
 800575a:	6120      	str	r0, [r4, #16]
 800575c:	6163      	str	r3, [r4, #20]
 800575e:	9b01      	ldr	r3, [sp, #4]
 8005760:	b15b      	cbz	r3, 800577a <__smakebuf_r+0x70>
 8005762:	4630      	mov	r0, r6
 8005764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005768:	f000 f81e 	bl	80057a8 <_isatty_r>
 800576c:	b128      	cbz	r0, 800577a <__smakebuf_r+0x70>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	431d      	orrs	r5, r3
 800577e:	81a5      	strh	r5, [r4, #12]
 8005780:	e7cf      	b.n	8005722 <__smakebuf_r+0x18>
	...

08005784 <_fstat_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	2300      	movs	r3, #0
 8005788:	4d06      	ldr	r5, [pc, #24]	; (80057a4 <_fstat_r+0x20>)
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	4611      	mov	r1, r2
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f7fd f972 	bl	8002a7a <_fstat>
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	d102      	bne.n	80057a0 <_fstat_r+0x1c>
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	b103      	cbz	r3, 80057a0 <_fstat_r+0x1c>
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	200003f0 	.word	0x200003f0

080057a8 <_isatty_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	2300      	movs	r3, #0
 80057ac:	4d05      	ldr	r5, [pc, #20]	; (80057c4 <_isatty_r+0x1c>)
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fd f970 	bl	8002a98 <_isatty>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_isatty_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_isatty_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	200003f0 	.word	0x200003f0

080057c8 <_raise_r>:
 80057c8:	291f      	cmp	r1, #31
 80057ca:	b538      	push	{r3, r4, r5, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	460d      	mov	r5, r1
 80057d0:	d904      	bls.n	80057dc <_raise_r+0x14>
 80057d2:	2316      	movs	r3, #22
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057de:	b112      	cbz	r2, 80057e6 <_raise_r+0x1e>
 80057e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057e4:	b94b      	cbnz	r3, 80057fa <_raise_r+0x32>
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 f830 	bl	800584c <_getpid_r>
 80057ec:	462a      	mov	r2, r5
 80057ee:	4601      	mov	r1, r0
 80057f0:	4620      	mov	r0, r4
 80057f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057f6:	f000 b817 	b.w	8005828 <_kill_r>
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d00a      	beq.n	8005814 <_raise_r+0x4c>
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	d103      	bne.n	800580a <_raise_r+0x42>
 8005802:	2316      	movs	r3, #22
 8005804:	6003      	str	r3, [r0, #0]
 8005806:	2001      	movs	r0, #1
 8005808:	e7e7      	b.n	80057da <_raise_r+0x12>
 800580a:	2400      	movs	r4, #0
 800580c:	4628      	mov	r0, r5
 800580e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005812:	4798      	blx	r3
 8005814:	2000      	movs	r0, #0
 8005816:	e7e0      	b.n	80057da <_raise_r+0x12>

08005818 <raise>:
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <raise+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f7ff bfd3 	b.w	80057c8 <_raise_r>
 8005822:	bf00      	nop
 8005824:	20000060 	.word	0x20000060

08005828 <_kill_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	2300      	movs	r3, #0
 800582c:	4d06      	ldr	r5, [pc, #24]	; (8005848 <_kill_r+0x20>)
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	4611      	mov	r1, r2
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	f7fd f8de 	bl	80029f6 <_kill>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	d102      	bne.n	8005844 <_kill_r+0x1c>
 800583e:	682b      	ldr	r3, [r5, #0]
 8005840:	b103      	cbz	r3, 8005844 <_kill_r+0x1c>
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	bd38      	pop	{r3, r4, r5, pc}
 8005846:	bf00      	nop
 8005848:	200003f0 	.word	0x200003f0

0800584c <_getpid_r>:
 800584c:	f7fd b8cc 	b.w	80029e8 <_getpid>

08005850 <pow>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	4614      	mov	r4, r2
 8005856:	461d      	mov	r5, r3
 8005858:	4680      	mov	r8, r0
 800585a:	4689      	mov	r9, r1
 800585c:	f000 f9e4 	bl	8005c28 <__ieee754_pow>
 8005860:	4622      	mov	r2, r4
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	462b      	mov	r3, r5
 8005868:	4620      	mov	r0, r4
 800586a:	4629      	mov	r1, r5
 800586c:	f7fb f8de 	bl	8000a2c <__aeabi_dcmpun>
 8005870:	bbc8      	cbnz	r0, 80058e6 <pow+0x96>
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	4640      	mov	r0, r8
 8005878:	4649      	mov	r1, r9
 800587a:	f7fb f8a5 	bl	80009c8 <__aeabi_dcmpeq>
 800587e:	b1b8      	cbz	r0, 80058b0 <pow+0x60>
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	4620      	mov	r0, r4
 8005886:	4629      	mov	r1, r5
 8005888:	f7fb f89e 	bl	80009c8 <__aeabi_dcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d141      	bne.n	8005914 <pow+0xc4>
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f000 f868 	bl	8005968 <finite>
 8005898:	b328      	cbz	r0, 80058e6 <pow+0x96>
 800589a:	2200      	movs	r2, #0
 800589c:	2300      	movs	r3, #0
 800589e:	4620      	mov	r0, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fb f89b 	bl	80009dc <__aeabi_dcmplt>
 80058a6:	b1f0      	cbz	r0, 80058e6 <pow+0x96>
 80058a8:	f7fe f858 	bl	800395c <__errno>
 80058ac:	2322      	movs	r3, #34	; 0x22
 80058ae:	e019      	b.n	80058e4 <pow+0x94>
 80058b0:	4630      	mov	r0, r6
 80058b2:	4639      	mov	r1, r7
 80058b4:	f000 f858 	bl	8005968 <finite>
 80058b8:	b9c8      	cbnz	r0, 80058ee <pow+0x9e>
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f000 f853 	bl	8005968 <finite>
 80058c2:	b1a0      	cbz	r0, 80058ee <pow+0x9e>
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f000 f84e 	bl	8005968 <finite>
 80058cc:	b178      	cbz	r0, 80058ee <pow+0x9e>
 80058ce:	4632      	mov	r2, r6
 80058d0:	463b      	mov	r3, r7
 80058d2:	4630      	mov	r0, r6
 80058d4:	4639      	mov	r1, r7
 80058d6:	f7fb f8a9 	bl	8000a2c <__aeabi_dcmpun>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d0e4      	beq.n	80058a8 <pow+0x58>
 80058de:	f7fe f83d 	bl	800395c <__errno>
 80058e2:	2321      	movs	r3, #33	; 0x21
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ee:	2200      	movs	r2, #0
 80058f0:	2300      	movs	r3, #0
 80058f2:	4630      	mov	r0, r6
 80058f4:	4639      	mov	r1, r7
 80058f6:	f7fb f867 	bl	80009c8 <__aeabi_dcmpeq>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0f3      	beq.n	80058e6 <pow+0x96>
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f000 f831 	bl	8005968 <finite>
 8005906:	2800      	cmp	r0, #0
 8005908:	d0ed      	beq.n	80058e6 <pow+0x96>
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f000 f82b 	bl	8005968 <finite>
 8005912:	e7c8      	b.n	80058a6 <pow+0x56>
 8005914:	2600      	movs	r6, #0
 8005916:	4f01      	ldr	r7, [pc, #4]	; (800591c <pow+0xcc>)
 8005918:	e7e5      	b.n	80058e6 <pow+0x96>
 800591a:	bf00      	nop
 800591c:	3ff00000 	.word	0x3ff00000

08005920 <sqrt>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	4606      	mov	r6, r0
 8005924:	460f      	mov	r7, r1
 8005926:	f000 f825 	bl	8005974 <__ieee754_sqrt>
 800592a:	4632      	mov	r2, r6
 800592c:	4604      	mov	r4, r0
 800592e:	460d      	mov	r5, r1
 8005930:	463b      	mov	r3, r7
 8005932:	4630      	mov	r0, r6
 8005934:	4639      	mov	r1, r7
 8005936:	f7fb f879 	bl	8000a2c <__aeabi_dcmpun>
 800593a:	b990      	cbnz	r0, 8005962 <sqrt+0x42>
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fb f84a 	bl	80009dc <__aeabi_dcmplt>
 8005948:	b158      	cbz	r0, 8005962 <sqrt+0x42>
 800594a:	f7fe f807 	bl	800395c <__errno>
 800594e:	2321      	movs	r3, #33	; 0x21
 8005950:	2200      	movs	r2, #0
 8005952:	6003      	str	r3, [r0, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	f7fa fef7 	bl	800074c <__aeabi_ddiv>
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005968 <finite>:
 8005968:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800596c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005970:	0fc0      	lsrs	r0, r0, #31
 8005972:	4770      	bx	lr

08005974 <__ieee754_sqrt>:
 8005974:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005b18 <__ieee754_sqrt+0x1a4>
 8005978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005980:	460b      	mov	r3, r1
 8005982:	4606      	mov	r6, r0
 8005984:	460d      	mov	r5, r1
 8005986:	460a      	mov	r2, r1
 8005988:	4604      	mov	r4, r0
 800598a:	d10e      	bne.n	80059aa <__ieee754_sqrt+0x36>
 800598c:	4602      	mov	r2, r0
 800598e:	f7fa fdb3 	bl	80004f8 <__aeabi_dmul>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4630      	mov	r0, r6
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fbf7 	bl	800018c <__adddf3>
 800599e:	4606      	mov	r6, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	4630      	mov	r0, r6
 80059a4:	4629      	mov	r1, r5
 80059a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	2900      	cmp	r1, #0
 80059ac:	dc0d      	bgt.n	80059ca <__ieee754_sqrt+0x56>
 80059ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80059b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80059b6:	d0f4      	beq.n	80059a2 <__ieee754_sqrt+0x2e>
 80059b8:	b139      	cbz	r1, 80059ca <__ieee754_sqrt+0x56>
 80059ba:	4602      	mov	r2, r0
 80059bc:	f7fa fbe4 	bl	8000188 <__aeabi_dsub>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	f7fa fec2 	bl	800074c <__aeabi_ddiv>
 80059c8:	e7e9      	b.n	800599e <__ieee754_sqrt+0x2a>
 80059ca:	1512      	asrs	r2, r2, #20
 80059cc:	f000 8089 	beq.w	8005ae2 <__ieee754_sqrt+0x16e>
 80059d0:	2500      	movs	r5, #0
 80059d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059de:	07d2      	lsls	r2, r2, #31
 80059e0:	bf5c      	itt	pl
 80059e2:	005b      	lslpl	r3, r3, #1
 80059e4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80059e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059ec:	bf58      	it	pl
 80059ee:	0064      	lslpl	r4, r4, #1
 80059f0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80059f4:	0062      	lsls	r2, r4, #1
 80059f6:	2016      	movs	r0, #22
 80059f8:	4629      	mov	r1, r5
 80059fa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80059fe:	1076      	asrs	r6, r6, #1
 8005a00:	190f      	adds	r7, r1, r4
 8005a02:	429f      	cmp	r7, r3
 8005a04:	bfde      	ittt	le
 8005a06:	1bdb      	suble	r3, r3, r7
 8005a08:	1939      	addle	r1, r7, r4
 8005a0a:	192d      	addle	r5, r5, r4
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	3801      	subs	r0, #1
 8005a10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005a14:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005a18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005a1c:	d1f0      	bne.n	8005a00 <__ieee754_sqrt+0x8c>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	2720      	movs	r7, #32
 8005a22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005a26:	428b      	cmp	r3, r1
 8005a28:	eb0c 0e00 	add.w	lr, ip, r0
 8005a2c:	dc02      	bgt.n	8005a34 <__ieee754_sqrt+0xc0>
 8005a2e:	d113      	bne.n	8005a58 <__ieee754_sqrt+0xe4>
 8005a30:	4596      	cmp	lr, r2
 8005a32:	d811      	bhi.n	8005a58 <__ieee754_sqrt+0xe4>
 8005a34:	f1be 0f00 	cmp.w	lr, #0
 8005a38:	eb0e 000c 	add.w	r0, lr, ip
 8005a3c:	da56      	bge.n	8005aec <__ieee754_sqrt+0x178>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	db54      	blt.n	8005aec <__ieee754_sqrt+0x178>
 8005a42:	f101 0801 	add.w	r8, r1, #1
 8005a46:	1a5b      	subs	r3, r3, r1
 8005a48:	4641      	mov	r1, r8
 8005a4a:	4596      	cmp	lr, r2
 8005a4c:	bf88      	it	hi
 8005a4e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8005a52:	eba2 020e 	sub.w	r2, r2, lr
 8005a56:	4464      	add	r4, ip
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	3f01      	subs	r7, #1
 8005a5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005a60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005a64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005a68:	d1dd      	bne.n	8005a26 <__ieee754_sqrt+0xb2>
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	d01b      	beq.n	8005aa6 <__ieee754_sqrt+0x132>
 8005a6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005b1c <__ieee754_sqrt+0x1a8>
 8005a72:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005b20 <__ieee754_sqrt+0x1ac>
 8005a76:	e9da 0100 	ldrd	r0, r1, [sl]
 8005a7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8005a7e:	f7fa fb83 	bl	8000188 <__aeabi_dsub>
 8005a82:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	f7fa ffaf 	bl	80009f0 <__aeabi_dcmple>
 8005a92:	b140      	cbz	r0, 8005aa6 <__ieee754_sqrt+0x132>
 8005a94:	e9da 0100 	ldrd	r0, r1, [sl]
 8005a98:	e9db 2300 	ldrd	r2, r3, [fp]
 8005a9c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005aa0:	d126      	bne.n	8005af0 <__ieee754_sqrt+0x17c>
 8005aa2:	463c      	mov	r4, r7
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	106b      	asrs	r3, r5, #1
 8005aa8:	0864      	lsrs	r4, r4, #1
 8005aaa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005aae:	07ea      	lsls	r2, r5, #31
 8005ab0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ab4:	bf48      	it	mi
 8005ab6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8005aba:	4620      	mov	r0, r4
 8005abc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005ac0:	e76d      	b.n	800599e <__ieee754_sqrt+0x2a>
 8005ac2:	0ae3      	lsrs	r3, r4, #11
 8005ac4:	3915      	subs	r1, #21
 8005ac6:	0564      	lsls	r4, r4, #21
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0fa      	beq.n	8005ac2 <__ieee754_sqrt+0x14e>
 8005acc:	02d8      	lsls	r0, r3, #11
 8005ace:	d50a      	bpl.n	8005ae6 <__ieee754_sqrt+0x172>
 8005ad0:	f1c2 0020 	rsb	r0, r2, #32
 8005ad4:	fa24 f000 	lsr.w	r0, r4, r0
 8005ad8:	1e55      	subs	r5, r2, #1
 8005ada:	4094      	lsls	r4, r2
 8005adc:	4303      	orrs	r3, r0
 8005ade:	1b4a      	subs	r2, r1, r5
 8005ae0:	e776      	b.n	80059d0 <__ieee754_sqrt+0x5c>
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	e7f0      	b.n	8005ac8 <__ieee754_sqrt+0x154>
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	3201      	adds	r2, #1
 8005aea:	e7ef      	b.n	8005acc <__ieee754_sqrt+0x158>
 8005aec:	4688      	mov	r8, r1
 8005aee:	e7aa      	b.n	8005a46 <__ieee754_sqrt+0xd2>
 8005af0:	f7fa fb4c 	bl	800018c <__adddf3>
 8005af4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa ff6c 	bl	80009dc <__aeabi_dcmplt>
 8005b04:	b120      	cbz	r0, 8005b10 <__ieee754_sqrt+0x19c>
 8005b06:	1ca1      	adds	r1, r4, #2
 8005b08:	bf08      	it	eq
 8005b0a:	3501      	addeq	r5, #1
 8005b0c:	3402      	adds	r4, #2
 8005b0e:	e7ca      	b.n	8005aa6 <__ieee754_sqrt+0x132>
 8005b10:	3401      	adds	r4, #1
 8005b12:	f024 0401 	bic.w	r4, r4, #1
 8005b16:	e7c6      	b.n	8005aa6 <__ieee754_sqrt+0x132>
 8005b18:	7ff00000 	.word	0x7ff00000
 8005b1c:	200001d0 	.word	0x200001d0
 8005b20:	200001d8 	.word	0x200001d8
 8005b24:	00000000 	.word	0x00000000

08005b28 <floor>:
 8005b28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005b34:	2e13      	cmp	r6, #19
 8005b36:	460b      	mov	r3, r1
 8005b38:	4607      	mov	r7, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	dc32      	bgt.n	8005ba6 <floor+0x7e>
 8005b40:	2e00      	cmp	r6, #0
 8005b42:	da14      	bge.n	8005b6e <floor+0x46>
 8005b44:	a334      	add	r3, pc, #208	; (adr r3, 8005c18 <floor+0xf0>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fb1f 	bl	800018c <__adddf3>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	f7fa ff61 	bl	8000a18 <__aeabi_dcmpgt>
 8005b56:	b138      	cbz	r0, 8005b68 <floor+0x40>
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	da56      	bge.n	8005c0a <floor+0xe2>
 8005b5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005b60:	4325      	orrs	r5, r4
 8005b62:	d055      	beq.n	8005c10 <floor+0xe8>
 8005b64:	2500      	movs	r5, #0
 8005b66:	4c2e      	ldr	r4, [pc, #184]	; (8005c20 <floor+0xf8>)
 8005b68:	4623      	mov	r3, r4
 8005b6a:	462f      	mov	r7, r5
 8005b6c:	e025      	b.n	8005bba <floor+0x92>
 8005b6e:	4a2d      	ldr	r2, [pc, #180]	; (8005c24 <floor+0xfc>)
 8005b70:	fa42 f806 	asr.w	r8, r2, r6
 8005b74:	ea01 0208 	and.w	r2, r1, r8
 8005b78:	4302      	orrs	r2, r0
 8005b7a:	d01e      	beq.n	8005bba <floor+0x92>
 8005b7c:	a326      	add	r3, pc, #152	; (adr r3, 8005c18 <floor+0xf0>)
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f7fa fb03 	bl	800018c <__adddf3>
 8005b86:	2200      	movs	r2, #0
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f7fa ff45 	bl	8000a18 <__aeabi_dcmpgt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d0ea      	beq.n	8005b68 <floor+0x40>
 8005b92:	2c00      	cmp	r4, #0
 8005b94:	bfbe      	ittt	lt
 8005b96:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b9a:	4133      	asrlt	r3, r6
 8005b9c:	18e4      	addlt	r4, r4, r3
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	ea24 0408 	bic.w	r4, r4, r8
 8005ba4:	e7e0      	b.n	8005b68 <floor+0x40>
 8005ba6:	2e33      	cmp	r6, #51	; 0x33
 8005ba8:	dd0b      	ble.n	8005bc2 <floor+0x9a>
 8005baa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005bae:	d104      	bne.n	8005bba <floor+0x92>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	f7fa faeb 	bl	800018c <__adddf3>
 8005bb6:	4607      	mov	r7, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4638      	mov	r0, r7
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005bc6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005bca:	fa28 f802 	lsr.w	r8, r8, r2
 8005bce:	ea10 0f08 	tst.w	r0, r8
 8005bd2:	d0f2      	beq.n	8005bba <floor+0x92>
 8005bd4:	a310      	add	r3, pc, #64	; (adr r3, 8005c18 <floor+0xf0>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fad7 	bl	800018c <__adddf3>
 8005bde:	2200      	movs	r2, #0
 8005be0:	2300      	movs	r3, #0
 8005be2:	f7fa ff19 	bl	8000a18 <__aeabi_dcmpgt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0be      	beq.n	8005b68 <floor+0x40>
 8005bea:	2c00      	cmp	r4, #0
 8005bec:	da0a      	bge.n	8005c04 <floor+0xdc>
 8005bee:	2e14      	cmp	r6, #20
 8005bf0:	d101      	bne.n	8005bf6 <floor+0xce>
 8005bf2:	3401      	adds	r4, #1
 8005bf4:	e006      	b.n	8005c04 <floor+0xdc>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005bfc:	40b3      	lsls	r3, r6
 8005bfe:	441d      	add	r5, r3
 8005c00:	42af      	cmp	r7, r5
 8005c02:	d8f6      	bhi.n	8005bf2 <floor+0xca>
 8005c04:	ea25 0508 	bic.w	r5, r5, r8
 8005c08:	e7ae      	b.n	8005b68 <floor+0x40>
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	462c      	mov	r4, r5
 8005c0e:	e7ab      	b.n	8005b68 <floor+0x40>
 8005c10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005c14:	e7a8      	b.n	8005b68 <floor+0x40>
 8005c16:	bf00      	nop
 8005c18:	8800759c 	.word	0x8800759c
 8005c1c:	7e37e43c 	.word	0x7e37e43c
 8005c20:	bff00000 	.word	0xbff00000
 8005c24:	000fffff 	.word	0x000fffff

08005c28 <__ieee754_pow>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	b093      	sub	sp, #76	; 0x4c
 8005c2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c32:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005c36:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	ea56 0102 	orrs.w	r1, r6, r2
 8005c40:	4680      	mov	r8, r0
 8005c42:	d111      	bne.n	8005c68 <__ieee754_pow+0x40>
 8005c44:	1803      	adds	r3, r0, r0
 8005c46:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005c4a:	4152      	adcs	r2, r2
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	4b82      	ldr	r3, [pc, #520]	; (8005e58 <__ieee754_pow+0x230>)
 8005c50:	4193      	sbcs	r3, r2
 8005c52:	f080 84ba 	bcs.w	80065ca <__ieee754_pow+0x9a2>
 8005c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fa95 	bl	800018c <__adddf3>
 8005c62:	4683      	mov	fp, r0
 8005c64:	468c      	mov	ip, r1
 8005c66:	e06f      	b.n	8005d48 <__ieee754_pow+0x120>
 8005c68:	4b7c      	ldr	r3, [pc, #496]	; (8005e5c <__ieee754_pow+0x234>)
 8005c6a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005c6e:	429c      	cmp	r4, r3
 8005c70:	464d      	mov	r5, r9
 8005c72:	4682      	mov	sl, r0
 8005c74:	dc06      	bgt.n	8005c84 <__ieee754_pow+0x5c>
 8005c76:	d101      	bne.n	8005c7c <__ieee754_pow+0x54>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d1ec      	bne.n	8005c56 <__ieee754_pow+0x2e>
 8005c7c:	429e      	cmp	r6, r3
 8005c7e:	dc01      	bgt.n	8005c84 <__ieee754_pow+0x5c>
 8005c80:	d10f      	bne.n	8005ca2 <__ieee754_pow+0x7a>
 8005c82:	b172      	cbz	r2, 8005ca2 <__ieee754_pow+0x7a>
 8005c84:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005c88:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005c8c:	ea55 050a 	orrs.w	r5, r5, sl
 8005c90:	d1e1      	bne.n	8005c56 <__ieee754_pow+0x2e>
 8005c92:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005c9c:	4152      	adcs	r2, r2
 8005c9e:	429d      	cmp	r5, r3
 8005ca0:	e7d5      	b.n	8005c4e <__ieee754_pow+0x26>
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	da39      	bge.n	8005d1a <__ieee754_pow+0xf2>
 8005ca6:	4b6e      	ldr	r3, [pc, #440]	; (8005e60 <__ieee754_pow+0x238>)
 8005ca8:	429e      	cmp	r6, r3
 8005caa:	dc52      	bgt.n	8005d52 <__ieee754_pow+0x12a>
 8005cac:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005cb0:	429e      	cmp	r6, r3
 8005cb2:	f340 849d 	ble.w	80065f0 <__ieee754_pow+0x9c8>
 8005cb6:	1533      	asrs	r3, r6, #20
 8005cb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005cbc:	2b14      	cmp	r3, #20
 8005cbe:	dd0f      	ble.n	8005ce0 <__ieee754_pow+0xb8>
 8005cc0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005cc4:	fa22 f103 	lsr.w	r1, r2, r3
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	f040 848f 	bne.w	80065f0 <__ieee754_pow+0x9c8>
 8005cd2:	f001 0101 	and.w	r1, r1, #1
 8005cd6:	f1c1 0302 	rsb	r3, r1, #2
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	b182      	cbz	r2, 8005d00 <__ieee754_pow+0xd8>
 8005cde:	e05d      	b.n	8005d9c <__ieee754_pow+0x174>
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d159      	bne.n	8005d98 <__ieee754_pow+0x170>
 8005ce4:	f1c3 0314 	rsb	r3, r3, #20
 8005ce8:	fa46 f103 	asr.w	r1, r6, r3
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	42b3      	cmp	r3, r6
 8005cf2:	f040 847a 	bne.w	80065ea <__ieee754_pow+0x9c2>
 8005cf6:	f001 0101 	and.w	r1, r1, #1
 8005cfa:	f1c1 0302 	rsb	r3, r1, #2
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	4b58      	ldr	r3, [pc, #352]	; (8005e64 <__ieee754_pow+0x23c>)
 8005d02:	429e      	cmp	r6, r3
 8005d04:	d132      	bne.n	8005d6c <__ieee754_pow+0x144>
 8005d06:	2f00      	cmp	r7, #0
 8005d08:	f280 846b 	bge.w	80065e2 <__ieee754_pow+0x9ba>
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	2000      	movs	r0, #0
 8005d12:	4954      	ldr	r1, [pc, #336]	; (8005e64 <__ieee754_pow+0x23c>)
 8005d14:	f7fa fd1a 	bl	800074c <__aeabi_ddiv>
 8005d18:	e7a3      	b.n	8005c62 <__ieee754_pow+0x3a>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	d13c      	bne.n	8005d9c <__ieee754_pow+0x174>
 8005d22:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <__ieee754_pow+0x234>)
 8005d24:	429e      	cmp	r6, r3
 8005d26:	d1eb      	bne.n	8005d00 <__ieee754_pow+0xd8>
 8005d28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005d2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005d30:	ea53 030a 	orrs.w	r3, r3, sl
 8005d34:	f000 8449 	beq.w	80065ca <__ieee754_pow+0x9a2>
 8005d38:	4b4b      	ldr	r3, [pc, #300]	; (8005e68 <__ieee754_pow+0x240>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	dd0b      	ble.n	8005d56 <__ieee754_pow+0x12e>
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	f2c0 8449 	blt.w	80065d6 <__ieee754_pow+0x9ae>
 8005d44:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005d48:	4658      	mov	r0, fp
 8005d4a:	4661      	mov	r1, ip
 8005d4c:	b013      	add	sp, #76	; 0x4c
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d52:	2302      	movs	r3, #2
 8005d54:	e7e2      	b.n	8005d1c <__ieee754_pow+0xf4>
 8005d56:	2f00      	cmp	r7, #0
 8005d58:	f04f 0b00 	mov.w	fp, #0
 8005d5c:	f04f 0c00 	mov.w	ip, #0
 8005d60:	daf2      	bge.n	8005d48 <__ieee754_pow+0x120>
 8005d62:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005d66:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005d6a:	e7ed      	b.n	8005d48 <__ieee754_pow+0x120>
 8005d6c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005d70:	d106      	bne.n	8005d80 <__ieee754_pow+0x158>
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa fbbd 	bl	80004f8 <__aeabi_dmul>
 8005d7e:	e770      	b.n	8005c62 <__ieee754_pow+0x3a>
 8005d80:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <__ieee754_pow+0x244>)
 8005d82:	429f      	cmp	r7, r3
 8005d84:	d10a      	bne.n	8005d9c <__ieee754_pow+0x174>
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	db08      	blt.n	8005d9c <__ieee754_pow+0x174>
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	b013      	add	sp, #76	; 0x4c
 8005d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	f7ff bdee 	b.w	8005974 <__ieee754_sqrt>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	4649      	mov	r1, r9
 8005da0:	f000 fc84 	bl	80066ac <fabs>
 8005da4:	4683      	mov	fp, r0
 8005da6:	468c      	mov	ip, r1
 8005da8:	f1ba 0f00 	cmp.w	sl, #0
 8005dac:	d128      	bne.n	8005e00 <__ieee754_pow+0x1d8>
 8005dae:	b124      	cbz	r4, 8005dba <__ieee754_pow+0x192>
 8005db0:	4b2c      	ldr	r3, [pc, #176]	; (8005e64 <__ieee754_pow+0x23c>)
 8005db2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d122      	bne.n	8005e00 <__ieee754_pow+0x1d8>
 8005dba:	2f00      	cmp	r7, #0
 8005dbc:	da07      	bge.n	8005dce <__ieee754_pow+0x1a6>
 8005dbe:	465a      	mov	r2, fp
 8005dc0:	4663      	mov	r3, ip
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	4927      	ldr	r1, [pc, #156]	; (8005e64 <__ieee754_pow+0x23c>)
 8005dc6:	f7fa fcc1 	bl	800074c <__aeabi_ddiv>
 8005dca:	4683      	mov	fp, r0
 8005dcc:	468c      	mov	ip, r1
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	daba      	bge.n	8005d48 <__ieee754_pow+0x120>
 8005dd2:	9b00      	ldr	r3, [sp, #0]
 8005dd4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005dd8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ddc:	431c      	orrs	r4, r3
 8005dde:	d108      	bne.n	8005df2 <__ieee754_pow+0x1ca>
 8005de0:	465a      	mov	r2, fp
 8005de2:	4663      	mov	r3, ip
 8005de4:	4658      	mov	r0, fp
 8005de6:	4661      	mov	r1, ip
 8005de8:	f7fa f9ce 	bl	8000188 <__aeabi_dsub>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	e790      	b.n	8005d14 <__ieee754_pow+0xec>
 8005df2:	9b00      	ldr	r3, [sp, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d1a7      	bne.n	8005d48 <__ieee754_pow+0x120>
 8005df8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005dfc:	469c      	mov	ip, r3
 8005dfe:	e7a3      	b.n	8005d48 <__ieee754_pow+0x120>
 8005e00:	0feb      	lsrs	r3, r5, #31
 8005e02:	3b01      	subs	r3, #1
 8005e04:	930c      	str	r3, [sp, #48]	; 0x30
 8005e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e08:	9b00      	ldr	r3, [sp, #0]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	d104      	bne.n	8005e18 <__ieee754_pow+0x1f0>
 8005e0e:	4642      	mov	r2, r8
 8005e10:	464b      	mov	r3, r9
 8005e12:	4640      	mov	r0, r8
 8005e14:	4649      	mov	r1, r9
 8005e16:	e7e7      	b.n	8005de8 <__ieee754_pow+0x1c0>
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <__ieee754_pow+0x248>)
 8005e1a:	429e      	cmp	r6, r3
 8005e1c:	f340 80f6 	ble.w	800600c <__ieee754_pow+0x3e4>
 8005e20:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005e24:	429e      	cmp	r6, r3
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <__ieee754_pow+0x240>)
 8005e28:	dd09      	ble.n	8005e3e <__ieee754_pow+0x216>
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	dc0c      	bgt.n	8005e48 <__ieee754_pow+0x220>
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	da0c      	bge.n	8005e4c <__ieee754_pow+0x224>
 8005e32:	2000      	movs	r0, #0
 8005e34:	b013      	add	sp, #76	; 0x4c
 8005e36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	f000 bc32 	b.w	80066a2 <__math_oflow>
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	dbf5      	blt.n	8005e2e <__ieee754_pow+0x206>
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <__ieee754_pow+0x23c>)
 8005e44:	429c      	cmp	r4, r3
 8005e46:	dd15      	ble.n	8005e74 <__ieee754_pow+0x24c>
 8005e48:	2f00      	cmp	r7, #0
 8005e4a:	dcf2      	bgt.n	8005e32 <__ieee754_pow+0x20a>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	b013      	add	sp, #76	; 0x4c
 8005e50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	f000 bc20 	b.w	8006698 <__math_uflow>
 8005e58:	fff00000 	.word	0xfff00000
 8005e5c:	7ff00000 	.word	0x7ff00000
 8005e60:	433fffff 	.word	0x433fffff
 8005e64:	3ff00000 	.word	0x3ff00000
 8005e68:	3fefffff 	.word	0x3fefffff
 8005e6c:	3fe00000 	.word	0x3fe00000
 8005e70:	41e00000 	.word	0x41e00000
 8005e74:	4661      	mov	r1, ip
 8005e76:	2200      	movs	r2, #0
 8005e78:	4658      	mov	r0, fp
 8005e7a:	4b5f      	ldr	r3, [pc, #380]	; (8005ff8 <__ieee754_pow+0x3d0>)
 8005e7c:	f7fa f984 	bl	8000188 <__aeabi_dsub>
 8005e80:	a355      	add	r3, pc, #340	; (adr r3, 8005fd8 <__ieee754_pow+0x3b0>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	f7fa fb35 	bl	80004f8 <__aeabi_dmul>
 8005e8e:	a354      	add	r3, pc, #336	; (adr r3, 8005fe0 <__ieee754_pow+0x3b8>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	4606      	mov	r6, r0
 8005e96:	460f      	mov	r7, r1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa fb2c 	bl	80004f8 <__aeabi_dmul>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	468b      	mov	fp, r1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4b54      	ldr	r3, [pc, #336]	; (8005ffc <__ieee754_pow+0x3d4>)
 8005eac:	f7fa fb24 	bl	80004f8 <__aeabi_dmul>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	a14c      	add	r1, pc, #304	; (adr r1, 8005fe8 <__ieee754_pow+0x3c0>)
 8005eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eba:	f7fa f965 	bl	8000188 <__aeabi_dsub>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	f7fa fb19 	bl	80004f8 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	2000      	movs	r0, #0
 8005ecc:	494c      	ldr	r1, [pc, #304]	; (8006000 <__ieee754_pow+0x3d8>)
 8005ece:	f7fa f95b 	bl	8000188 <__aeabi_dsub>
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	4680      	mov	r8, r0
 8005ed8:	4689      	mov	r9, r1
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fb0b 	bl	80004f8 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	4649      	mov	r1, r9
 8005eea:	f7fa fb05 	bl	80004f8 <__aeabi_dmul>
 8005eee:	a340      	add	r3, pc, #256	; (adr r3, 8005ff0 <__ieee754_pow+0x3c8>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fb00 	bl	80004f8 <__aeabi_dmul>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4650      	mov	r0, sl
 8005efe:	4659      	mov	r1, fp
 8005f00:	f7fa f942 	bl	8000188 <__aeabi_dsub>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4604      	mov	r4, r0
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa f93c 	bl	800018c <__adddf3>
 8005f14:	2000      	movs	r0, #0
 8005f16:	4632      	mov	r2, r6
 8005f18:	463b      	mov	r3, r7
 8005f1a:	4682      	mov	sl, r0
 8005f1c:	468b      	mov	fp, r1
 8005f1e:	f7fa f933 	bl	8000188 <__aeabi_dsub>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7fa f92d 	bl	8000188 <__aeabi_dsub>
 8005f2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f32:	9b00      	ldr	r3, [sp, #0]
 8005f34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f36:	3b01      	subs	r3, #1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f04f 0600 	mov.w	r6, #0
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	bf0c      	ite	eq
 8005f44:	4b2f      	ldreq	r3, [pc, #188]	; (8006004 <__ieee754_pow+0x3dc>)
 8005f46:	4b2c      	ldrne	r3, [pc, #176]	; (8005ff8 <__ieee754_pow+0x3d0>)
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f50:	e9cd 2300 	strd	r2, r3, [sp]
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	f7fa f916 	bl	8000188 <__aeabi_dsub>
 8005f5c:	4652      	mov	r2, sl
 8005f5e:	465b      	mov	r3, fp
 8005f60:	f7fa faca 	bl	80004f8 <__aeabi_dmul>
 8005f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f68:	4680      	mov	r8, r0
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7fa fac2 	bl	80004f8 <__aeabi_dmul>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa f906 	bl	800018c <__adddf3>
 8005f80:	4632      	mov	r2, r6
 8005f82:	463b      	mov	r3, r7
 8005f84:	4680      	mov	r8, r0
 8005f86:	4689      	mov	r9, r1
 8005f88:	4650      	mov	r0, sl
 8005f8a:	4659      	mov	r1, fp
 8005f8c:	f7fa fab4 	bl	80004f8 <__aeabi_dmul>
 8005f90:	4604      	mov	r4, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	460b      	mov	r3, r1
 8005f96:	4602      	mov	r2, r0
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005fa0:	f7fa f8f4 	bl	800018c <__adddf3>
 8005fa4:	4b18      	ldr	r3, [pc, #96]	; (8006008 <__ieee754_pow+0x3e0>)
 8005fa6:	4682      	mov	sl, r0
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	460f      	mov	r7, r1
 8005fac:	460e      	mov	r6, r1
 8005fae:	f340 82e7 	ble.w	8006580 <__ieee754_pow+0x958>
 8005fb2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005fb6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005fba:	4303      	orrs	r3, r0
 8005fbc:	f000 81e2 	beq.w	8006384 <__ieee754_pow+0x75c>
 8005fc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f7fa fd08 	bl	80009dc <__aeabi_dcmplt>
 8005fcc:	3800      	subs	r0, #0
 8005fce:	bf18      	it	ne
 8005fd0:	2001      	movne	r0, #1
 8005fd2:	e72f      	b.n	8005e34 <__ieee754_pow+0x20c>
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	60000000 	.word	0x60000000
 8005fdc:	3ff71547 	.word	0x3ff71547
 8005fe0:	f85ddf44 	.word	0xf85ddf44
 8005fe4:	3e54ae0b 	.word	0x3e54ae0b
 8005fe8:	55555555 	.word	0x55555555
 8005fec:	3fd55555 	.word	0x3fd55555
 8005ff0:	652b82fe 	.word	0x652b82fe
 8005ff4:	3ff71547 	.word	0x3ff71547
 8005ff8:	3ff00000 	.word	0x3ff00000
 8005ffc:	3fd00000 	.word	0x3fd00000
 8006000:	3fe00000 	.word	0x3fe00000
 8006004:	bff00000 	.word	0xbff00000
 8006008:	408fffff 	.word	0x408fffff
 800600c:	4bd4      	ldr	r3, [pc, #848]	; (8006360 <__ieee754_pow+0x738>)
 800600e:	2200      	movs	r2, #0
 8006010:	402b      	ands	r3, r5
 8006012:	b943      	cbnz	r3, 8006026 <__ieee754_pow+0x3fe>
 8006014:	4658      	mov	r0, fp
 8006016:	4661      	mov	r1, ip
 8006018:	4bd2      	ldr	r3, [pc, #840]	; (8006364 <__ieee754_pow+0x73c>)
 800601a:	f7fa fa6d 	bl	80004f8 <__aeabi_dmul>
 800601e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006022:	4683      	mov	fp, r0
 8006024:	460c      	mov	r4, r1
 8006026:	1523      	asrs	r3, r4, #20
 8006028:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800602c:	4413      	add	r3, r2
 800602e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006030:	4bcd      	ldr	r3, [pc, #820]	; (8006368 <__ieee754_pow+0x740>)
 8006032:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006036:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800603a:	429c      	cmp	r4, r3
 800603c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006040:	dd08      	ble.n	8006054 <__ieee754_pow+0x42c>
 8006042:	4bca      	ldr	r3, [pc, #808]	; (800636c <__ieee754_pow+0x744>)
 8006044:	429c      	cmp	r4, r3
 8006046:	f340 8164 	ble.w	8006312 <__ieee754_pow+0x6ea>
 800604a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006050:	3301      	adds	r3, #1
 8006052:	930b      	str	r3, [sp, #44]	; 0x2c
 8006054:	2600      	movs	r6, #0
 8006056:	00f3      	lsls	r3, r6, #3
 8006058:	930d      	str	r3, [sp, #52]	; 0x34
 800605a:	4bc5      	ldr	r3, [pc, #788]	; (8006370 <__ieee754_pow+0x748>)
 800605c:	4658      	mov	r0, fp
 800605e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006062:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006066:	4629      	mov	r1, r5
 8006068:	461a      	mov	r2, r3
 800606a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800606e:	4623      	mov	r3, r4
 8006070:	f7fa f88a 	bl	8000188 <__aeabi_dsub>
 8006074:	46da      	mov	sl, fp
 8006076:	462b      	mov	r3, r5
 8006078:	4652      	mov	r2, sl
 800607a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800607e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006082:	f7fa f883 	bl	800018c <__adddf3>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	2000      	movs	r0, #0
 800608c:	49b9      	ldr	r1, [pc, #740]	; (8006374 <__ieee754_pow+0x74c>)
 800608e:	f7fa fb5d 	bl	800074c <__aeabi_ddiv>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800609a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800609e:	f7fa fa2b 	bl	80004f8 <__aeabi_dmul>
 80060a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80060aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060ae:	2300      	movs	r3, #0
 80060b0:	2200      	movs	r2, #0
 80060b2:	46ab      	mov	fp, r5
 80060b4:	106d      	asrs	r5, r5, #1
 80060b6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80060ba:	9304      	str	r3, [sp, #16]
 80060bc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80060c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060c4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	4614      	mov	r4, r2
 80060ce:	461d      	mov	r5, r3
 80060d0:	f7fa fa12 	bl	80004f8 <__aeabi_dmul>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80060dc:	f7fa f854 	bl	8000188 <__aeabi_dsub>
 80060e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	4620      	mov	r0, r4
 80060ea:	4629      	mov	r1, r5
 80060ec:	f7fa f84c 	bl	8000188 <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4650      	mov	r0, sl
 80060f6:	4659      	mov	r1, fp
 80060f8:	f7fa f846 	bl	8000188 <__aeabi_dsub>
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	f7fa f9fa 	bl	80004f8 <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	f7fa f83c 	bl	8000188 <__aeabi_dsub>
 8006110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006114:	f7fa f9f0 	bl	80004f8 <__aeabi_dmul>
 8006118:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800611c:	4682      	mov	sl, r0
 800611e:	468b      	mov	fp, r1
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	f7fa f9e8 	bl	80004f8 <__aeabi_dmul>
 8006128:	a37b      	add	r3, pc, #492	; (adr r3, 8006318 <__ieee754_pow+0x6f0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	4604      	mov	r4, r0
 8006130:	460d      	mov	r5, r1
 8006132:	f7fa f9e1 	bl	80004f8 <__aeabi_dmul>
 8006136:	a37a      	add	r3, pc, #488	; (adr r3, 8006320 <__ieee754_pow+0x6f8>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f7fa f826 	bl	800018c <__adddf3>
 8006140:	4622      	mov	r2, r4
 8006142:	462b      	mov	r3, r5
 8006144:	f7fa f9d8 	bl	80004f8 <__aeabi_dmul>
 8006148:	a377      	add	r3, pc, #476	; (adr r3, 8006328 <__ieee754_pow+0x700>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa f81d 	bl	800018c <__adddf3>
 8006152:	4622      	mov	r2, r4
 8006154:	462b      	mov	r3, r5
 8006156:	f7fa f9cf 	bl	80004f8 <__aeabi_dmul>
 800615a:	a375      	add	r3, pc, #468	; (adr r3, 8006330 <__ieee754_pow+0x708>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa f814 	bl	800018c <__adddf3>
 8006164:	4622      	mov	r2, r4
 8006166:	462b      	mov	r3, r5
 8006168:	f7fa f9c6 	bl	80004f8 <__aeabi_dmul>
 800616c:	a372      	add	r3, pc, #456	; (adr r3, 8006338 <__ieee754_pow+0x710>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f7fa f80b 	bl	800018c <__adddf3>
 8006176:	4622      	mov	r2, r4
 8006178:	462b      	mov	r3, r5
 800617a:	f7fa f9bd 	bl	80004f8 <__aeabi_dmul>
 800617e:	a370      	add	r3, pc, #448	; (adr r3, 8006340 <__ieee754_pow+0x718>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa f802 	bl	800018c <__adddf3>
 8006188:	4622      	mov	r2, r4
 800618a:	4606      	mov	r6, r0
 800618c:	460f      	mov	r7, r1
 800618e:	462b      	mov	r3, r5
 8006190:	4620      	mov	r0, r4
 8006192:	4629      	mov	r1, r5
 8006194:	f7fa f9b0 	bl	80004f8 <__aeabi_dmul>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa f9aa 	bl	80004f8 <__aeabi_dmul>
 80061a4:	4604      	mov	r4, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	f7f9 ffec 	bl	800018c <__adddf3>
 80061b4:	4652      	mov	r2, sl
 80061b6:	465b      	mov	r3, fp
 80061b8:	f7fa f99e 	bl	80004f8 <__aeabi_dmul>
 80061bc:	4622      	mov	r2, r4
 80061be:	462b      	mov	r3, r5
 80061c0:	f7f9 ffe4 	bl	800018c <__adddf3>
 80061c4:	4642      	mov	r2, r8
 80061c6:	4606      	mov	r6, r0
 80061c8:	460f      	mov	r7, r1
 80061ca:	464b      	mov	r3, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	4649      	mov	r1, r9
 80061d0:	f7fa f992 	bl	80004f8 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061dc:	2200      	movs	r2, #0
 80061de:	4b66      	ldr	r3, [pc, #408]	; (8006378 <__ieee754_pow+0x750>)
 80061e0:	f7f9 ffd4 	bl	800018c <__adddf3>
 80061e4:	4632      	mov	r2, r6
 80061e6:	463b      	mov	r3, r7
 80061e8:	f7f9 ffd0 	bl	800018c <__adddf3>
 80061ec:	2400      	movs	r4, #0
 80061ee:	460d      	mov	r5, r1
 80061f0:	4622      	mov	r2, r4
 80061f2:	460b      	mov	r3, r1
 80061f4:	4640      	mov	r0, r8
 80061f6:	4649      	mov	r1, r9
 80061f8:	f7fa f97e 	bl	80004f8 <__aeabi_dmul>
 80061fc:	2200      	movs	r2, #0
 80061fe:	4680      	mov	r8, r0
 8006200:	4689      	mov	r9, r1
 8006202:	4620      	mov	r0, r4
 8006204:	4629      	mov	r1, r5
 8006206:	4b5c      	ldr	r3, [pc, #368]	; (8006378 <__ieee754_pow+0x750>)
 8006208:	f7f9 ffbe 	bl	8000188 <__aeabi_dsub>
 800620c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006210:	f7f9 ffba 	bl	8000188 <__aeabi_dsub>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f7f9 ffb4 	bl	8000188 <__aeabi_dsub>
 8006220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006224:	f7fa f968 	bl	80004f8 <__aeabi_dmul>
 8006228:	4622      	mov	r2, r4
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	462b      	mov	r3, r5
 8006230:	4650      	mov	r0, sl
 8006232:	4659      	mov	r1, fp
 8006234:	f7fa f960 	bl	80004f8 <__aeabi_dmul>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4630      	mov	r0, r6
 800623e:	4639      	mov	r1, r7
 8006240:	f7f9 ffa4 	bl	800018c <__adddf3>
 8006244:	2400      	movs	r4, #0
 8006246:	4606      	mov	r6, r0
 8006248:	460f      	mov	r7, r1
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4640      	mov	r0, r8
 8006250:	4649      	mov	r1, r9
 8006252:	f7f9 ff9b 	bl	800018c <__adddf3>
 8006256:	a33c      	add	r3, pc, #240	; (adr r3, 8006348 <__ieee754_pow+0x720>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	4620      	mov	r0, r4
 800625e:	460d      	mov	r5, r1
 8006260:	f7fa f94a 	bl	80004f8 <__aeabi_dmul>
 8006264:	4642      	mov	r2, r8
 8006266:	464b      	mov	r3, r9
 8006268:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7f9 ff8a 	bl	8000188 <__aeabi_dsub>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7f9 ff84 	bl	8000188 <__aeabi_dsub>
 8006280:	a333      	add	r3, pc, #204	; (adr r3, 8006350 <__ieee754_pow+0x728>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa f937 	bl	80004f8 <__aeabi_dmul>
 800628a:	a333      	add	r3, pc, #204	; (adr r3, 8006358 <__ieee754_pow+0x730>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	4606      	mov	r6, r0
 8006292:	460f      	mov	r7, r1
 8006294:	4620      	mov	r0, r4
 8006296:	4629      	mov	r1, r5
 8006298:	f7fa f92e 	bl	80004f8 <__aeabi_dmul>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4630      	mov	r0, r6
 80062a2:	4639      	mov	r1, r7
 80062a4:	f7f9 ff72 	bl	800018c <__adddf3>
 80062a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062aa:	4b34      	ldr	r3, [pc, #208]	; (800637c <__ieee754_pow+0x754>)
 80062ac:	4413      	add	r3, r2
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f7f9 ff6b 	bl	800018c <__adddf3>
 80062b6:	4680      	mov	r8, r0
 80062b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80062ba:	4689      	mov	r9, r1
 80062bc:	f7fa f8b2 	bl	8000424 <__aeabi_i2d>
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062ca:	4b2d      	ldr	r3, [pc, #180]	; (8006380 <__ieee754_pow+0x758>)
 80062cc:	4413      	add	r3, r2
 80062ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062d2:	4642      	mov	r2, r8
 80062d4:	464b      	mov	r3, r9
 80062d6:	f7f9 ff59 	bl	800018c <__adddf3>
 80062da:	4632      	mov	r2, r6
 80062dc:	463b      	mov	r3, r7
 80062de:	f7f9 ff55 	bl	800018c <__adddf3>
 80062e2:	4622      	mov	r2, r4
 80062e4:	462b      	mov	r3, r5
 80062e6:	f7f9 ff51 	bl	800018c <__adddf3>
 80062ea:	2000      	movs	r0, #0
 80062ec:	4622      	mov	r2, r4
 80062ee:	462b      	mov	r3, r5
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	f7f9 ff48 	bl	8000188 <__aeabi_dsub>
 80062f8:	4632      	mov	r2, r6
 80062fa:	463b      	mov	r3, r7
 80062fc:	f7f9 ff44 	bl	8000188 <__aeabi_dsub>
 8006300:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006304:	f7f9 ff40 	bl	8000188 <__aeabi_dsub>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4640      	mov	r0, r8
 800630e:	4649      	mov	r1, r9
 8006310:	e60b      	b.n	8005f2a <__ieee754_pow+0x302>
 8006312:	2601      	movs	r6, #1
 8006314:	e69f      	b.n	8006056 <__ieee754_pow+0x42e>
 8006316:	bf00      	nop
 8006318:	4a454eef 	.word	0x4a454eef
 800631c:	3fca7e28 	.word	0x3fca7e28
 8006320:	93c9db65 	.word	0x93c9db65
 8006324:	3fcd864a 	.word	0x3fcd864a
 8006328:	a91d4101 	.word	0xa91d4101
 800632c:	3fd17460 	.word	0x3fd17460
 8006330:	518f264d 	.word	0x518f264d
 8006334:	3fd55555 	.word	0x3fd55555
 8006338:	db6fabff 	.word	0xdb6fabff
 800633c:	3fdb6db6 	.word	0x3fdb6db6
 8006340:	33333303 	.word	0x33333303
 8006344:	3fe33333 	.word	0x3fe33333
 8006348:	e0000000 	.word	0xe0000000
 800634c:	3feec709 	.word	0x3feec709
 8006350:	dc3a03fd 	.word	0xdc3a03fd
 8006354:	3feec709 	.word	0x3feec709
 8006358:	145b01f5 	.word	0x145b01f5
 800635c:	be3e2fe0 	.word	0xbe3e2fe0
 8006360:	7ff00000 	.word	0x7ff00000
 8006364:	43400000 	.word	0x43400000
 8006368:	0003988e 	.word	0x0003988e
 800636c:	000bb679 	.word	0x000bb679
 8006370:	080073c0 	.word	0x080073c0
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	40080000 	.word	0x40080000
 800637c:	080073e0 	.word	0x080073e0
 8006380:	080073d0 	.word	0x080073d0
 8006384:	a39c      	add	r3, pc, #624	; (adr r3, 80065f8 <__ieee754_pow+0x9d0>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7f9 fefd 	bl	800018c <__adddf3>
 8006392:	4622      	mov	r2, r4
 8006394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006398:	462b      	mov	r3, r5
 800639a:	4650      	mov	r0, sl
 800639c:	4639      	mov	r1, r7
 800639e:	f7f9 fef3 	bl	8000188 <__aeabi_dsub>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063aa:	f7fa fb35 	bl	8000a18 <__aeabi_dcmpgt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f47f ae06 	bne.w	8005fc0 <__ieee754_pow+0x398>
 80063b4:	4aa2      	ldr	r2, [pc, #648]	; (8006640 <__ieee754_pow+0xa18>)
 80063b6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80063ba:	4293      	cmp	r3, r2
 80063bc:	f340 8100 	ble.w	80065c0 <__ieee754_pow+0x998>
 80063c0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80063c4:	151b      	asrs	r3, r3, #20
 80063c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80063ca:	fa4a fa03 	asr.w	sl, sl, r3
 80063ce:	44b2      	add	sl, r6
 80063d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80063d4:	489b      	ldr	r0, [pc, #620]	; (8006644 <__ieee754_pow+0xa1c>)
 80063d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80063da:	4108      	asrs	r0, r1
 80063dc:	ea00 030a 	and.w	r3, r0, sl
 80063e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80063e4:	f1c1 0114 	rsb	r1, r1, #20
 80063e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80063ec:	fa4a fa01 	asr.w	sl, sl, r1
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	bfb8      	it	lt
 80063fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8006400:	f7f9 fec2 	bl	8000188 <__aeabi_dsub>
 8006404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640c:	2400      	movs	r4, #0
 800640e:	4642      	mov	r2, r8
 8006410:	464b      	mov	r3, r9
 8006412:	f7f9 febb 	bl	800018c <__adddf3>
 8006416:	a37a      	add	r3, pc, #488	; (adr r3, 8006600 <__ieee754_pow+0x9d8>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	4620      	mov	r0, r4
 800641e:	460d      	mov	r5, r1
 8006420:	f7fa f86a 	bl	80004f8 <__aeabi_dmul>
 8006424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f7f9 feaa 	bl	8000188 <__aeabi_dsub>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 fea4 	bl	8000188 <__aeabi_dsub>
 8006440:	a371      	add	r3, pc, #452	; (adr r3, 8006608 <__ieee754_pow+0x9e0>)
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f7fa f857 	bl	80004f8 <__aeabi_dmul>
 800644a:	a371      	add	r3, pc, #452	; (adr r3, 8006610 <__ieee754_pow+0x9e8>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	4680      	mov	r8, r0
 8006452:	4689      	mov	r9, r1
 8006454:	4620      	mov	r0, r4
 8006456:	4629      	mov	r1, r5
 8006458:	f7fa f84e 	bl	80004f8 <__aeabi_dmul>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7f9 fe92 	bl	800018c <__adddf3>
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7f9 fe8a 	bl	800018c <__adddf3>
 8006478:	4632      	mov	r2, r6
 800647a:	463b      	mov	r3, r7
 800647c:	4680      	mov	r8, r0
 800647e:	4689      	mov	r9, r1
 8006480:	f7f9 fe82 	bl	8000188 <__aeabi_dsub>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4620      	mov	r0, r4
 800648a:	4629      	mov	r1, r5
 800648c:	f7f9 fe7c 	bl	8000188 <__aeabi_dsub>
 8006490:	4642      	mov	r2, r8
 8006492:	4606      	mov	r6, r0
 8006494:	460f      	mov	r7, r1
 8006496:	464b      	mov	r3, r9
 8006498:	4640      	mov	r0, r8
 800649a:	4649      	mov	r1, r9
 800649c:	f7fa f82c 	bl	80004f8 <__aeabi_dmul>
 80064a0:	a35d      	add	r3, pc, #372	; (adr r3, 8006618 <__ieee754_pow+0x9f0>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	4604      	mov	r4, r0
 80064a8:	460d      	mov	r5, r1
 80064aa:	f7fa f825 	bl	80004f8 <__aeabi_dmul>
 80064ae:	a35c      	add	r3, pc, #368	; (adr r3, 8006620 <__ieee754_pow+0x9f8>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7f9 fe68 	bl	8000188 <__aeabi_dsub>
 80064b8:	4622      	mov	r2, r4
 80064ba:	462b      	mov	r3, r5
 80064bc:	f7fa f81c 	bl	80004f8 <__aeabi_dmul>
 80064c0:	a359      	add	r3, pc, #356	; (adr r3, 8006628 <__ieee754_pow+0xa00>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7f9 fe61 	bl	800018c <__adddf3>
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	f7fa f813 	bl	80004f8 <__aeabi_dmul>
 80064d2:	a357      	add	r3, pc, #348	; (adr r3, 8006630 <__ieee754_pow+0xa08>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7f9 fe56 	bl	8000188 <__aeabi_dsub>
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	f7fa f80a 	bl	80004f8 <__aeabi_dmul>
 80064e4:	a354      	add	r3, pc, #336	; (adr r3, 8006638 <__ieee754_pow+0xa10>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7f9 fe4f 	bl	800018c <__adddf3>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	f7fa f801 	bl	80004f8 <__aeabi_dmul>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7f9 fe43 	bl	8000188 <__aeabi_dsub>
 8006502:	4604      	mov	r4, r0
 8006504:	460d      	mov	r5, r1
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7f9 fff3 	bl	80004f8 <__aeabi_dmul>
 8006512:	2200      	movs	r2, #0
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 fe32 	bl	8000188 <__aeabi_dsub>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652c:	f7fa f90e 	bl	800074c <__aeabi_ddiv>
 8006530:	4632      	mov	r2, r6
 8006532:	4604      	mov	r4, r0
 8006534:	460d      	mov	r5, r1
 8006536:	463b      	mov	r3, r7
 8006538:	4640      	mov	r0, r8
 800653a:	4649      	mov	r1, r9
 800653c:	f7f9 ffdc 	bl	80004f8 <__aeabi_dmul>
 8006540:	4632      	mov	r2, r6
 8006542:	463b      	mov	r3, r7
 8006544:	f7f9 fe22 	bl	800018c <__adddf3>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	f7f9 fe1a 	bl	8000188 <__aeabi_dsub>
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	f7f9 fe16 	bl	8000188 <__aeabi_dsub>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	2000      	movs	r0, #0
 8006562:	4939      	ldr	r1, [pc, #228]	; (8006648 <__ieee754_pow+0xa20>)
 8006564:	f7f9 fe10 	bl	8000188 <__aeabi_dsub>
 8006568:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800656c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006570:	da29      	bge.n	80065c6 <__ieee754_pow+0x99e>
 8006572:	4652      	mov	r2, sl
 8006574:	f000 f8a0 	bl	80066b8 <scalbn>
 8006578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800657c:	f7ff bbfd 	b.w	8005d7a <__ieee754_pow+0x152>
 8006580:	4b32      	ldr	r3, [pc, #200]	; (800664c <__ieee754_pow+0xa24>)
 8006582:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006586:	429f      	cmp	r7, r3
 8006588:	f77f af14 	ble.w	80063b4 <__ieee754_pow+0x78c>
 800658c:	4b30      	ldr	r3, [pc, #192]	; (8006650 <__ieee754_pow+0xa28>)
 800658e:	440b      	add	r3, r1
 8006590:	4303      	orrs	r3, r0
 8006592:	d009      	beq.n	80065a8 <__ieee754_pow+0x980>
 8006594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	f7fa fa1e 	bl	80009dc <__aeabi_dcmplt>
 80065a0:	3800      	subs	r0, #0
 80065a2:	bf18      	it	ne
 80065a4:	2001      	movne	r0, #1
 80065a6:	e452      	b.n	8005e4e <__ieee754_pow+0x226>
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	f7f9 fdec 	bl	8000188 <__aeabi_dsub>
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	f7fa fa26 	bl	8000a04 <__aeabi_dcmpge>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	f43f aefb 	beq.w	80063b4 <__ieee754_pow+0x78c>
 80065be:	e7e9      	b.n	8006594 <__ieee754_pow+0x96c>
 80065c0:	f04f 0a00 	mov.w	sl, #0
 80065c4:	e720      	b.n	8006408 <__ieee754_pow+0x7e0>
 80065c6:	4621      	mov	r1, r4
 80065c8:	e7d6      	b.n	8006578 <__ieee754_pow+0x950>
 80065ca:	f04f 0b00 	mov.w	fp, #0
 80065ce:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006648 <__ieee754_pow+0xa20>
 80065d2:	f7ff bbb9 	b.w	8005d48 <__ieee754_pow+0x120>
 80065d6:	f04f 0b00 	mov.w	fp, #0
 80065da:	f04f 0c00 	mov.w	ip, #0
 80065de:	f7ff bbb3 	b.w	8005d48 <__ieee754_pow+0x120>
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7ff bb3c 	b.w	8005c62 <__ieee754_pow+0x3a>
 80065ea:	9200      	str	r2, [sp, #0]
 80065ec:	f7ff bb88 	b.w	8005d00 <__ieee754_pow+0xd8>
 80065f0:	2300      	movs	r3, #0
 80065f2:	f7ff bb72 	b.w	8005cda <__ieee754_pow+0xb2>
 80065f6:	bf00      	nop
 80065f8:	652b82fe 	.word	0x652b82fe
 80065fc:	3c971547 	.word	0x3c971547
 8006600:	00000000 	.word	0x00000000
 8006604:	3fe62e43 	.word	0x3fe62e43
 8006608:	fefa39ef 	.word	0xfefa39ef
 800660c:	3fe62e42 	.word	0x3fe62e42
 8006610:	0ca86c39 	.word	0x0ca86c39
 8006614:	be205c61 	.word	0xbe205c61
 8006618:	72bea4d0 	.word	0x72bea4d0
 800661c:	3e663769 	.word	0x3e663769
 8006620:	c5d26bf1 	.word	0xc5d26bf1
 8006624:	3ebbbd41 	.word	0x3ebbbd41
 8006628:	af25de2c 	.word	0xaf25de2c
 800662c:	3f11566a 	.word	0x3f11566a
 8006630:	16bebd93 	.word	0x16bebd93
 8006634:	3f66c16c 	.word	0x3f66c16c
 8006638:	5555553e 	.word	0x5555553e
 800663c:	3fc55555 	.word	0x3fc55555
 8006640:	3fe00000 	.word	0x3fe00000
 8006644:	fff00000 	.word	0xfff00000
 8006648:	3ff00000 	.word	0x3ff00000
 800664c:	4090cbff 	.word	0x4090cbff
 8006650:	3f6f3400 	.word	0x3f6f3400

08006654 <with_errno>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	4616      	mov	r6, r2
 800665c:	f7fd f97e 	bl	800395c <__errno>
 8006660:	4629      	mov	r1, r5
 8006662:	6006      	str	r6, [r0, #0]
 8006664:	4620      	mov	r0, r4
 8006666:	bd70      	pop	{r4, r5, r6, pc}

08006668 <xflow>:
 8006668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800666a:	4615      	mov	r5, r2
 800666c:	461c      	mov	r4, r3
 800666e:	b180      	cbz	r0, 8006692 <xflow+0x2a>
 8006670:	4610      	mov	r0, r2
 8006672:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006676:	e9cd 0100 	strd	r0, r1, [sp]
 800667a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800667e:	4628      	mov	r0, r5
 8006680:	4621      	mov	r1, r4
 8006682:	f7f9 ff39 	bl	80004f8 <__aeabi_dmul>
 8006686:	2222      	movs	r2, #34	; 0x22
 8006688:	b003      	add	sp, #12
 800668a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800668e:	f7ff bfe1 	b.w	8006654 <with_errno>
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	e7ee      	b.n	8006676 <xflow+0xe>

08006698 <__math_uflow>:
 8006698:	2200      	movs	r2, #0
 800669a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800669e:	f7ff bfe3 	b.w	8006668 <xflow>

080066a2 <__math_oflow>:
 80066a2:	2200      	movs	r2, #0
 80066a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80066a8:	f7ff bfde 	b.w	8006668 <xflow>

080066ac <fabs>:
 80066ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066b0:	4619      	mov	r1, r3
 80066b2:	4770      	bx	lr
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <scalbn>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	4616      	mov	r6, r2
 80066bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066c0:	4604      	mov	r4, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	460b      	mov	r3, r1
 80066c6:	b992      	cbnz	r2, 80066ee <scalbn+0x36>
 80066c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066cc:	4303      	orrs	r3, r0
 80066ce:	d03c      	beq.n	800674a <scalbn+0x92>
 80066d0:	4b31      	ldr	r3, [pc, #196]	; (8006798 <scalbn+0xe0>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7f9 ff10 	bl	80004f8 <__aeabi_dmul>
 80066d8:	4b30      	ldr	r3, [pc, #192]	; (800679c <scalbn+0xe4>)
 80066da:	4604      	mov	r4, r0
 80066dc:	429e      	cmp	r6, r3
 80066de:	460d      	mov	r5, r1
 80066e0:	da0f      	bge.n	8006702 <scalbn+0x4a>
 80066e2:	a329      	add	r3, pc, #164	; (adr r3, 8006788 <scalbn+0xd0>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 ff06 	bl	80004f8 <__aeabi_dmul>
 80066ec:	e006      	b.n	80066fc <scalbn+0x44>
 80066ee:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80066f2:	42ba      	cmp	r2, r7
 80066f4:	d109      	bne.n	800670a <scalbn+0x52>
 80066f6:	4602      	mov	r2, r0
 80066f8:	f7f9 fd48 	bl	800018c <__adddf3>
 80066fc:	4604      	mov	r4, r0
 80066fe:	460d      	mov	r5, r1
 8006700:	e023      	b.n	800674a <scalbn+0x92>
 8006702:	460b      	mov	r3, r1
 8006704:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006708:	3a36      	subs	r2, #54	; 0x36
 800670a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800670e:	428e      	cmp	r6, r1
 8006710:	dd0e      	ble.n	8006730 <scalbn+0x78>
 8006712:	a31f      	add	r3, pc, #124	; (adr r3, 8006790 <scalbn+0xd8>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800671c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006720:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006724:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006728:	481d      	ldr	r0, [pc, #116]	; (80067a0 <scalbn+0xe8>)
 800672a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800672e:	e7db      	b.n	80066e8 <scalbn+0x30>
 8006730:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006734:	4432      	add	r2, r6
 8006736:	428a      	cmp	r2, r1
 8006738:	dceb      	bgt.n	8006712 <scalbn+0x5a>
 800673a:	2a00      	cmp	r2, #0
 800673c:	dd08      	ble.n	8006750 <scalbn+0x98>
 800673e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006742:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006746:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800674a:	4620      	mov	r0, r4
 800674c:	4629      	mov	r1, r5
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006754:	da0c      	bge.n	8006770 <scalbn+0xb8>
 8006756:	a30c      	add	r3, pc, #48	; (adr r3, 8006788 <scalbn+0xd0>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006760:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006764:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006768:	480e      	ldr	r0, [pc, #56]	; (80067a4 <scalbn+0xec>)
 800676a:	f041 011f 	orr.w	r1, r1, #31
 800676e:	e7bb      	b.n	80066e8 <scalbn+0x30>
 8006770:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006774:	3236      	adds	r2, #54	; 0x36
 8006776:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800677a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800677e:	4620      	mov	r0, r4
 8006780:	4629      	mov	r1, r5
 8006782:	2200      	movs	r2, #0
 8006784:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <scalbn+0xf0>)
 8006786:	e7af      	b.n	80066e8 <scalbn+0x30>
 8006788:	c2f8f359 	.word	0xc2f8f359
 800678c:	01a56e1f 	.word	0x01a56e1f
 8006790:	8800759c 	.word	0x8800759c
 8006794:	7e37e43c 	.word	0x7e37e43c
 8006798:	43500000 	.word	0x43500000
 800679c:	ffff3cb0 	.word	0xffff3cb0
 80067a0:	8800759c 	.word	0x8800759c
 80067a4:	c2f8f359 	.word	0xc2f8f359
 80067a8:	3c900000 	.word	0x3c900000

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr


tractor_sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a4c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  08006b80  08006b80  00016b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d0  080077d0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080077d0  080077d0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077d0  080077d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d0  080077d0  000177d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080077d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001e8  080079c0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080079c0  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002e8b  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f70  00000000  00000000  000230df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00024050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000276  00000000  00000000  000243e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b1c  00000000  00000000  0002465e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004551  00000000  00000000  0002817a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b998  00000000  00000000  0002c6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ee0  00000000  00000000  00038064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00039f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e8 	.word	0x200001e8
 800014c:	00000000 	.word	0x00000000
 8000150:	08006b64 	.word	0x08006b64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001ec 	.word	0x200001ec
 800016c:	08006b64 	.word	0x08006b64

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	3a01      	subs	r2, #1
 8000c42:	bf28      	it	cs
 8000c44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c48:	d2ed      	bcs.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b092      	sub	sp, #72	; 0x48
 8001048:	af00      	add	r7, sp, #0
 800104a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800104e:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff fcc8 	bl	80009f0 <__aeabi_dcmple>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d020      	beq.n	80010a8 <look2_binlxpw+0x64>
    iLeft = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800106a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001074:	f7ff f888 	bl	8000188 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4614      	mov	r4, r2
 800107e:	461d      	mov	r5, r3
 8001080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001082:	3308      	adds	r3, #8
 8001084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff f87b 	bl	8000188 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff fb57 	bl	800074c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80010a6:	e08e      	b.n	80011c6 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 80010a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010b0:	4413      	add	r3, r2
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ba:	f7ff fc8f 	bl	80009dc <__aeabi_dcmplt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d04d      	beq.n	8001160 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 80010c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 80010d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 80010d6:	e016      	b.n	8001106 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 80010d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010de:	4413      	add	r3, r2
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010e8:	f7ff fc78 	bl	80009dc <__aeabi_dcmplt>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 80010f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010f6:	e001      	b.n	80010fc <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80010fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	4413      	add	r3, r2
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8001106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d8e3      	bhi.n	80010d8 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001116:	4413      	add	r3, r2
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001120:	f7ff f832 	bl	8000188 <__aeabi_dsub>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3301      	adds	r3, #1
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001134:	4413      	add	r3, r2
 8001136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001140:	4413      	add	r3, r2
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f81f 	bl	8000188 <__aeabi_dsub>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fafb 	bl	800074c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800115e:	e032      	b.n	80011c6 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8001160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8001168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001170:	3b01      	subs	r3, #1
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001176:	4413      	add	r3, r2
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001180:	f7ff f802 	bl	8000188 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4614      	mov	r4, r2
 800118a:	461d      	mov	r5, r3
 800118c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001194:	4413      	add	r3, r2
 8001196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80011a2:	3b01      	subs	r3, #1
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7fe ffeb 	bl	8000188 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fac7 	bl	800074c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 80011c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 80011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d0:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 80011d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011dc:	f7ff fc08 	bl	80009f0 <__aeabi_dcmple>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d020      	beq.n	8001228 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 80011ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f4:	f7fe ffc8 	bl	8000188 <__aeabi_dsub>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001202:	3308      	adds	r3, #8
 8001204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7fe ffbb 	bl	8000188 <__aeabi_dsub>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff fa97 	bl	800074c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001226:	e095      	b.n	8001354 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8001228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001232:	4413      	add	r3, r2
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123c:	f7ff fbce 	bl	80009dc <__aeabi_dcmplt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d04f      	beq.n	80012e6 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8001246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001248:	3304      	adds	r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8001254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 800125c:	e016      	b.n	800128c <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 800125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001264:	4413      	add	r3, r2
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800126e:	f7ff fbb5 	bl	80009dc <__aeabi_dcmplt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8001278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800127c:	e001      	b.n	8001282 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	4413      	add	r3, r2
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 800128c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d8e3      	bhi.n	800125e <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800129c:	4413      	add	r3, r2
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012a6:	f7fe ff6f 	bl	8000188 <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b4:	3301      	adds	r3, #1
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012ba:	4413      	add	r3, r2
 80012bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012c6:	4413      	add	r3, r2
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe ff5c 	bl	8000188 <__aeabi_dsub>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff fa38 	bl	800074c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012e4:	e036      	b.n	8001354 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 80012e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 80012f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80012fa:	3b01      	subs	r3, #1
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001300:	4413      	add	r3, r2
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130a:	f7fe ff3d 	bl	8000188 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4614      	mov	r4, r2
 8001314:	461d      	mov	r5, r3
 8001316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001318:	3304      	adds	r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001320:	4413      	add	r3, r2
 8001322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001330:	3b01      	subs	r3, #1
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001336:	4413      	add	r3, r2
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ff24 	bl	8000188 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff fa00 	bl	800074c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001358:	fb03 f202 	mul.w	r2, r3, r2
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	4413      	add	r3, r2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 8001362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001364:	3301      	adds	r3, #1
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800136a:	4413      	add	r3, r2
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001376:	4413      	add	r3, r2
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7fe ff04 	bl	8000188 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800138c:	f7ff f8b4 	bl	80004f8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800139e:	4413      	add	r3, r2
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fef2 	bl	800018c <__adddf3>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80013b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b4:	4413      	add	r3, r2
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80013b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ba:	3301      	adds	r3, #1
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013c0:	4413      	add	r3, r2
 80013c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013cc:	4413      	add	r3, r2
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7fe fed9 	bl	8000188 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e2:	f7ff f889 	bl	80004f8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7fe fec7 	bl	800018c <__adddf3>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800140a:	f7fe febd 	bl	8000188 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800141a:	f7ff f86d 	bl	80004f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800142a:	f7fe feaf 	bl	800018c <__adddf3>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
}
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	3748      	adds	r7, #72	; 0x48
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}

0800143c <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff facc 	bl	80009f0 <__aeabi_dcmple>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d020      	beq.n	80014a0 <look1_binlxpw+0x64>
    iLeft = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146c:	f7fe fe8c 	bl	8000188 <__aeabi_dsub>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3308      	adds	r3, #8
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe fe7f 	bl	8000188 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff f95b 	bl	800074c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800149e:	e087      	b.n	80015b0 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80014a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b0:	f7ff fa94 	bl	80009dc <__aeabi_dcmplt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d04b      	beq.n	8001552 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 80014c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c6:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 80014c8:	e016      	b.n	80014f8 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014da:	f7ff fa7f 	bl	80009dc <__aeabi_dcmplt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <look1_binlxpw+0xae>
        iRght = bpIdx;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	e001      	b.n	80014ee <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4413      	add	r3, r2
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d8e3      	bhi.n	80014ca <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001512:	f7fe fe39 	bl	8000188 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4614      	mov	r4, r2
 800151c:	461d      	mov	r5, r3
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	3301      	adds	r3, #1
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7fe fe26 	bl	8000188 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff f902 	bl	800074c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001550:	e02e      	b.n	80015b0 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	3b01      	subs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800155e:	3b01      	subs	r3, #1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800156e:	f7fe fe0b 	bl	8000188 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001588:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800158c:	3b01      	subs	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe fdf6 	bl	8000188 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f8d2 	bl	800074c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	3301      	adds	r3, #1
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fddd 	bl	8000188 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015da:	f7fe ff8d 	bl	80004f8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7fe fdcb 	bl	800018c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
}
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}

08001604 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800160e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001612:	3b01      	subs	r3, #1
 8001614:	2b03      	cmp	r3, #3
 8001616:	d86c      	bhi.n	80016f2 <EngTrModel_gear_state+0xee>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <EngTrModel_gear_state+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001651 	.word	0x08001651
 8001628:	0800166f 	.word	0x0800166f
 800162c:	080016a9 	.word	0x080016a9
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d155      	bne.n	80016e4 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800163a:	2203      	movs	r2, #3
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001640:	492f      	ldr	r1, [pc, #188]	; (8001700 <EngTrModel_gear_state+0xfc>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800164a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800164e:	e049      	b.n	80016e4 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d147      	bne.n	80016e8 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800165a:	2204      	movs	r2, #4
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001660:	4927      	ldr	r1, [pc, #156]	; (8001700 <EngTrModel_gear_state+0xfc>)
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <EngTrModel_gear_state+0x100>)
 8001668:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800166c:	e03c      	b.n	80016e8 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <EngTrModel_gear_state+0x8c>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d138      	bne.n	80016ec <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <EngTrModel_gear_state+0xf8>)
 800167c:	2204      	movs	r2, #4
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 8001682:	491f      	ldr	r1, [pc, #124]	; (8001700 <EngTrModel_gear_state+0xfc>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <EngTrModel_gear_state+0x100>)
 800168a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 800168e:	e00a      	b.n	80016a6 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <EngTrModel_gear_state+0xf8>)
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 8001698:	4919      	ldr	r1, [pc, #100]	; (8001700 <EngTrModel_gear_state+0xfc>)
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <EngTrModel_gear_state+0x104>)
 80016a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80016a4:	bf00      	nop
    }
    break;
 80016a6:	e021      	b.n	80016ec <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <EngTrModel_gear_state+0xc6>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11d      	bne.n	80016f0 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <EngTrModel_gear_state+0xf8>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80016bc:	4910      	ldr	r1, [pc, #64]	; (8001700 <EngTrModel_gear_state+0xfc>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <EngTrModel_gear_state+0x108>)
 80016c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80016c8:	e00b      	b.n	80016e2 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <EngTrModel_gear_state+0xf8>)
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 80016d2:	490b      	ldr	r1, [pc, #44]	; (8001700 <EngTrModel_gear_state+0xfc>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80016e0:	bf00      	nop
    }
    break;
 80016e2:	e005      	b.n	80016f0 <EngTrModel_gear_state+0xec>
    break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <EngTrModel_gear_state+0xee>
    break;
 80016f0:	bf00      	nop
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000238 	.word	0x20000238
 8001700:	20000208 	.word	0x20000208
 8001704:	40080000 	.word	0x40080000
 8001708:	3ff00000 	.word	0x3ff00000
 800170c:	40100000 	.word	0x40100000

08001710 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800171a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800171e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001722:	f001 faff 	bl	8002d24 <rtIsNaN>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <rt_powd_snf+0x2a>
 800172c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001730:	f001 faf8 	bl	8002d24 <rtIsNaN>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <rt_powd_snf+0x36>
    y = (rtNaN);
 800173a:	4b7e      	ldr	r3, [pc, #504]	; (8001934 <rt_powd_snf+0x224>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001744:	e0ef      	b.n	8001926 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001756:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 800175a:	68bc      	ldr	r4, [r7, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001762:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8001766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176a:	f001 fab7 	bl	8002cdc <rtIsInf>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d049      	beq.n	8001808 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <rt_powd_snf+0x228>)
 800177a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800177e:	f7ff f923 	bl	80009c8 <__aeabi_dcmpeq>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <rt_powd_snf+0x84>
        y = 1.0;
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <rt_powd_snf+0x228>)
 800178e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001792:	e0c8      	b.n	8001926 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b67      	ldr	r3, [pc, #412]	; (8001938 <rt_powd_snf+0x228>)
 800179a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800179e:	f7ff f93b 	bl	8000a18 <__aeabi_dcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b4:	f7ff f930 	bl	8000a18 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <rt_powd_snf+0xba>
          y = (rtInf);
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <rt_powd_snf+0x22c>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017c8:	e0ad      	b.n	8001926 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017d6:	e0a6      	b.n	8001926 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017e4:	f7ff f918 	bl	8000a18 <__aeabi_dcmpgt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <rt_powd_snf+0xec>
        y = 0.0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017fa:	e094      	b.n	8001926 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <rt_powd_snf+0x22c>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001806:	e08e      	b.n	8001926 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001814:	f7ff f8d8 	bl	80009c8 <__aeabi_dcmpeq>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <rt_powd_snf+0x11a>
      y = 1.0;
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <rt_powd_snf+0x228>)
 8001824:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001828:	e07d      	b.n	8001926 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <rt_powd_snf+0x228>)
 8001830:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001834:	f7ff f8c8 	bl	80009c8 <__aeabi_dcmpeq>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01b      	beq.n	8001876 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184a:	f7ff f8e5 	bl	8000a18 <__aeabi_dcmpgt>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <rt_powd_snf+0x14e>
        y = u0;
 8001854:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001858:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800185c:	e063      	b.n	8001926 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 800185e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	4934      	ldr	r1, [pc, #208]	; (8001938 <rt_powd_snf+0x228>)
 8001868:	f7fe ff70 	bl	800074c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001874:	e057      	b.n	8001926 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800187e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001882:	f7ff f8a1 	bl	80009c8 <__aeabi_dcmpeq>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <rt_powd_snf+0x192>
      y = u0 * u0;
 800188c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001890:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001894:	f7fe fe30 	bl	80004f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80018a0:	e041      	b.n	8001926 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <rt_powd_snf+0x230>)
 80018a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ac:	f7ff f88c 	bl	80009c8 <__aeabi_dcmpeq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d011      	beq.n	80018da <rt_powd_snf+0x1ca>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c2:	f7ff f89f 	bl	8000a04 <__aeabi_dcmpge>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 80018cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d0:	f004 fa02 	bl	8005cd8 <sqrt>
 80018d4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80018d8:	e025      	b.n	8001926 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e6:	f7ff f879 	bl	80009dc <__aeabi_dcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d012      	beq.n	8001916 <rt_powd_snf+0x206>
 80018f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f4:	f004 faf4 	bl	8005ee0 <floor>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001900:	f7ff f88a 	bl	8000a18 <__aeabi_dcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <rt_powd_snf+0x206>
      y = (rtNaN);
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <rt_powd_snf+0x224>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001914:	e007      	b.n	8001926 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800191a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800191e:	f004 f973 	bl	8005c08 <pow>
 8001922:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	20000298 	.word	0x20000298
 8001938:	3ff00000 	.word	0x3ff00000
 800193c:	20000288 	.word	0x20000288
 8001940:	3fe00000 	.word	0x3fe00000
 8001944:	00000000 	.word	0x00000000

08001948 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <EngTrModel_step+0x238>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	498b      	ldr	r1, [pc, #556]	; (8001b84 <EngTrModel_step+0x23c>)
 8001956:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 800195a:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <EngTrModel_step+0x23c>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	4989      	ldr	r1, [pc, #548]	; (8001b88 <EngTrModel_step+0x240>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 8001966:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <EngTrModel_step+0x238>)
 8001968:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 800196c:	a380      	add	r3, pc, #512	; (adr r3, 8001b70 <EngTrModel_step+0x228>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fdc1 	bl	80004f8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 800197e:	a37e      	add	r3, pc, #504	; (adr r3, 8001b78 <EngTrModel_step+0x230>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fdb8 	bl	80004f8 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 800198c:	497d      	ldr	r1, [pc, #500]	; (8001b84 <EngTrModel_step+0x23c>)
 800198e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001996:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <EngTrModel_step+0x238>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d004      	beq.n	80019ac <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <EngTrModel_step+0x238>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <EngTrModel_step+0x238>)
 80019aa:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 80019ac:	4b74      	ldr	r3, [pc, #464]	; (8001b80 <EngTrModel_step+0x238>)
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11a      	bne.n	80019ec <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <EngTrModel_step+0x238>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 80019be:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <EngTrModel_step+0x238>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80019c6:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <EngTrModel_step+0x238>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 80019ce:	496d      	ldr	r1, [pc, #436]	; (8001b84 <EngTrModel_step+0x23c>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <EngTrModel_step+0x244>)
 80019d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <EngTrModel_step+0x238>)
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <EngTrModel_step+0x238>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80019ea:	e0e4      	b.n	8001bb6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <EngTrModel_step+0x238>)
 80019ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe03 	bl	8001604 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <EngTrModel_step+0x238>)
 8001a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80d6 	beq.w	8001bb6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a0a:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <EngTrModel_step+0x248>)
 8001a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a10:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <EngTrModel_step+0x23c>)
 8001a12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a16:	2406      	movs	r4, #6
 8001a18:	9404      	str	r4, [sp, #16]
 8001a1a:	4c5e      	ldr	r4, [pc, #376]	; (8001b94 <EngTrModel_step+0x24c>)
 8001a1c:	9403      	str	r4, [sp, #12]
 8001a1e:	4c5e      	ldr	r4, [pc, #376]	; (8001b98 <EngTrModel_step+0x250>)
 8001a20:	9402      	str	r4, [sp, #8]
 8001a22:	4c5e      	ldr	r4, [pc, #376]	; (8001b9c <EngTrModel_step+0x254>)
 8001a24:	9401      	str	r4, [sp, #4]
 8001a26:	4c5e      	ldr	r4, [pc, #376]	; (8001ba0 <EngTrModel_step+0x258>)
 8001a28:	9400      	str	r4, [sp, #0]
 8001a2a:	f7ff fb0b 	bl	8001044 <look2_binlxpw>
 8001a2e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <EngTrModel_step+0x248>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <EngTrModel_step+0x23c>)
 8001a3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a3e:	2406      	movs	r4, #6
 8001a40:	9404      	str	r4, [sp, #16]
 8001a42:	4c54      	ldr	r4, [pc, #336]	; (8001b94 <EngTrModel_step+0x24c>)
 8001a44:	9403      	str	r4, [sp, #12]
 8001a46:	4c57      	ldr	r4, [pc, #348]	; (8001ba4 <EngTrModel_step+0x25c>)
 8001a48:	9402      	str	r4, [sp, #8]
 8001a4a:	4c54      	ldr	r4, [pc, #336]	; (8001b9c <EngTrModel_step+0x254>)
 8001a4c:	9401      	str	r4, [sp, #4]
 8001a4e:	4c56      	ldr	r4, [pc, #344]	; (8001ba8 <EngTrModel_step+0x260>)
 8001a50:	9400      	str	r4, [sp, #0]
 8001a52:	f7ff faf7 	bl	8001044 <look2_binlxpw>
 8001a56:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <EngTrModel_step+0x238>)
 8001a5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d05a      	beq.n	8001b1a <EngTrModel_step+0x1d2>
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	f300 80a6 	bgt.w	8001bb6 <EngTrModel_step+0x26e>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d002      	beq.n	8001a74 <EngTrModel_step+0x12c>
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d02e      	beq.n	8001ad0 <EngTrModel_step+0x188>
 8001a72:	e0a0      	b.n	8001bb6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <EngTrModel_step+0x238>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d919      	bls.n	8001ab0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <EngTrModel_step+0x23c>)
 8001a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001a82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a86:	f7fe ffbd 	bl	8000a04 <__aeabi_dcmpge>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00f      	beq.n	8001ab0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <EngTrModel_step+0x238>)
 8001a96:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fdaf 	bl	8001604 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <EngTrModel_step+0x238>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001aae:	e082      	b.n	8001bb6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <EngTrModel_step+0x23c>)
 8001ab2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ab6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aba:	f7fe ff8f 	bl	80009dc <__aeabi_dcmplt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <EngTrModel_step+0x17e>
        break;
 8001ac4:	e077      	b.n	8001bb6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <EngTrModel_step+0x238>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001ace:	e072      	b.n	8001bb6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <EngTrModel_step+0x23c>)
 8001ad2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ada:	f7fe ff7f 	bl	80009dc <__aeabi_dcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <EngTrModel_step+0x238>)
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <EngTrModel_step+0x238>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001af2:	e060      	b.n	8001bb6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <EngTrModel_step+0x23c>)
 8001af6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001afa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afe:	f7fe ff8b 	bl	8000a18 <__aeabi_dcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d100      	bne.n	8001b0a <EngTrModel_step+0x1c2>
        break;
 8001b08:	e055      	b.n	8001bb6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <EngTrModel_step+0x238>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <EngTrModel_step+0x238>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
        break;
 8001b18:	e04d      	b.n	8001bb6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <EngTrModel_step+0x238>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d919      	bls.n	8001b56 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <EngTrModel_step+0x23c>)
 8001b24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2c:	f7fe ff60 	bl	80009f0 <__aeabi_dcmple>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00f      	beq.n	8001b56 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <EngTrModel_step+0x238>)
 8001b3c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fd5c 	bl	8001604 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <EngTrModel_step+0x238>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001b54:	e02e      	b.n	8001bb4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <EngTrModel_step+0x23c>)
 8001b58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b60:	f7fe ff5a 	bl	8000a18 <__aeabi_dcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d120      	bne.n	8001bac <EngTrModel_step+0x264>
        break;
 8001b6a:	e023      	b.n	8001bb4 <EngTrModel_step+0x26c>
 8001b6c:	f3af 8000 	nop.w
 8001b70:	54442d18 	.word	0x54442d18
 8001b74:	401921fb 	.word	0x401921fb
 8001b78:	745d1746 	.word	0x745d1746
 8001b7c:	3f8745d1 	.word	0x3f8745d1
 8001b80:	20000238 	.word	0x20000238
 8001b84:	20000208 	.word	0x20000208
 8001b88:	20000270 	.word	0x20000270
 8001b8c:	3ff00000 	.word	0x3ff00000
 8001b90:	20000260 	.word	0x20000260
 8001b94:	080073d8 	.word	0x080073d8
 8001b98:	08006ba8 	.word	0x08006ba8
 8001b9c:	08006c98 	.word	0x08006c98
 8001ba0:	08006c68 	.word	0x08006c68
 8001ba4:	08006cb8 	.word	0x08006cb8
 8001ba8:	08006d78 	.word	0x08006d78
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <EngTrModel_step+0x478>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 8001bb4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 8001bb6:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001bb8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <EngTrModel_step+0x480>)
 8001bc2:	4a82      	ldr	r2, [pc, #520]	; (8001dcc <EngTrModel_step+0x484>)
 8001bc4:	f7ff fc3a 	bl	800143c <look1_binlxpw>
 8001bc8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 8001bcc:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <EngTrModel_step+0x478>)
 8001bce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bd2:	a375      	add	r3, pc, #468	; (adr r3, 8001da8 <EngTrModel_step+0x460>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fc8e 	bl	80004f8 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4978      	ldr	r1, [pc, #480]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001be2:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM != 0)
 8001be6:	4b77      	ldr	r3, [pc, #476]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f7fe fee8 	bl	80009c8 <__aeabi_dcmpeq>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <EngTrModel_step+0x2e0>
    InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c08:	f7fe fc76 	bl	80004f8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fd97 	bl	800074c <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c26:	e005      	b.n	8001c34 <EngTrModel_step+0x2ec>
  else
    InterpUp = 0.0;
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c36:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c3a:	2314      	movs	r3, #20
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <EngTrModel_step+0x488>)
 8001c40:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <EngTrModel_step+0x48c>)
 8001c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c46:	f7ff fbf9 	bl	800143c <look1_binlxpw>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fd7b 	bl	800074c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c66:	f7ff fd53 	bl	8001710 <rt_powd_snf>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4955      	ldr	r1, [pc, #340]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c70:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 8001c74:	2314      	movs	r3, #20
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <EngTrModel_step+0x490>)
 8001c7a:	4a56      	ldr	r2, [pc, #344]	; (8001dd4 <EngTrModel_step+0x48c>)
 8001c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c80:	f7ff fbdc 	bl	800143c <look1_binlxpw>
 8001c84:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 8001c88:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001c8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c92:	f7fe fc31 	bl	80004f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ca2:	f7fe fc29 	bl	80004f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4946      	ldr	r1, [pc, #280]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cac:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 8001cb0:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cb2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cb6:	4949      	ldr	r1, [pc, #292]	; (8001ddc <EngTrModel_step+0x494>)
 8001cb8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cc2:	4946      	ldr	r1, [pc, #280]	; (8001ddc <EngTrModel_step+0x494>)
 8001cc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <EngTrModel_step+0x498>)
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	240a      	movs	r4, #10
 8001cd6:	9404      	str	r4, [sp, #16]
 8001cd8:	4c42      	ldr	r4, [pc, #264]	; (8001de4 <EngTrModel_step+0x49c>)
 8001cda:	9403      	str	r4, [sp, #12]
 8001cdc:	4c42      	ldr	r4, [pc, #264]	; (8001de8 <EngTrModel_step+0x4a0>)
 8001cde:	9402      	str	r4, [sp, #8]
 8001ce0:	4c42      	ldr	r4, [pc, #264]	; (8001dec <EngTrModel_step+0x4a4>)
 8001ce2:	9401      	str	r4, [sp, #4]
 8001ce4:	4c42      	ldr	r4, [pc, #264]	; (8001df0 <EngTrModel_step+0x4a8>)
 8001ce6:	9400      	str	r4, [sp, #0]
 8001ce8:	f7ff f9ac 	bl	8001044 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001cee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cf2:	f7fe fa49 	bl	8000188 <__aeabi_dsub>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001cfe:	a32c      	add	r3, pc, #176	; (adr r3, 8001db0 <EngTrModel_step+0x468>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fbf8 	bl	80004f8 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	a329      	add	r3, pc, #164	; (adr r3, 8001db8 <EngTrModel_step+0x470>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fbef 	bl	80004f8 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <EngTrModel_step+0x478>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fa30 	bl	800018c <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4923      	ldr	r1, [pc, #140]	; (8001dc0 <EngTrModel_step+0x478>)
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001d38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe fe4a 	bl	80009dc <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <EngTrModel_step+0x4ac>)
 8001d54:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d58:	e055      	b.n	8001e06 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001d5c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	f7fe fe56 	bl	8000a18 <__aeabi_dcmpgt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <EngTrModel_step+0x4b0>)
 8001d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d7c:	e043      	b.n	8001e06 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <EngTrModel_step+0x47c>)
 8001d80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	f7fe fe1c 	bl	80009c8 <__aeabi_dcmpeq>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d032      	beq.n	8001dfc <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001da2:	e030      	b.n	8001e06 <EngTrModel_step+0x4be>
 8001da4:	f3af 8000 	nop.w
 8001da8:	3d70a3d7 	.word	0x3d70a3d7
 8001dac:	4009d70a 	.word	0x4009d70a
 8001db0:	0865b653 	.word	0x0865b653
 8001db4:	4046bc6f 	.word	0x4046bc6f
 8001db8:	47ae147b 	.word	0x47ae147b
 8001dbc:	3fa47ae1 	.word	0x3fa47ae1
 8001dc0:	20000238 	.word	0x20000238
 8001dc4:	20000208 	.word	0x20000208
 8001dc8:	080071c0 	.word	0x080071c0
 8001dcc:	08006c98 	.word	0x08006c98
 8001dd0:	080071e0 	.word	0x080071e0
 8001dd4:	08007288 	.word	0x08007288
 8001dd8:	08007330 	.word	0x08007330
 8001ddc:	20000270 	.word	0x20000270
 8001de0:	20000260 	.word	0x20000260
 8001de4:	080073e0 	.word	0x080073e0
 8001de8:	08006da8 	.word	0x08006da8
 8001dec:	08007168 	.word	0x08007168
 8001df0:	08007118 	.word	0x08007118
 8001df4:	bff00000 	.word	0xbff00000
 8001df8:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <EngTrModel_step+0x5a0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <EngTrModel_step+0x5a4>)
 8001e08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e0c:	a32e      	add	r3, pc, #184	; (adr r3, 8001ec8 <EngTrModel_step+0x580>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fb71 	bl	80004f8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <EngTrModel_step+0x5a4>)
 8001e20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e2c:	f7ff fc70 	bl	8001710 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e30:	a327      	add	r3, pc, #156	; (adr r3, 8001ed0 <EngTrModel_step+0x588>)
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f7fe fb5f 	bl	80004f8 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <EngTrModel_step+0x5a8>)
 8001e48:	f7fe f9a0 	bl	800018c <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <EngTrModel_step+0x5ac>)
 8001e56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001e5a:	f7fe f997 	bl	800018c <__adddf3>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e6a:	f7fe fb45 	bl	80004f8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe f987 	bl	8000188 <__aeabi_dsub>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001e82:	a315      	add	r3, pc, #84	; (adr r3, 8001ed8 <EngTrModel_step+0x590>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb36 	bl	80004f8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	a312      	add	r3, pc, #72	; (adr r3, 8001ee0 <EngTrModel_step+0x598>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fb2d 	bl	80004f8 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <EngTrModel_step+0x5b0>)
 8001ea8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eac:	f7fe f96e 	bl	800018c <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4910      	ldr	r1, [pc, #64]	; (8001ef8 <EngTrModel_step+0x5b0>)
 8001eb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	3d70a3d7 	.word	0x3d70a3d7
 8001ecc:	4009d70a 	.word	0x4009d70a
 8001ed0:	47ae147b 	.word	0x47ae147b
 8001ed4:	3f947ae1 	.word	0x3f947ae1
 8001ed8:	b3bfa695 	.word	0xb3bfa695
 8001edc:	3fb52ad1 	.word	0x3fb52ad1
 8001ee0:	47ae147b 	.word	0x47ae147b
 8001ee4:	3fa47ae1 	.word	0x3fa47ae1
 8001ee8:	20000298 	.word	0x20000298
 8001eec:	20000208 	.word	0x20000208
 8001ef0:	40440000 	.word	0x40440000
 8001ef4:	20000260 	.word	0x20000260
 8001ef8:	20000238 	.word	0x20000238

08001efc <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001f00:	2008      	movs	r0, #8
 8001f02:	f000 feb3 	bl	8002c6c <rt_InitInfAndNaN>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <USER_ADC1_Init>:
#include <stdint.h>
#include "main.h"
#include "adc.h"

void USER_ADC1_Init( void ) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
    // Configure ADC1
    ADC1->CR1 &= ~(ADC1_CR1_DUALMOD); // Select independent operation mode
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	6053      	str	r3, [r2, #4]
    ADC1->CR2 &= ~(ADC1_CR2_ALIGN); // Right alignment
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC1_CR2_CONT; // Continuous conversion mode
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6093      	str	r3, [r2, #8]

    // Configure sample time for ADC channel 0 | 1.5 cycles channel sample time
    ADC1->SMPR2 &= ~(ADC1_SMPR2_SMP0);
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	6113      	str	r3, [r2, #16]

    // Configure sequence and/or number of conversions for ADC regular channels
    ADC1->SQR1 &= ~(ADC1_SQR1_L); // 1 conversion for regular channels
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC1->SQR3 &= ~(ADC1_SQR3_SQ1); // Channel for the first ADC conversion | PA0
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	6353      	str	r3, [r2, #52]	; 0x34
    // Since we will read from PA0, we don't need to include a POT_ADC_PIN in main.c

    // Enable ADC module
    ADC1->CR2 |= ADC1_CR2_ADON;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6093      	str	r3, [r2, #8]

    // Calibrate ADC module
    ADC1->CR2 |= ADC1_CR2_CAL;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC1_CR2_CAL); // Wait for calibration to complete
 8001f5c:	bf00      	nop
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <USER_ADC1_Init+0x68>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <USER_ADC1_Init+0x52>
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012400 	.word	0x40012400

08001f78 <USER_ADC1_Read>:

uint16_t USER_ADC1_Read( void ) {
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC1_CR2_ADON;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6093      	str	r3, [r2, #8]

    // Wait for conversion to complete
    while (!(ADC1->SR & ADC1_SR_EOC)); // Wait until EOC (End of Conversion Flag) is set
 8001f88:	bf00      	nop
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f9      	beq.n	8001f8a <USER_ADC1_Read+0x12>

    // Read the converted value
    return (uint16_t)ADC1->DR;
 8001f96:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <USER_ADC1_Read+0x2c>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012400 	.word	0x40012400

08001fa8 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Configuracion de todos los pines hacia el LCD general purpose output push-pull, 10 MHz speed
  */
	//RCC->APB2ENR	|=	 ( 0x1UL <<  4U );//			IO port C clock enable
	GPIOC->CRL	&=	~( 0x3UL << 30U ) & ~( 0x2UL << 28U )
 8001fae:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <LCD_Init+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6c      	ldr	r2, [pc, #432]	; (8002164 <LCD_Init+0x1bc>)
 8001fb4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8001fb8:	6013      	str	r3, [r2, #0]
			& 	~( 0x3UL << 26U ) & ~( 0x2UL << 24U );
	GPIOC->CRL 	|= 	 ( 0x1UL << 28U )
 8001fba:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <LCD_Init+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a69      	ldr	r2, [pc, #420]	; (8002164 <LCD_Init+0x1bc>)
 8001fc0:	f043 5388 	orr.w	r3, r3, #285212672	; 0x11000000
 8001fc4:	6013      	str	r3, [r2, #0]
			|  	 ( 0x1UL << 24U );
	GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U )
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <LCD_Init+0x1bc>)
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4966      	ldr	r1, [pc, #408]	; (8002164 <LCD_Init+0x1bc>)
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <LCD_Init+0x1c0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
			& 	~( 0x3UL << 14U ) & ~( 0x2UL << 12U )
			&	~( 0x3UL << 10U ) & ~( 0x2UL <<  8U )
			& 	~( 0x3UL <<  6U ) & ~( 0x2UL <<  4U )
			& 	~( 0x3UL <<  2U ) & ~( 0x2UL <<  0U );
	GPIOC->CRH	|= 	 ( 0x1UL << 16U )
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <LCD_Init+0x1bc>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4963      	ldr	r1, [pc, #396]	; (8002164 <LCD_Init+0x1bc>)
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <LCD_Init+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <LCD_Init+0x1bc>)
 8001fe0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fe4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_LOW;
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <LCD_Init+0x1bc>)
 8001fe8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fec:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_LOW;
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <LCD_Init+0x1bc>)
 8001ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ff4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <LCD_Init+0x1bc>)
 8001ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_LOW;
 8001ffe:	4b59      	ldr	r3, [pc, #356]	; (8002164 <LCD_Init+0x1bc>)
 8002000:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002004:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <LCD_Init+0x1bc>)
 8002008:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 800200e:	4b55      	ldr	r3, [pc, #340]	; (8002164 <LCD_Init+0x1bc>)
 8002010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002014:	611a      	str	r2, [r3, #16]

	for (int i = 0; i < 5000; i++) { // Fake 50 ms timer
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e004      	b.n	8002026 <LCD_Init+0x7e>
			USER_TIM4_Delay();
 800201c:	f001 f89e 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 5000; i++) { // Fake 50 ms timer
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	3301      	adds	r3, #1
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f241 3287 	movw	r2, #4999	; 0x1387
 800202c:	4293      	cmp	r3, r2
 800202e:	ddf5      	ble.n	800201c <LCD_Init+0x74>
		}

	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 8002030:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <LCD_Init+0x1bc>)
 8002032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002036:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <LCD_Init+0x1bc>)
 800203a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203e:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 8002040:	4b48      	ldr	r3, [pc, #288]	; (8002164 <LCD_Init+0x1bc>)
 8002042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002046:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <LCD_Init+0x1bc>)
 800204a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800204e:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 8002050:	f000 fa38 	bl	80024c4 <LCD_Pulse_EN>

	for (int i = 0; i < 500; i++) { // Fake 5ms timer
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e004      	b.n	8002064 <LCD_Init+0xbc>
		USER_TIM4_Delay();
 800205a:	f001 f87f 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 500; i++) { // Fake 5ms timer
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800206a:	dbf6      	blt.n	800205a <LCD_Init+0xb2>
	}

	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 800206c:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <LCD_Init+0x1bc>)
 800206e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002072:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <LCD_Init+0x1bc>)
 8002076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800207a:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <LCD_Init+0x1bc>)
 800207e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002082:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <LCD_Init+0x1bc>)
 8002086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208a:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 800208c:	f000 fa1a 	bl	80024c4 <LCD_Pulse_EN>

	for (int i = 0; i < 10; i++) { // Fake 10us timer
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e004      	b.n	80020a0 <LCD_Init+0xf8>
		USER_TIM4_Delay();
 8002096:	f001 f861 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 10; i++) { // Fake 10us timer
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3301      	adds	r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	ddf7      	ble.n	8002096 <LCD_Init+0xee>
	}

	/* Special case of 'Function Set' 				*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_HIGH;
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <LCD_Init+0x1bc>)
 80020a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ac:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <LCD_Init+0x1bc>)
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <LCD_Init+0x1bc>)
 80020b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020bc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <LCD_Init+0x1bc>)
 80020c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c4:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80020c6:	f000 f9fd 	bl	80024c4 <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 80020ca:	bf00      	nop
 80020cc:	f000 f99c 	bl	8002408 <LCD_Busy>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1fa      	bne.n	80020cc <LCD_Init+0x124>
	/* Initial 'Function Set' to change 4-bit mode 			*/
	GPIOC->BSRR	 =	 LCD_D4_PIN_LOW;
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <LCD_Init+0x1bc>)
 80020d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020dc:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D5_PIN_HIGH;
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <LCD_Init+0x1bc>)
 80020e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D6_PIN_LOW;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <LCD_Init+0x1bc>)
 80020e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ec:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_D7_PIN_LOW;
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <LCD_Init+0x1bc>)
 80020f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f4:	611a      	str	r2, [r3, #16]
	LCD_Pulse_EN( );
 80020f6:	f000 f9e5 	bl	80024c4 <LCD_Pulse_EN>
	while( LCD_Busy( ) );//						checking the busy flag
 80020fa:	bf00      	nop
 80020fc:	f000 f984 	bl	8002408 <LCD_Busy>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1fa      	bne.n	80020fc <LCD_Init+0x154>
	/* 'Function Set' (I=1, N and F as required)			*/
	LCD_Write_Cmd( 0x28U );//					2-line display, 5x7 dot
 8002106:	2028      	movs	r0, #40	; 0x28
 8002108:	f000 f89a 	bl	8002240 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)			*/
	LCD_Write_Cmd( 0x08U );//					display, cursor and blinking off
 800210c:	2008      	movs	r0, #8
 800210e:	f000 f897 	bl	8002240 <LCD_Write_Cmd>
	/* 'Clear Display'						*/
	LCD_Write_Cmd( 0x01U );//
 8002112:	2001      	movs	r0, #1
 8002114:	f000 f894 	bl	8002240 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)			*/
	LCD_Write_Cmd( 0x06U );//					cursor increment by 1, shift off
 8002118:	2006      	movs	r0, #6
 800211a:	f000 f891 	bl	8002240 <LCD_Write_Cmd>
	/* Initialization Ends						*/
	LCD_Write_Cmd( 0x0FU );//					display, cursor and blinking on
 800211e:	200f      	movs	r0, #15
 8002120:	f000 f88e 	bl	8002240 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 8002124:	2040      	movs	r0, #64	; 0x40
 8002126:	f000 f88b 	bl	8002240 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <LCD_Init+0x1c8>)
 800212c:	617b      	str	r3, [r7, #20]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	e00c      	b.n	800214e <LCD_Init+0x1a6>
		LCD_Put_Char( *p );
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f993 3000 	ldrsb.w	r3, [r3]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f893 	bl	8002268 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b3f      	cmp	r3, #63	; 0x3f
 8002152:	d9ef      	bls.n	8002134 <LCD_Init+0x18c>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8002154:	2080      	movs	r0, #128	; 0x80
 8002156:	f000 f873 	bl	8002240 <LCD_Write_Cmd>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40011000 	.word	0x40011000
 8002168:	fff11111 	.word	0xfff11111
 800216c:	00011111 	.word	0x00011111
 8002170:	080073e8 	.word	0x080073e8

08002174 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//				Bit[0]
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	LCD_D4_PIN_HIGH;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <LCD_Out_Data4+0x84>)
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	e003      	b.n	800219a <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	LCD_D4_PIN_LOW;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <LCD_Out_Data4+0x84>)
 8002194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002198:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//				Bit[1]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	LCD_D5_PIN_HIGH;
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <LCD_Out_Data4+0x84>)
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	e003      	b.n	80021b6 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	LCD_D5_PIN_LOW;
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <LCD_Out_Data4+0x84>)
 80021b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021b4:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//				Bit[2]
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	LCD_D6_PIN_HIGH;
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <LCD_Out_Data4+0x84>)
 80021c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c6:	611a      	str	r2, [r3, #16]
 80021c8:	e003      	b.n	80021d2 <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	LCD_D6_PIN_LOW;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <LCD_Out_Data4+0x84>)
 80021cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021d0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//				Bit[3]
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	LCD_D7_PIN_HIGH;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <LCD_Out_Data4+0x84>)
 80021de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e2:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
}
 80021e4:	e003      	b.n	80021ee <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	LCD_D7_PIN_LOW;
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <LCD_Out_Data4+0x84>)
 80021e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40011000 	.word	0x40011000

080021fc <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ffb1 	bl	8002174 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002212:	f000 f957 	bl	80024c4 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ffa8 	bl	8002174 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8002224:	f000 f94e 	bl	80024c4 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8002228:	bf00      	nop
 800222a:	f000 f8ed 	bl	8002408 <LCD_Busy>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1fa      	bne.n	800222a <LCD_Write_Byte+0x2e>
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_LOW;//			RS=0 (seleccion de comando)
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <LCD_Write_Cmd+0x24>)
 800224c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002250:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ffd1 	bl	80021fc <LCD_Write_Byte>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40011000 	.word	0x40011000

08002268 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	LCD_RS_PIN_HIGH;//			RS=1 (seleccion de caracteres)
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <LCD_Put_Char+0x20>)
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ffbe 	bl	80021fc <LCD_Write_Byte>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40011000 	.word	0x40011000

0800228c <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	460a      	mov	r2, r1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	column--;
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	3b01      	subs	r3, #1
 80022a0:	71bb      	strb	r3, [r7, #6]
	line--;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40U ) + column;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	4413      	add	r3, r2
 80022b2:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3b80      	subs	r3, #128	; 0x80
 80022be:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ffbc 	bl	8002240 <LCD_Write_Cmd>
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 80022d8:	2300      	movs	r3, #0
 80022da:	81fb      	strh	r3, [r7, #14]
 80022dc:	e00d      	b.n	80022fa <LCD_Put_Str+0x2a>
		LCD_Put_Char( str[ i ] );//				envia 1 byte al LCD
 80022de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffbd 	bl	8002268 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 80022ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	81fb      	strh	r3, [r7, #14]
 80022fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	dc06      	bgt.n	8002310 <LCD_Put_Str+0x40>
 8002302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e6      	bne.n	80022de <LCD_Put_Str+0xe>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
	int16_t p;
	int16_t f = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	82bb      	strh	r3, [r7, #20]
	int8_t ch[ 5 ];

	for( int16_t i = 0; i < 5; i++ ){
 8002326:	2300      	movs	r3, #0
 8002328:	827b      	strh	r3, [r7, #18]
 800232a:	e064      	b.n	80023f6 <LCD_Put_Num+0xde>
		p = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	82fb      	strh	r3, [r7, #22]
		for( int16_t j = 4 - i; j > 0; j-- )
 8002330:	8a7b      	ldrh	r3, [r7, #18]
 8002332:	f1c3 0304 	rsb	r3, r3, #4
 8002336:	b29b      	uxth	r3, r3
 8002338:	823b      	strh	r3, [r7, #16]
 800233a:	e00c      	b.n	8002356 <LCD_Put_Num+0x3e>
			p = p * 10;
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	461a      	mov	r2, r3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	82fb      	strh	r3, [r7, #22]
		for( int16_t j = 4 - i; j > 0; j-- )
 800234a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	823b      	strh	r3, [r7, #16]
 8002356:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	dcee      	bgt.n	800233c <LCD_Put_Num+0x24>
		ch[ i ] = ( num / p );
 800235e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002362:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002366:	fb92 f2f3 	sdiv	r2, r2, r3
 800236a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800236e:	b252      	sxtb	r2, r2
 8002370:	3318      	adds	r3, #24
 8002372:	443b      	add	r3, r7
 8002374:	f803 2c10 	strb.w	r2, [r3, #-16]
		if( num >= p && !f )
 8002378:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800237c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002380:	429a      	cmp	r2, r3
 8002382:	db05      	blt.n	8002390 <LCD_Put_Num+0x78>
 8002384:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <LCD_Put_Num+0x78>
			f = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	82bb      	strh	r3, [r7, #20]
		num = num - ch[ i ] * p;
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002396:	3318      	adds	r3, #24
 8002398:	443b      	add	r3, r7
 800239a:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	8af9      	ldrh	r1, [r7, #22]
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	80fb      	strh	r3, [r7, #6]
		ch[ i ] = ch[ i ] + 48;
 80023ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023b2:	3318      	adds	r3, #24
 80023b4:	443b      	add	r3, r7
 80023b6:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3330      	adds	r3, #48	; 0x30
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023c4:	b252      	sxtb	r2, r2
 80023c6:	3318      	adds	r3, #24
 80023c8:	443b      	add	r3, r7
 80023ca:	f803 2c10 	strb.w	r2, [r3, #-16]
		if( f )
 80023ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <LCD_Put_Num+0xd2>
			LCD_Put_Char( ch[ i ] );
 80023d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023da:	3318      	adds	r3, #24
 80023dc:	443b      	add	r3, r7
 80023de:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff3f 	bl	8002268 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 80023ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	827b      	strh	r3, [r7, #18]
 80023f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	dd96      	ble.n	800232c <LCD_Put_Num+0x14>
	}
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOC->CRH	&=	~( 0x2UL << 18U ) & ~( 0x3UL << 16U );
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <LCD_Busy+0xb8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <LCD_Busy+0xb8>)
 8002414:	f423 2330 	bic.w	r3, r3, #720896	; 0xb0000
 8002418:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=   	 ( 0x1UL << 18U );
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <LCD_Busy+0xb8>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <LCD_Busy+0xb8>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR	 =	 LCD_RS_PIN_LOW;
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <LCD_Busy+0xb8>)
 8002428:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800242c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_RW_PIN_HIGH;
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <LCD_Busy+0xb8>)
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR	 =	 LCD_EN_PIN_HIGH;
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <LCD_Busy+0xb8>)
 8002436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243a:	611a      	str	r2, [r3, #16]

	for (int i = 0; i < 1000; i++) { // fake 100 us timer
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	e004      	b.n	800244c <LCD_Busy+0x44>
		USER_TIM4_Delay();
 8002442:	f000 fe8b 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 1000; i++) { // fake 100 us timer
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3301      	adds	r3, #1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002452:	dbf6      	blt.n	8002442 <LCD_Busy+0x3a>
	}

//	USER_TIM4_Delay();//	100us (50ms)
	if(( GPIOC->IDR	& LCD_D7_PIN_HIGH )) {//			if D7 is set, then
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <LCD_Busy+0xb8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <LCD_Busy+0x84>
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <LCD_Busy+0xb8>)
 8002462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002466:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <LCD_Busy+0xb8>)
 800246a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800246e:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <LCD_Busy+0xb8>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <LCD_Busy+0xb8>)
 8002476:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800247a:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <LCD_Busy+0xb8>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <LCD_Busy+0xb8>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6053      	str	r3, [r2, #4]
		return 1;
 8002488:	2301      	movs	r3, #1
 800248a:	e014      	b.n	80024b6 <LCD_Busy+0xae>
	} else {
		GPIOC->BSRR	= 	LCD_EN_PIN_LOW;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <LCD_Busy+0xb8>)
 800248e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002492:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR	=	LCD_RW_PIN_LOW;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <LCD_Busy+0xb8>)
 8002496:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800249a:	611a      	str	r2, [r3, #16]
/**
  * Configuracion de D7 as output push-pull, 10 MHz speed
  */
		GPIOC->CRH	&=	~( 0x3UL << 18U ) & ~( 0x2UL << 16U );
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <LCD_Busy+0xb8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <LCD_Busy+0xb8>)
 80024a2:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80024a6:	6053      	str	r3, [r2, #4]
		GPIOC->CRH	|=   	 ( 0x1UL << 16U );
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <LCD_Busy+0xb8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <LCD_Busy+0xb8>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6053      	str	r3, [r2, #4]
		return 0;
 80024b4:	2300      	movs	r3, #0
	}
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40011000 	.word	0x40011000

080024c4 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <LCD_Pulse_EN+0x6c>)
 80024cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024d0:	611a      	str	r2, [r3, #16]

	for (int i = 0; i < 100; i++) { // Fake 1ms timer
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e004      	b.n	80024e2 <LCD_Pulse_EN+0x1e>
		USER_TIM4_Delay();
 80024d8:	f000 fe40 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 100; i++) { // Fake 1ms timer
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b63      	cmp	r3, #99	; 0x63
 80024e6:	ddf7      	ble.n	80024d8 <LCD_Pulse_EN+0x14>
	}

	GPIOC->BSRR	=	LCD_EN_PIN_HIGH;//			habilita pin EN ON
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <LCD_Pulse_EN+0x6c>)
 80024ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ee:	611a      	str	r2, [r3, #16]

	for (int i = 0; i < 100; i++) { // Fake 1ms timer
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	e004      	b.n	8002500 <LCD_Pulse_EN+0x3c>
		USER_TIM4_Delay();
 80024f6:	f000 fe31 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 100; i++) { // Fake 1ms timer
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b63      	cmp	r3, #99	; 0x63
 8002504:	ddf7      	ble.n	80024f6 <LCD_Pulse_EN+0x32>
	}

	GPIOC->BSRR	=	LCD_EN_PIN_LOW;//			habilita pin EN OFF
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <LCD_Pulse_EN+0x6c>)
 8002508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800250c:	611a      	str	r2, [r3, #16]

	for (int i = 0; i < 100; i++) { // Fake 1ms timer
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	e004      	b.n	800251e <LCD_Pulse_EN+0x5a>
		USER_TIM4_Delay();
 8002514:	f000 fe22 	bl	800315c <USER_TIM4_Delay>
	for (int i = 0; i < 100; i++) { // Fake 1ms timer
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3301      	adds	r3, #1
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b63      	cmp	r3, #99	; 0x63
 8002522:	ddf7      	ble.n	8002514 <LCD_Pulse_EN+0x50>
	}
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40011000 	.word	0x40011000

08002534 <USER_LCD_Send_Message>:
				LCD_Put_Char( 0 );
		}
	}
}

void USER_LCD_Send_Message( uint8_t *msg, uint16_t size ){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
	//	msg[6] = (uint8_t) (v_speed >> 8);
	//
	//	msg[8] = (uint8_t) gear & 0xff;
	//	msg[9] = (uint8_t) (gear >> 8);

	LCD_Put_Str( "e:");
 8002540:	482b      	ldr	r0, [pc, #172]	; (80025f0 <USER_LCD_Send_Message+0xbc>)
 8002542:	f7ff fec5 	bl	80022d0 <LCD_Put_Str>
	LCD_Put_Num( (msg[3] << 8) | msg[2] );
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3303      	adds	r3, #3
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	b21a      	sxth	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3302      	adds	r3, #2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b21b      	sxth	r3, r3
 8002558:	4313      	orrs	r3, r2
 800255a:	b21b      	sxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fedb 	bl	8002318 <LCD_Put_Num>


	LCD_Put_Str(" v:");
 8002562:	4824      	ldr	r0, [pc, #144]	; (80025f4 <USER_LCD_Send_Message+0xc0>)
 8002564:	f7ff feb4 	bl	80022d0 <LCD_Put_Str>
	LCD_Put_Num( (msg[6] << 8) | msg[5] );
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3306      	adds	r3, #6
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	b21a      	sxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3305      	adds	r3, #5
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b21b      	sxth	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b21b      	sxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff feca 	bl	8002318 <LCD_Put_Num>

	LCD_Set_Cursor(2, 1);
 8002584:	2101      	movs	r1, #1
 8002586:	2002      	movs	r0, #2
 8002588:	f7ff fe80 	bl	800228c <LCD_Set_Cursor>

	LCD_Put_Str("g:");
 800258c:	481a      	ldr	r0, [pc, #104]	; (80025f8 <USER_LCD_Send_Message+0xc4>)
 800258e:	f7ff fe9f 	bl	80022d0 <LCD_Put_Str>
	LCD_Put_Num( (msg[9] << 8) | msg[8] );
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3309      	adds	r3, #9
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b21a      	sxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3308      	adds	r3, #8
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff feb5 	bl	8002318 <LCD_Put_Num>
	LCD_Put_Str(" ");
 80025ae:	4813      	ldr	r0, [pc, #76]	; (80025fc <USER_LCD_Send_Message+0xc8>)
 80025b0:	f7ff fe8e 	bl	80022d0 <LCD_Put_Str>

	if (msg[10] == 3) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	330a      	adds	r3, #10
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d103      	bne.n	80025c6 <USER_LCD_Send_Message+0x92>
		LCD_Put_Str("brake");
 80025be:	4810      	ldr	r0, [pc, #64]	; (8002600 <USER_LCD_Send_Message+0xcc>)
 80025c0:	f7ff fe86 	bl	80022d0 <LCD_Put_Str>
	}
	else if (msg[10] == 2) {
		LCD_Put_Str("left");
	}

}
 80025c4:	e010      	b.n	80025e8 <USER_LCD_Send_Message+0xb4>
	else if (msg[10] == 1) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	330a      	adds	r3, #10
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d103      	bne.n	80025d8 <USER_LCD_Send_Message+0xa4>
		LCD_Put_Str("right");
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <USER_LCD_Send_Message+0xd0>)
 80025d2:	f7ff fe7d 	bl	80022d0 <LCD_Put_Str>
}
 80025d6:	e007      	b.n	80025e8 <USER_LCD_Send_Message+0xb4>
	else if (msg[10] == 2) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	330a      	adds	r3, #10
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d102      	bne.n	80025e8 <USER_LCD_Send_Message+0xb4>
		LCD_Put_Str("left");
 80025e2:	4809      	ldr	r0, [pc, #36]	; (8002608 <USER_LCD_Send_Message+0xd4>)
 80025e4:	f7ff fe74 	bl	80022d0 <LCD_Put_Str>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	08006b80 	.word	0x08006b80
 80025f4:	08006b84 	.word	0x08006b84
 80025f8:	08006b88 	.word	0x08006b88
 80025fc:	08006b8c 	.word	0x08006b8c
 8002600:	08006b90 	.word	0x08006b90
 8002604:	08006b98 	.word	0x08006b98
 8002608:	08006ba0 	.word	0x08006ba0

0800260c <TIM3_IRQHandler>:
	the message in the LCD.

	We also toggle the LED in the board to show that the
	interrupt is running.
 */
void TIM3_IRQHandler( void ){
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	if ( TIM3->SR & TIM3_SR_UIF ){
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <TIM3_IRQHandler+0x50>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <TIM3_IRQHandler+0x4a>
		LCD_Clear();
 800261c:	2001      	movs	r0, #1
 800261e:	f7ff fe0f 	bl	8002240 <LCD_Write_Cmd>
		LCD_Set_Cursor(1, 1);
 8002622:	2101      	movs	r1, #1
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff fe31 	bl	800228c <LCD_Set_Cursor>

		GPIOA->ODR ^= ( 0x1UL << 5U );					// Toggle the LED
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <TIM3_IRQHandler+0x54>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <TIM3_IRQHandler+0x54>)
 8002630:	f083 0320 	eor.w	r3, r3, #32
 8002634:	60d3      	str	r3, [r2, #12]

		USER_UART_Send_Message(msg, msg_length);		// Send the message
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <TIM3_IRQHandler+0x58>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	480a      	ldr	r0, [pc, #40]	; (8002668 <TIM3_IRQHandler+0x5c>)
 8002640:	f000 fe08 	bl	8003254 <USER_UART_Send_Message>

		USER_LCD_Send_Message(msg, msg_length);			// Show the message
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <TIM3_IRQHandler+0x58>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	4806      	ldr	r0, [pc, #24]	; (8002668 <TIM3_IRQHandler+0x5c>)
 800264e:	f7ff ff71 	bl	8002534 <USER_LCD_Send_Message>

		USER_TIM3_Reset();								// Reset the timer
 8002652:	f000 fd1b 	bl	800308c <USER_TIM3_Reset>
	}
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40000400 	.word	0x40000400
 8002660:	40010800 	.word	0x40010800
 8002664:	2000000b 	.word	0x2000000b
 8002668:	20000000 	.word	0x20000000
 800266c:	00000000 	.word	0x00000000

08002670 <main>:
	of the program. It reads the value from the potentiometer and
	scales it to the range of acceleration (0 to 100). It also reads
	the state of the keypad and sets the throttle and brake values
	accordingly.
*/
int main(void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8

	// Initialize the peripherals
  	USER_RCC_Init();
 8002676:	f000 f8ef 	bl	8002858 <USER_RCC_Init>
	USER_GPIO_Init();
 800267a:	f000 f947 	bl	800290c <USER_GPIO_Init>
  	USER_USART1_Init();
 800267e:	f000 fd83 	bl	8003188 <USER_USART1_Init>
	USER_TIM2_Init();
 8002682:	f000 fc6f 	bl	8002f64 <USER_TIM2_Init>
	USER_TIM4_Init();
 8002686:	f000 fd23 	bl	80030d0 <USER_TIM4_Init>
	USER_TIM3_Init();
 800268a:	f000 fccf 	bl	800302c <USER_TIM3_Init>
	LCD_Init();
 800268e:	f7ff fc8b 	bl	8001fa8 <LCD_Init>
	USER_ADC1_Init();
 8002692:	f7ff fc3b 	bl	8001f0c <USER_ADC1_Init>

	// Initialize the model
	EngTrModel_initialize();
 8002696:	f7ff fc31 	bl	8001efc <EngTrModel_initialize>


  for(;;)
	{
		// Reads the value from the potentiometer
		uint16_t pot_value = USER_ADC1_Read();
 800269a:	f7ff fc6d 	bl	8001f78 <USER_ADC1_Read>
 800269e:	4603      	mov	r3, r0
 80026a0:	81fb      	strh	r3, [r7, #14]

		// Scales the potentiometer value to the range of acceleration (0 to 100)
		float acceleration = map(pot_value, 50, 4095, 1, 100);
 80026a2:	89fb      	ldrh	r3, [r7, #14]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fb25 	bl	8000cf4 <__aeabi_ui2f>
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <main+0x1c8>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026b2:	4a62      	ldr	r2, [pc, #392]	; (800283c <main+0x1cc>)
 80026b4:	4962      	ldr	r1, [pc, #392]	; (8002840 <main+0x1d0>)
 80026b6:	f000 f999 	bl	80029ec <map>
 80026ba:	60b8      	str	r0, [r7, #8]

		// Key 'B' is pressed and executes brake
		if ( !(ROW2_PIN) ) {
 80026bc:	4b61      	ldr	r3, [pc, #388]	; (8002844 <main+0x1d4>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d118      	bne.n	80026fa <main+0x8a>
			
			USER_TIM2_Delay(); // 10ms delay for debounce
 80026c8:	f000 fc99 	bl	8002ffe <USER_TIM2_Delay>

			if ( !(ROW2_PIN) ) {
 80026cc:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <main+0x1d4>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d16e      	bne.n	80027b6 <main+0x146>
				EngTrModel_U.Throttle = 2.0;
 80026d8:	495b      	ldr	r1, [pc, #364]	; (8002848 <main+0x1d8>)
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e2:	e9c1 2300 	strd	r2, r3, [r1]
				EngTrModel_U.BrakeTorque = 100.0;
 80026e6:	4958      	ldr	r1, [pc, #352]	; (8002848 <main+0x1d8>)
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b57      	ldr	r3, [pc, #348]	; (800284c <main+0x1dc>)
 80026ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
				msg[10] = (uint8_t) 3;
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <main+0x1e0>)
 80026f4:	2203      	movs	r2, #3
 80026f6:	729a      	strb	r2, [r3, #10]
 80026f8:	e05d      	b.n	80027b6 <main+0x146>
			}
		} else if ( !(ROW1_PIN) ) { // derecha
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <main+0x1d4>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11f      	bne.n	8002746 <main+0xd6>

			USER_TIM2_Delay(); // 10ms delay for debounce
 8002706:	f000 fc7a 	bl	8002ffe <USER_TIM2_Delay>

			if ( !(ROW1_PIN) ) {
 800270a:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <main+0x1d4>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d14f      	bne.n	80027b6 <main+0x146>

				EngTrModel_U.Throttle = acceleration * 0.95;
 8002716:	68b8      	ldr	r0, [r7, #8]
 8002718:	f7fd fe96 	bl	8000448 <__aeabi_f2d>
 800271c:	a344      	add	r3, pc, #272	; (adr r3, 8002830 <main+0x1c0>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd fee9 	bl	80004f8 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4947      	ldr	r1, [pc, #284]	; (8002848 <main+0x1d8>)
 800272c:	e9c1 2300 	strd	r2, r3, [r1]
				EngTrModel_U.BrakeTorque = 0.0;
 8002730:	4945      	ldr	r1, [pc, #276]	; (8002848 <main+0x1d8>)
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				msg[10] = (uint8_t) 1;
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <main+0x1e0>)
 8002740:	2201      	movs	r2, #1
 8002742:	729a      	strb	r2, [r3, #10]
 8002744:	e037      	b.n	80027b6 <main+0x146>
			}

		} else if ( !(ROW3_PIN) ) { // izquierda
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <main+0x1d4>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11f      	bne.n	8002792 <main+0x122>

			USER_TIM2_Delay(); // 10ms delay for debounce
 8002752:	f000 fc54 	bl	8002ffe <USER_TIM2_Delay>

			if ( !(ROW3_PIN) ) {
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <main+0x1d4>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d129      	bne.n	80027b6 <main+0x146>


				EngTrModel_U.Throttle = acceleration * 0.95;
 8002762:	68b8      	ldr	r0, [r7, #8]
 8002764:	f7fd fe70 	bl	8000448 <__aeabi_f2d>
 8002768:	a331      	add	r3, pc, #196	; (adr r3, 8002830 <main+0x1c0>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd fec3 	bl	80004f8 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4934      	ldr	r1, [pc, #208]	; (8002848 <main+0x1d8>)
 8002778:	e9c1 2300 	strd	r2, r3, [r1]
				EngTrModel_U.BrakeTorque = 0.0;
 800277c:	4932      	ldr	r1, [pc, #200]	; (8002848 <main+0x1d8>)
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9c1 2302 	strd	r2, r3, [r1, #8]
				msg[10] = (uint8_t) 2;
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <main+0x1e0>)
 800278c:	2202      	movs	r2, #2
 800278e:	729a      	strb	r2, [r3, #10]
 8002790:	e011      	b.n	80027b6 <main+0x146>
			}

		} else {
			EngTrModel_U.Throttle = acceleration;
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	f7fd fe58 	bl	8000448 <__aeabi_f2d>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	492a      	ldr	r1, [pc, #168]	; (8002848 <main+0x1d8>)
 800279e:	e9c1 2300 	strd	r2, r3, [r1]
			EngTrModel_U.BrakeTorque = 0.0;
 80027a2:	4929      	ldr	r1, [pc, #164]	; (8002848 <main+0x1d8>)
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			msg[10] = (uint8_t) 0;
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <main+0x1e0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	729a      	strb	r2, [r3, #10]
		}

		// Calculate the model output values
		EngTrModel_step();
 80027b6:	f7ff f8c7 	bl	8001948 <EngTrModel_step>

		// set the values in the msgs
		// placeholders to send later (we also remove decimals to send them)
		// TODO send decimals to the serial as well
		uint16_t e_speed = (uint16_t) EngTrModel_Y.EngineSpeed;
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <main+0x1e4>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7fe f970 	bl	8000aa8 <__aeabi_d2uiz>
 80027c8:	4603      	mov	r3, r0
 80027ca:	80fb      	strh	r3, [r7, #6]
		uint16_t v_speed = (uint16_t) EngTrModel_Y.VehicleSpeed;
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <main+0x1e4>)
 80027ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe f967 	bl	8000aa8 <__aeabi_d2uiz>
 80027da:	4603      	mov	r3, r0
 80027dc:	80bb      	strh	r3, [r7, #4]
		uint8_t gear = (uint8_t) EngTrModel_Y.Gear;
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <main+0x1e4>)
 80027e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7fe f95e 	bl	8000aa8 <__aeabi_d2uiz>
 80027ec:	4603      	mov	r3, r0
 80027ee:	70fb      	strb	r3, [r7, #3]

		msg[2] = (uint8_t) e_speed & 0xff;
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <main+0x1e0>)
 80027f6:	709a      	strb	r2, [r3, #2]
		msg[3] = (uint8_t) (e_speed >> 8);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <main+0x1e0>)
 8002802:	70da      	strb	r2, [r3, #3]


		msg[5] = (uint8_t) v_speed & 0xff;
 8002804:	88bb      	ldrh	r3, [r7, #4]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <main+0x1e0>)
 800280a:	715a      	strb	r2, [r3, #5]
		msg[6] = (uint8_t) (v_speed >> 8);
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <main+0x1e0>)
 8002816:	719a      	strb	r2, [r3, #6]

		msg[8] = (uint8_t) gear & 0xff;
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <main+0x1e0>)
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	7213      	strb	r3, [r2, #8]
		msg[9] = (uint8_t) (gear >> 8);
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	121b      	asrs	r3, r3, #8
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <main+0x1e0>)
 8002826:	725a      	strb	r2, [r3, #9]
	{
 8002828:	e737      	b.n	800269a <main+0x2a>
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w
 8002830:	66666666 	.word	0x66666666
 8002834:	3fee6666 	.word	0x3fee6666
 8002838:	42c80000 	.word	0x42c80000
 800283c:	457ff000 	.word	0x457ff000
 8002840:	42480000 	.word	0x42480000
 8002844:	40010c00 	.word	0x40010c00
 8002848:	20000260 	.word	0x20000260
 800284c:	40590000 	.word	0x40590000
 8002850:	20000000 	.word	0x20000000
 8002854:	20000270 	.word	0x20000270

08002858 <USER_RCC_Init>:
	}
}

void USER_RCC_Init(void){
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	
	/* System Clock (SYSCLK) configuration for 64 MHz */
	FLASH->ACR	&=	~( 0x5UL << 0U ); // two wait states latency, if SYSCLK > 48 MHz
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <USER_RCC_Init+0xac>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a28      	ldr	r2, [pc, #160]	; (8002904 <USER_RCC_Init+0xac>)
 8002862:	f023 0305 	bic.w	r3, r3, #5
 8002866:	6013      	str	r3, [r2, #0]
	FLASH->ACR	|=	 ( 0x2UL << 0U ); // two wait states latency, if SYSCLK > 48 MHz
 8002868:	4b26      	ldr	r3, [pc, #152]	; (8002904 <USER_RCC_Init+0xac>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <USER_RCC_Init+0xac>)
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	6013      	str	r3, [r2, #0]
	RCC->CFGR	&=	~( 0x1UL << 16U ) // PLL HSI clock /2 selected as PLL input clock
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <USER_RCC_Init+0xb0>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a23      	ldr	r2, [pc, #140]	; (8002908 <USER_RCC_Init+0xb0>)
 800287a:	f423 339d 	bic.w	r3, r3, #80384	; 0x13a00
 800287e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002882:	6053      	str	r3, [r2, #4]
				&	~( 0x7UL << 11U ) // APB2 prescaler /1
				&	~( 0x3UL << 8U ) // APB1 prescaler /2 (APB1 must not exceed 36 MHz)
				&	~( 0xFUL << 4U ); // AHB prescaler /1
	RCC->CFGR	|=	 ( 0xFUL << 18U ) // PLL input clock x 16 (PLLMUL bits)
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <USER_RCC_Init+0xb0>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <USER_RCC_Init+0xb0>)
 800288a:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 800288e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002892:	6053      	str	r3, [r2, #4]
				|	 ( 0x4UL << 8U ); // APB1 prescaler / 2
	RCC->CR		|=	 ( 0x1UL << 24U ); // PLL2 on
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <USER_RCC_Init+0xb0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <USER_RCC_Init+0xb0>)
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]
	while ( !(RCC->CR & ~( 0x1UL << 25U ))); // Wait until PLL is locked
 80028a0:	bf00      	nop
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <USER_RCC_Init+0xb0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f9      	beq.n	80028a2 <USER_RCC_Init+0x4a>
	RCC->CFGR	&=	~( 0x1UL << 0U ); // PLL used as system clock (SW bits)
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <USER_RCC_Init+0xb0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <USER_RCC_Init+0xb0>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR	|=	 ( 0x2UL << 0U ); // PLL used as system clock (SW bits)
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <USER_RCC_Init+0xb0>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <USER_RCC_Init+0xb0>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6053      	str	r3, [r2, #4]
	while ( 0x8UL != ( RCC->CFGR & 0xCUL )); // Wait until PLL is switched
 80028c6:	bf00      	nop
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <USER_RCC_Init+0xb0>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d1f9      	bne.n	80028c8 <USER_RCC_Init+0x70>

	RCC->CFGR	|=	 ( 0x3UL << 14U ); // PCLK2 divided by 8. PCLK2 is 64MHz and ADC clock is for 8 MHz
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <USER_RCC_Init+0xb0>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <USER_RCC_Init+0xb0>)
 80028da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028de:	6053      	str	r3, [r2, #4]
										// Clock for the ADC peripheral is configured. Must not exceed 14 MHz

	/* Enable clocks on the peripherals used */
	RCC->APB1ENR	|= ( 0x1UL << 0U )  // TIM2 clock enable
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <USER_RCC_Init+0xb0>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <USER_RCC_Init+0xb0>)
 80028e6:	f043 0307 	orr.w	r3, r3, #7
 80028ea:	61d3      	str	r3, [r2, #28]
					|  ( 0x1UL << 1U ) 	// TIM3 clock enable
					|  ( 0x1UL << 2U ); // TIM4 clock enable

	RCC->APB2ENR 	|= ( 0x1UL << 2U )  // IO Port A clock enable
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <USER_RCC_Init+0xb0>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a05      	ldr	r2, [pc, #20]	; (8002908 <USER_RCC_Init+0xb0>)
 80028f2:	f443 4384 	orr.w	r3, r3, #16896	; 0x4200
 80028f6:	f043 031c 	orr.w	r3, r3, #28
 80028fa:	6193      	str	r3, [r2, #24]
					| ( 0x1UL << 14U )  // USART 1 clock enable
					| ( 0x1UL << 3U )   // IO Port B clock enable
					| ( 0x1UL << 4U )   // IO Port C clock enable
					| ( 0x1UL << 9U );  // Configured ADC1 clock is enabled
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000

0800290c <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

	// Interrupt LED GPIO
	// clear bits to remove trash values
	GPIOA->CRL 	&= 	~( 0x3UL << 22U )
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <USER_GPIO_Init+0xd8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <USER_GPIO_Init+0xd8>)
 8002916:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800291a:	6013      	str	r3, [r2, #0]
				& 	~( 0x2UL << 20U );

	// set bits to configure
	GPIOA->CRL	|= ( 0x1UL << 20U ); // output, 10mhz
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <USER_GPIO_Init+0xd8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <USER_GPIO_Init+0xd8>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002926:	6013      	str	r3, [r2, #0]

	// 4x4 Keypad GPIOs

	// PB4: 'A' | Right movement
	GPIOB->CRL &=  ~( 0x3UL << 18U ) & ~( 0x3UL << 16U ); // Clear to CNF and MODE bits
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800292e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002932:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x2UL << 18U ); // CNF of PB4: Input with pull-up/pull-down
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800293a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800293e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x0UL << 16U ); // MODE of PB4: Input mode (reset state)
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |=	( 0x1UL <<  4U); // ODR of PB4: Input pull-up
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800294e:	f043 0310 	orr.w	r3, r3, #16
 8002952:	60d3      	str	r3, [r2, #12]
	
	// PB5: 'B' | Brake
	GPIOB->CRL &=  ~( 0x3UL << 22U ) & ~( 0x3UL << 20U ); // Clear to CNF and MODE bits
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800295a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800295e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x2UL << 22U ); // CNF of PB5: Input with pull-up/pull-down
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a20      	ldr	r2, [pc, #128]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x0UL << 20U ); // MODE of PB5: Input mode (reset state)
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800296e:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |=	( 0x1UL <<  5U); // ODR of PB5: Input pull-up
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800297a:	f043 0320 	orr.w	r3, r3, #32
 800297e:	60d3      	str	r3, [r2, #12]

	// PB6: 'C' | Left movement
	GPIOB->CRL &=  ~( 0x3UL << 26U ) & ~( 0x3UL << 24U ); // Clear to CNF and MODE bits
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002986:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800298a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x2UL << 26U ); // CNF of PB3: Input with pull-up/pull-down
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <USER_GPIO_Init+0xdc>)
 8002992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002996:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=	( 0x0UL << 24U ); // MODE of PB3: Input mode (reset state)
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <USER_GPIO_Init+0xdc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |=	( 0x1UL <<  6U); // ODR of PB3: Input pull-up
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <USER_GPIO_Init+0xdc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <USER_GPIO_Init+0xdc>)
 80029a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029aa:	60d3      	str	r3, [r2, #12]

	// PA0: Potenciometer Pin
	GPIOA->CRL &= 	~( 0x1UL << 2U ); // CNF of PA0: Analog mode
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029b2:	f023 0304 	bic.w	r3, r3, #4
 80029b6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= 	~( 0x1UL << 0U ); // MODE of PA0: Input mode (reset state)
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]

	GPIOA->CRH	&=	~( 0x1UL <<  6U )
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a06      	ldr	r2, [pc, #24]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80029ce:	6053      	str	r3, [r2, #4]
				&	~( 0x2UL <<  4U );

	GPIOA->CRH	|=	 ( 0x2UL <<  6U )
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <USER_GPIO_Init+0xd8>)
 80029d6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80029da:	6053      	str	r3, [r2, #4]
				|	 ( 0x1UL <<  4U );

}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40010800 	.word	0x40010800
 80029e8:	40010c00 	.word	0x40010c00

080029ec <map>:

/*
	Function to map a value from one range to another
*/
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7fe f8c7 	bl	8000b90 <__aeabi_fsub>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461c      	mov	r4, r3
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	6a38      	ldr	r0, [r7, #32]
 8002a0a:	f7fe f8c1 	bl	8000b90 <__aeabi_fsub>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4619      	mov	r1, r3
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7fe f9c6 	bl	8000da4 <__aeabi_fmul>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe f8b6 	bl	8000b90 <__aeabi_fsub>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7fe fa6f 	bl	8000f0c <__aeabi_fdiv>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f8ae 	bl	8000b94 <__addsf3>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
	...

08002a44 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002a4a:	2340      	movs	r3, #64	; 0x40
 8002a4c:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d10a      	bne.n	8002a76 <rtGetInf+0x32>
    inf = rtGetInfF();
 8002a60:	f000 f836 	bl	8002ad0 <rtGetInfF>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fcee 	bl	8000448 <__aeabi_f2d>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002a74:	e022      	b.n	8002abc <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8002a76:	2301      	movs	r3, #1
 8002a78:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002a7a:	f107 0310 	add.w	r3, r7, #16
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <rtGetInf+0x54>
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d009      	beq.n	8002aaa <rtGetInf+0x66>
 8002a96:	e011      	b.n	8002abc <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <rtGetInf+0x88>)
 8002a9a:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8002aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002aa8:	e008      	b.n	8002abc <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <rtGetInf+0x88>)
 8002aac:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8002ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002aba:	bf00      	nop
      }
    }
  }

  return inf;
 8002abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	7ff00000 	.word	0x7ff00000

08002ad0 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002ad6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8002ada:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d10a      	bne.n	8002b1a <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8002b04:	f000 f836 	bl	8002b74 <rtGetMinusInfF>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fc9c 	bl	8000448 <__aeabi_f2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002b18:	e022      	b.n	8002b60 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <rtGetMinusInf+0x54>
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d009      	beq.n	8002b4e <rtGetMinusInf+0x66>
 8002b3a:	e011      	b.n	8002b60 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <rtGetMinusInf+0x88>)
 8002b3e:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8002b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b48:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002b4c:	e008      	b.n	8002b60 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <rtGetMinusInf+0x88>)
 8002b50:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8002b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002b5e:	bf00      	nop
      }
    }
  }

  return minf;
 8002b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	fff00000 	.word	0xfff00000

08002b74 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <rtGetMinusInfF+0x18>)
 8002b7c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8002b7e:	687b      	ldr	r3, [r7, #4]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	ff800000 	.word	0xff800000

08002b90 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002b96:	2340      	movs	r3, #64	; 0x40
 8002b98:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d10a      	bne.n	8002bc2 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8002bac:	f000 f838 	bl	8002c20 <rtGetNaNF>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fc48 	bl	8000448 <__aeabi_f2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002bc0:	e024      	b.n	8002c0c <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002bc6:	f107 0310 	add.w	r3, r7, #16
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <rtGetNaN+0x54>
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d009      	beq.n	8002bf6 <rtGetNaN+0x66>
 8002be2:	e013      	b.n	8002c0c <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <rtGetNaN+0x8c>)
 8002be6:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8002bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002bf4:	e00a      	b.n	8002c0c <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 8002bf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002bfa:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c00:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 8002c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002c0a:	bf00      	nop
      }
    }
  }

  return nan;
 8002c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	fff80000 	.word	0xfff80000

08002c20 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002c30:	1dbb      	adds	r3, r7, #6
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <rtGetNaNF+0x2c>
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d003      	beq.n	8002c52 <rtGetNaNF+0x32>
 8002c4a:	e006      	b.n	8002c5a <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <rtGetNaNF+0x48>)
 8002c4e:	60bb      	str	r3, [r7, #8]
      break;
 8002c50:	e003      	b.n	8002c5a <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 8002c52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002c56:	60bb      	str	r3, [r7, #8]
      break;
 8002c58:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	ffc00000 	.word	0xffc00000

08002c6c <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8002c74:	f7ff ff8c 	bl	8002b90 <rtGetNaN>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4911      	ldr	r1, [pc, #68]	; (8002cc4 <rt_InitInfAndNaN+0x58>)
 8002c7e:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 8002c82:	f7ff ffcd 	bl	8002c20 <rtGetNaNF>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <rt_InitInfAndNaN+0x5c>)
 8002c8a:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 8002c8c:	f7ff feda 	bl	8002a44 <rtGetInf>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	490d      	ldr	r1, [pc, #52]	; (8002ccc <rt_InitInfAndNaN+0x60>)
 8002c96:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 8002c9a:	f7ff ff19 	bl	8002ad0 <rtGetInfF>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <rt_InitInfAndNaN+0x64>)
 8002ca2:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8002ca4:	f7ff ff20 	bl	8002ae8 <rtGetMinusInf>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <rt_InitInfAndNaN+0x68>)
 8002cae:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 8002cb2:	f7ff ff5f 	bl	8002b74 <rtGetMinusInfF>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <rt_InitInfAndNaN+0x6c>)
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000298 	.word	0x20000298
 8002cc8:	200002a8 	.word	0x200002a8
 8002ccc:	20000288 	.word	0x20000288
 8002cd0:	200002a0 	.word	0x200002a0
 8002cd4:	20000290 	.word	0x20000290
 8002cd8:	200002a4 	.word	0x200002a4

08002cdc <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <rtIsInf+0x40>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cf0:	f7fd fe6a 	bl	80009c8 <__aeabi_dcmpeq>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <rtIsInf+0x32>
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <rtIsInf+0x44>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d04:	f7fd fe60 	bl	80009c8 <__aeabi_dcmpeq>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <rtIsInf+0x36>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <rtIsInf+0x38>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000288 	.word	0x20000288
 8002d20:	20000290 	.word	0x20000290

08002d24 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d10b      	bne.n	8002d56 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 8002d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d42:	f7fd fed1 	bl	8000ae8 <__aeabi_d2f>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f84d 	bl	8002de8 <rtIsNaNF>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d54:	e040      	b.n	8002dd8 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 8002d56:	2301      	movs	r3, #1
 8002d58:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <rtIsNaN+0x54>
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d018      	beq.n	8002da8 <rtIsNaN+0x84>
 8002d76:	e02f      	b.n	8002dd8 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8002d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <rtIsNaN+0xc0>)
 8002d84:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <rtIsNaN+0xc0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d109      	bne.n	8002da0 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8002d96:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <rtIsNaN+0x7e>
 8002da0:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8002da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8002da6:	e017      	b.n	8002dd8 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <rtIsNaN+0xc0>)
 8002db4:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <rtIsNaN+0xc0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d109      	bne.n	8002dd0 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <rtIsNaN+0xac>
                             0x7FF00000 &&
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <rtIsNaN+0xae>
 8002dd0:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8002dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8002dd6:	bf00      	nop
      }
    }
  }

  return result;
 8002dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	7ff00000 	.word	0x7ff00000

08002de8 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8002dfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002dfe:	d106      	bne.n	8002e0e <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <rtIsNaNF+0x26>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <rtIsNaNF+0x28>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <_kill>:

int _kill(int pid, int sig)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e34:	f000 ff6e 	bl	8003d14 <__errno>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2216      	movs	r2, #22
 8002e3c:	601a      	str	r2, [r3, #0]
  return -1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_exit>:

void _exit (int status)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ffe7 	bl	8002e2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e5c:	e7fe      	b.n	8002e5c <_exit+0x12>

08002e5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e00a      	b.n	8002e86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e70:	f3af 8000 	nop.w
 8002e74:	4601      	mov	r1, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	60ba      	str	r2, [r7, #8]
 8002e7c:	b2ca      	uxtb	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3301      	adds	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	dbf0      	blt.n	8002e70 <_read+0x12>
  }

  return len;
 8002e8e:	687b      	ldr	r3, [r7, #4]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <_isatty>:

int _isatty(int file)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed4:	2301      	movs	r3, #1
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f000 fef4 	bl	8003d14 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20005000 	.word	0x20005000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	200002ac 	.word	0x200002ac
 8002f60:	20000400 	.word	0x20000400

08002f64 <USER_TIM2_Init>:
/////////////
// TIMER 2 //
/////////////

// Function that initializes TIM2 with constant values from tim.h
void USER_TIM2_Init( void ){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0

	TIM2->SMCR &= ~(TIM2_SMCR_SMS); 	// Enable the internal clock source
 8002f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f72:	f023 0307 	bic.w	r3, r3, #7
 8002f76:	6093      	str	r3, [r2, #8]
	TIM2->CR1 &= ~(TIM2_CR1_EA); 		// Set edge-aligned mode
 8002f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f82:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002f86:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(TIM2_CR1_UC); 		// Set up-counter mode
 8002f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f92:	f023 0310 	bic.w	r3, r3, #16
 8002f96:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(TIM2_CR1_UEV); 		// Set UEV enabled
 8002f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fa2:	f023 0302 	bic.w	r3, r3, #2
 8002fa6:	6013      	str	r3, [r2, #0]

	USER_TIM2_Reset(); // Executes reset function
 8002fa8:	f000 f804 	bl	8002fb4 <USER_TIM2_Reset>

	USER_TIM2_Start(); // Executes start function
 8002fac:	f000 f819 	bl	8002fe2 <USER_TIM2_Start>
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <USER_TIM2_Reset>:

// Set/Reset the values needed to count 1s
void USER_TIM2_Reset( void ){
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM2_SR_UIF);			// Clear the timer update interrupt flag
 8002fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6113      	str	r3, [r2, #16]
	TIM2->CNT = TIM2_CNT;				// Set initial count
 8002fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fcc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->PSC = TIM2_PSC;				// Set prescaler
 8002fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fd6:	2209      	movs	r2, #9
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <USER_TIM2_Start>:

// Start the counting
void USER_TIM2_Start( void ){
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
	TIM2->CR1 |= TIM2_CR1_CEN;			// Start counting
 8002fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6013      	str	r3, [r2, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <USER_TIM2_Delay>:

// Wait until the timer overflows and stop the timer
void USER_TIM2_Delay( void ){
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
	while(!( TIM2->SR & TIM2_SR_UIF ));
 8003002:	bf00      	nop
 8003004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f8      	beq.n	8003004 <USER_TIM2_Delay+0x6>

	TIM2->CR1 &= ~(TIM2_CR1_CEN);		// Stop the timer
 8003012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6013      	str	r3, [r2, #0]
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <USER_TIM3_Init>:
/////////////
// TIMER 3 //
/////////////

// Function that initializes TIM3 with constant values from tim.h
void USER_TIM3_Init( void ){
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
	TIM3->SMCR &= ~(TIM3_SMCR_SMS); 	// Enable the internal clock source
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <USER_TIM3_Init+0x58>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <USER_TIM3_Init+0x58>)
 8003036:	f023 0307 	bic.w	r3, r3, #7
 800303a:	6093      	str	r3, [r2, #8]
	TIM3->CR1 &= ~(TIM3_CR1_EA); 		// Set edge-aligned mode
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <USER_TIM3_Init+0x58>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a10      	ldr	r2, [pc, #64]	; (8003084 <USER_TIM3_Init+0x58>)
 8003042:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003046:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(TIM3_CR1_UC); 		// Set up-counter mode
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <USER_TIM3_Init+0x58>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <USER_TIM3_Init+0x58>)
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(TIM3_CR1_UEV); 		// Set UEV enabled
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <USER_TIM3_Init+0x58>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <USER_TIM3_Init+0x58>)
 800305a:	f023 0302 	bic.w	r3, r3, #2
 800305e:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= TIM3_DIER_UIE;		// Enable the update interrupt
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <USER_TIM3_Init+0x58>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <USER_TIM3_Init+0x58>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	60d3      	str	r3, [r2, #12]
	NVIC->ISER[0] |= NVIC_ISER_TIM3;	// Enable the TIM3 interrupt
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <USER_TIM3_Init+0x5c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <USER_TIM3_Init+0x5c>)
 8003072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003076:	6013      	str	r3, [r2, #0]

	USER_TIM3_Reset(); // Executes reset function
 8003078:	f000 f808 	bl	800308c <USER_TIM3_Reset>

	USER_TIM3_Start(); // Executes start function
 800307c:	f000 f81a 	bl	80030b4 <USER_TIM3_Start>
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40000400 	.word	0x40000400
 8003088:	e000e100 	.word	0xe000e100

0800308c <USER_TIM3_Reset>:

// Set/Reset the values needed to count 1s
void USER_TIM3_Reset( void ){
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(TIM3_SR_UIF);			// Clear the timer update interrupt flag
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <USER_TIM3_Reset+0x24>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <USER_TIM3_Reset+0x24>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	6113      	str	r3, [r2, #16]
	TIM3->CNT = TIM3_CNT;				// Set initial count
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <USER_TIM3_Reset+0x24>)
 800309e:	22e6      	movs	r2, #230	; 0xe6
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->PSC = TIM3_PSC;				// Set prescaler
 80030a2:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <USER_TIM3_Reset+0x24>)
 80030a4:	22c3      	movs	r2, #195	; 0xc3
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	40000400 	.word	0x40000400

080030b4 <USER_TIM3_Start>:

// Start the counting
void USER_TIM3_Start( void ){
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM3_CR1_CEN;			// Start counting
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <USER_TIM3_Start+0x18>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a03      	ldr	r2, [pc, #12]	; (80030cc <USER_TIM3_Start+0x18>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40000400 	.word	0x40000400

080030d0 <USER_TIM4_Init>:
/////////////
// TIMER 4 //
/////////////

// Function that initializes TIM4 with constant values from tim.h
void USER_TIM4_Init( void ){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	TIM4->SMCR &= ~(TIM4_SMCR_SMS); 	// Enable the internal clock source
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <USER_TIM4_Init+0x40>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <USER_TIM4_Init+0x40>)
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	6093      	str	r3, [r2, #8]
	TIM4->CR1 &= ~(TIM4_CR1_EA); 		// Set edge-aligned mode
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <USER_TIM4_Init+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <USER_TIM4_Init+0x40>)
 80030e6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80030ea:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(TIM4_CR1_UC); 		// Set up-counter mode
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <USER_TIM4_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <USER_TIM4_Init+0x40>)
 80030f2:	f023 0310 	bic.w	r3, r3, #16
 80030f6:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(TIM4_CR1_UEV); 		// Set UEV enabled
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <USER_TIM4_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <USER_TIM4_Init+0x40>)
 80030fe:	f023 0302 	bic.w	r3, r3, #2
 8003102:	6013      	str	r3, [r2, #0]

	USER_TIM4_Reset(); // Executes reset function
 8003104:	f000 f806 	bl	8003114 <USER_TIM4_Reset>

	USER_TIM4_Start(); // Executes start function
 8003108:	f000 f81a 	bl	8003140 <USER_TIM4_Start>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40000800 	.word	0x40000800

08003114 <USER_TIM4_Reset>:

// Set/Reset the values needed to count 1s
void USER_TIM4_Reset( void ){
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(TIM4_SR_UIF);			// Clear the timer update interrupt flag
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <USER_TIM4_Reset+0x28>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <USER_TIM4_Reset+0x28>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6113      	str	r3, [r2, #16]
	TIM4->CNT = TIM4_CNT;				// Set initial count
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <USER_TIM4_Reset+0x28>)
 8003126:	f64f 5280 	movw	r2, #64896	; 0xfd80
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->PSC = TIM4_PSC;				// Set prescaler
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <USER_TIM4_Reset+0x28>)
 800312e:	2200      	movs	r2, #0
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40000800 	.word	0x40000800

08003140 <USER_TIM4_Start>:

// Start the counting
void USER_TIM4_Start( void ){
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	TIM4->CR1 |= TIM4_CR1_CEN;			// Start counting
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <USER_TIM4_Start+0x18>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a03      	ldr	r2, [pc, #12]	; (8003158 <USER_TIM4_Start+0x18>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40000800 	.word	0x40000800

0800315c <USER_TIM4_Delay>:

// Wait until the timer overflows and stop the timer
void USER_TIM4_Delay( void ){
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
	while(!( TIM4->SR & TIM4_SR_UIF ));
 8003160:	bf00      	nop
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <USER_TIM4_Delay+0x28>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f9      	beq.n	8003162 <USER_TIM4_Delay+0x6>

	TIM4->CR1 &= ~(TIM4_CR1_CEN);		// Stop the timer
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <USER_TIM4_Delay+0x28>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <USER_TIM4_Delay+0x28>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6013      	str	r3, [r2, #0]
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40000800 	.word	0x40000800

08003188 <USER_USART1_Init>:
#include <stdint.h>
#include "main.h"
#include "uart.h"

void USER_USART1_Init( void ){
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
	USART1->CR1	|=	 USART_CR1_UE;//	Step 1 Usart enabled
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <USER_USART1_Init+0x50>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <USER_USART1_Init+0x50>)
 8003192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003196:	60d3      	str	r3, [r2, #12]
	USART1->CR1	&=	~USART_CR1_M;//		Step 2 8 Data bits
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <USER_USART1_Init+0x50>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <USER_USART1_Init+0x50>)
 800319e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031a2:	60d3      	str	r3, [r2, #12]
	USART1->CR2	&=	~USART_CR2_STOP;//	Step 3 1 Stop bit
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <USER_USART1_Init+0x50>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <USER_USART1_Init+0x50>)
 80031aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ae:	6113      	str	r3, [r2, #16]
	USART1->BRR	=	 USARTDIV;//		Step 5 Desired baud rate
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <USER_USART1_Init+0x50>)
 80031b2:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80031b6:	609a      	str	r2, [r3, #8]
	USART1->CR1	|= 	 USART_CR1_TE;//	Step 6 Transmitter enabled
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <USER_USART1_Init+0x50>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <USER_USART1_Init+0x50>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	60d3      	str	r3, [r2, #12]
	USART1->CR1	|= 	 USART_CR1_RE;//	Step 7 Receiver enabled
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <USER_USART1_Init+0x50>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <USER_USART1_Init+0x50>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	40013800 	.word	0x40013800

080031dc <USER_USART1_Send_8bit>:

void USER_USART1_Send_8bit( uint8_t Data ){
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
	while(!( USART1->SR & USART_SR_TXE ));//	wait until next data can be written
 80031e6:	bf00      	nop
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <USER_USART1_Send_8bit+0x28>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f9      	beq.n	80031e8 <USER_USART1_Send_8bit+0xc>
	USART1->DR = Data;//				Step 7 Data to send
 80031f4:	4a03      	ldr	r2, [pc, #12]	; (8003204 <USER_USART1_Send_8bit+0x28>)
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	6053      	str	r3, [r2, #4]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40013800 	.word	0x40013800

08003208 <_write>:
uint8_t USER_USART1_Read_8bit() {
	while(!( USART1->SR & USART_SR_RNXE ));//	wait until next data can be read
	return USART1->DR;
}

int _write(int file, char *ptr, int len) {
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
	for (int data_idx = 0; data_idx < len; data_idx++) {
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e00f      	b.n	800323a <_write+0x32>
		while ( !(USART1->SR & USART_SR_TXE) );
 800321a:	bf00      	nop
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <_write+0x48>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f9      	beq.n	800321c <_write+0x14>
		USART1->DR = *ptr++;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	60ba      	str	r2, [r7, #8]
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <_write+0x48>)
 8003232:	605a      	str	r2, [r3, #4]
	for (int data_idx = 0; data_idx < len; data_idx++) {
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	dbeb      	blt.n	800321a <_write+0x12>
	}
	return len;
 8003242:	687b      	ldr	r3, [r7, #4]
}
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40013800 	.word	0x40013800

08003254 <USER_UART_Send_Message>:

void USER_UART_Send_Message( uint8_t *msg, uint16_t size ){
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
	for( int i = 0; i < size; i++ ){
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e009      	b.n	800327a <USER_UART_Send_Message+0x26>
		USER_USART1_Send_8bit( *msg++ );
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ffb4 	bl	80031dc <USER_USART1_Send_8bit>
	for( int i = 0; i < size; i++ ){
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	429a      	cmp	r2, r3
 8003280:	dbf1      	blt.n	8003266 <USER_UART_Send_Message+0x12>
	}
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800328c:	480d      	ldr	r0, [pc, #52]	; (80032c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800328e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003294:	480c      	ldr	r0, [pc, #48]	; (80032c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003296:	490d      	ldr	r1, [pc, #52]	; (80032cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <LoopForever+0xe>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800329c:	e002      	b.n	80032a4 <LoopCopyDataInit>

0800329e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a2:	3304      	adds	r3, #4

080032a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a8:	d3f9      	bcc.n	800329e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032ac:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <LoopForever+0x16>)
  movs r3, #0
 80032ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b0:	e001      	b.n	80032b6 <LoopFillZerobss>

080032b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b4:	3204      	adds	r2, #4

080032b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b8:	d3fb      	bcc.n	80032b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032ba:	f000 fd31 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032be:	f7ff f9d7 	bl	8002670 <main>

080032c2 <LoopForever>:

LoopForever:
  b LoopForever
 80032c2:	e7fe      	b.n	80032c2 <LoopForever>
  ldr   r0, =_estack
 80032c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80032c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032cc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80032d0:	080077d8 	.word	0x080077d8
  ldr r2, =_sbss
 80032d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80032d8:	200003fc 	.word	0x200003fc

080032dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032dc:	e7fe      	b.n	80032dc <ADC1_2_IRQHandler>

080032de <__cvt>:
 80032de:	2b00      	cmp	r3, #0
 80032e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	461f      	mov	r7, r3
 80032e6:	bfbb      	ittet	lt
 80032e8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80032ec:	461f      	movlt	r7, r3
 80032ee:	2300      	movge	r3, #0
 80032f0:	232d      	movlt	r3, #45	; 0x2d
 80032f2:	b088      	sub	sp, #32
 80032f4:	4614      	mov	r4, r2
 80032f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80032f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80032fa:	7013      	strb	r3, [r2, #0]
 80032fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80032fe:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003302:	f023 0820 	bic.w	r8, r3, #32
 8003306:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800330a:	d005      	beq.n	8003318 <__cvt+0x3a>
 800330c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003310:	d100      	bne.n	8003314 <__cvt+0x36>
 8003312:	3501      	adds	r5, #1
 8003314:	2302      	movs	r3, #2
 8003316:	e000      	b.n	800331a <__cvt+0x3c>
 8003318:	2303      	movs	r3, #3
 800331a:	aa07      	add	r2, sp, #28
 800331c:	9204      	str	r2, [sp, #16]
 800331e:	aa06      	add	r2, sp, #24
 8003320:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003324:	e9cd 3500 	strd	r3, r5, [sp]
 8003328:	4622      	mov	r2, r4
 800332a:	463b      	mov	r3, r7
 800332c:	f000 fdb8 	bl	8003ea0 <_dtoa_r>
 8003330:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003334:	4606      	mov	r6, r0
 8003336:	d102      	bne.n	800333e <__cvt+0x60>
 8003338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800333a:	07db      	lsls	r3, r3, #31
 800333c:	d522      	bpl.n	8003384 <__cvt+0xa6>
 800333e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003342:	eb06 0905 	add.w	r9, r6, r5
 8003346:	d110      	bne.n	800336a <__cvt+0x8c>
 8003348:	7833      	ldrb	r3, [r6, #0]
 800334a:	2b30      	cmp	r3, #48	; 0x30
 800334c:	d10a      	bne.n	8003364 <__cvt+0x86>
 800334e:	2200      	movs	r2, #0
 8003350:	2300      	movs	r3, #0
 8003352:	4620      	mov	r0, r4
 8003354:	4639      	mov	r1, r7
 8003356:	f7fd fb37 	bl	80009c8 <__aeabi_dcmpeq>
 800335a:	b918      	cbnz	r0, 8003364 <__cvt+0x86>
 800335c:	f1c5 0501 	rsb	r5, r5, #1
 8003360:	f8ca 5000 	str.w	r5, [sl]
 8003364:	f8da 3000 	ldr.w	r3, [sl]
 8003368:	4499      	add	r9, r3
 800336a:	2200      	movs	r2, #0
 800336c:	2300      	movs	r3, #0
 800336e:	4620      	mov	r0, r4
 8003370:	4639      	mov	r1, r7
 8003372:	f7fd fb29 	bl	80009c8 <__aeabi_dcmpeq>
 8003376:	b108      	cbz	r0, 800337c <__cvt+0x9e>
 8003378:	f8cd 901c 	str.w	r9, [sp, #28]
 800337c:	2230      	movs	r2, #48	; 0x30
 800337e:	9b07      	ldr	r3, [sp, #28]
 8003380:	454b      	cmp	r3, r9
 8003382:	d307      	bcc.n	8003394 <__cvt+0xb6>
 8003384:	4630      	mov	r0, r6
 8003386:	9b07      	ldr	r3, [sp, #28]
 8003388:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800338a:	1b9b      	subs	r3, r3, r6
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	b008      	add	sp, #32
 8003390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003394:	1c59      	adds	r1, r3, #1
 8003396:	9107      	str	r1, [sp, #28]
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e7f0      	b.n	800337e <__cvt+0xa0>

0800339c <__exponent>:
 800339c:	4603      	mov	r3, r0
 800339e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033a0:	2900      	cmp	r1, #0
 80033a2:	f803 2b02 	strb.w	r2, [r3], #2
 80033a6:	bfb6      	itet	lt
 80033a8:	222d      	movlt	r2, #45	; 0x2d
 80033aa:	222b      	movge	r2, #43	; 0x2b
 80033ac:	4249      	neglt	r1, r1
 80033ae:	2909      	cmp	r1, #9
 80033b0:	7042      	strb	r2, [r0, #1]
 80033b2:	dd2a      	ble.n	800340a <__exponent+0x6e>
 80033b4:	f10d 0207 	add.w	r2, sp, #7
 80033b8:	4617      	mov	r7, r2
 80033ba:	260a      	movs	r6, #10
 80033bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80033c0:	4694      	mov	ip, r2
 80033c2:	fb06 1415 	mls	r4, r6, r5, r1
 80033c6:	3430      	adds	r4, #48	; 0x30
 80033c8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80033cc:	460c      	mov	r4, r1
 80033ce:	2c63      	cmp	r4, #99	; 0x63
 80033d0:	4629      	mov	r1, r5
 80033d2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80033d6:	dcf1      	bgt.n	80033bc <__exponent+0x20>
 80033d8:	3130      	adds	r1, #48	; 0x30
 80033da:	f1ac 0402 	sub.w	r4, ip, #2
 80033de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80033e2:	4622      	mov	r2, r4
 80033e4:	1c41      	adds	r1, r0, #1
 80033e6:	42ba      	cmp	r2, r7
 80033e8:	d30a      	bcc.n	8003400 <__exponent+0x64>
 80033ea:	f10d 0209 	add.w	r2, sp, #9
 80033ee:	eba2 020c 	sub.w	r2, r2, ip
 80033f2:	42bc      	cmp	r4, r7
 80033f4:	bf88      	it	hi
 80033f6:	2200      	movhi	r2, #0
 80033f8:	4413      	add	r3, r2
 80033fa:	1a18      	subs	r0, r3, r0
 80033fc:	b003      	add	sp, #12
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003400:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003404:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003408:	e7ed      	b.n	80033e6 <__exponent+0x4a>
 800340a:	2330      	movs	r3, #48	; 0x30
 800340c:	3130      	adds	r1, #48	; 0x30
 800340e:	7083      	strb	r3, [r0, #2]
 8003410:	70c1      	strb	r1, [r0, #3]
 8003412:	1d03      	adds	r3, r0, #4
 8003414:	e7f1      	b.n	80033fa <__exponent+0x5e>
	...

08003418 <_printf_float>:
 8003418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341c:	b091      	sub	sp, #68	; 0x44
 800341e:	460c      	mov	r4, r1
 8003420:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003424:	4616      	mov	r6, r2
 8003426:	461f      	mov	r7, r3
 8003428:	4605      	mov	r5, r0
 800342a:	f000 fc6f 	bl	8003d0c <_localeconv_r>
 800342e:	6803      	ldr	r3, [r0, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	9309      	str	r3, [sp, #36]	; 0x24
 8003434:	f7fc fe9c 	bl	8000170 <strlen>
 8003438:	2300      	movs	r3, #0
 800343a:	930e      	str	r3, [sp, #56]	; 0x38
 800343c:	f8d8 3000 	ldr.w	r3, [r8]
 8003440:	900a      	str	r0, [sp, #40]	; 0x28
 8003442:	3307      	adds	r3, #7
 8003444:	f023 0307 	bic.w	r3, r3, #7
 8003448:	f103 0208 	add.w	r2, r3, #8
 800344c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003450:	f8d4 b000 	ldr.w	fp, [r4]
 8003454:	f8c8 2000 	str.w	r2, [r8]
 8003458:	e9d3 a800 	ldrd	sl, r8, [r3]
 800345c:	4652      	mov	r2, sl
 800345e:	4643      	mov	r3, r8
 8003460:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003464:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003468:	930b      	str	r3, [sp, #44]	; 0x2c
 800346a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346e:	4650      	mov	r0, sl
 8003470:	4b9c      	ldr	r3, [pc, #624]	; (80036e4 <_printf_float+0x2cc>)
 8003472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003474:	f7fd fada 	bl	8000a2c <__aeabi_dcmpun>
 8003478:	bb70      	cbnz	r0, 80034d8 <_printf_float+0xc0>
 800347a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800347e:	4650      	mov	r0, sl
 8003480:	4b98      	ldr	r3, [pc, #608]	; (80036e4 <_printf_float+0x2cc>)
 8003482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003484:	f7fd fab4 	bl	80009f0 <__aeabi_dcmple>
 8003488:	bb30      	cbnz	r0, 80034d8 <_printf_float+0xc0>
 800348a:	2200      	movs	r2, #0
 800348c:	2300      	movs	r3, #0
 800348e:	4650      	mov	r0, sl
 8003490:	4641      	mov	r1, r8
 8003492:	f7fd faa3 	bl	80009dc <__aeabi_dcmplt>
 8003496:	b110      	cbz	r0, 800349e <_printf_float+0x86>
 8003498:	232d      	movs	r3, #45	; 0x2d
 800349a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800349e:	4a92      	ldr	r2, [pc, #584]	; (80036e8 <_printf_float+0x2d0>)
 80034a0:	4b92      	ldr	r3, [pc, #584]	; (80036ec <_printf_float+0x2d4>)
 80034a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034a6:	bf94      	ite	ls
 80034a8:	4690      	movls	r8, r2
 80034aa:	4698      	movhi	r8, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	f04f 0a00 	mov.w	sl, #0
 80034b2:	6123      	str	r3, [r4, #16]
 80034b4:	f02b 0304 	bic.w	r3, fp, #4
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	4633      	mov	r3, r6
 80034bc:	4621      	mov	r1, r4
 80034be:	4628      	mov	r0, r5
 80034c0:	9700      	str	r7, [sp, #0]
 80034c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80034c4:	f000 f9d6 	bl	8003874 <_printf_common>
 80034c8:	3001      	adds	r0, #1
 80034ca:	f040 8090 	bne.w	80035ee <_printf_float+0x1d6>
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034d2:	b011      	add	sp, #68	; 0x44
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d8:	4652      	mov	r2, sl
 80034da:	4643      	mov	r3, r8
 80034dc:	4650      	mov	r0, sl
 80034de:	4641      	mov	r1, r8
 80034e0:	f7fd faa4 	bl	8000a2c <__aeabi_dcmpun>
 80034e4:	b148      	cbz	r0, 80034fa <_printf_float+0xe2>
 80034e6:	f1b8 0f00 	cmp.w	r8, #0
 80034ea:	bfb8      	it	lt
 80034ec:	232d      	movlt	r3, #45	; 0x2d
 80034ee:	4a80      	ldr	r2, [pc, #512]	; (80036f0 <_printf_float+0x2d8>)
 80034f0:	bfb8      	it	lt
 80034f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034f6:	4b7f      	ldr	r3, [pc, #508]	; (80036f4 <_printf_float+0x2dc>)
 80034f8:	e7d3      	b.n	80034a2 <_printf_float+0x8a>
 80034fa:	6863      	ldr	r3, [r4, #4]
 80034fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	d142      	bne.n	800358a <_printf_float+0x172>
 8003504:	2306      	movs	r3, #6
 8003506:	6063      	str	r3, [r4, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	9206      	str	r2, [sp, #24]
 800350c:	aa0e      	add	r2, sp, #56	; 0x38
 800350e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003512:	aa0d      	add	r2, sp, #52	; 0x34
 8003514:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003518:	9203      	str	r2, [sp, #12]
 800351a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800351e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	4652      	mov	r2, sl
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4628      	mov	r0, r5
 800352c:	4643      	mov	r3, r8
 800352e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003530:	f7ff fed5 	bl	80032de <__cvt>
 8003534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003536:	4680      	mov	r8, r0
 8003538:	2947      	cmp	r1, #71	; 0x47
 800353a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800353c:	d108      	bne.n	8003550 <_printf_float+0x138>
 800353e:	1cc8      	adds	r0, r1, #3
 8003540:	db02      	blt.n	8003548 <_printf_float+0x130>
 8003542:	6863      	ldr	r3, [r4, #4]
 8003544:	4299      	cmp	r1, r3
 8003546:	dd40      	ble.n	80035ca <_printf_float+0x1b2>
 8003548:	f1a9 0902 	sub.w	r9, r9, #2
 800354c:	fa5f f989 	uxtb.w	r9, r9
 8003550:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003554:	d81f      	bhi.n	8003596 <_printf_float+0x17e>
 8003556:	464a      	mov	r2, r9
 8003558:	3901      	subs	r1, #1
 800355a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800355e:	910d      	str	r1, [sp, #52]	; 0x34
 8003560:	f7ff ff1c 	bl	800339c <__exponent>
 8003564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003566:	4682      	mov	sl, r0
 8003568:	1813      	adds	r3, r2, r0
 800356a:	2a01      	cmp	r2, #1
 800356c:	6123      	str	r3, [r4, #16]
 800356e:	dc02      	bgt.n	8003576 <_printf_float+0x15e>
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	07d2      	lsls	r2, r2, #31
 8003574:	d501      	bpl.n	800357a <_printf_float+0x162>
 8003576:	3301      	adds	r3, #1
 8003578:	6123      	str	r3, [r4, #16]
 800357a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800357e:	2b00      	cmp	r3, #0
 8003580:	d09b      	beq.n	80034ba <_printf_float+0xa2>
 8003582:	232d      	movs	r3, #45	; 0x2d
 8003584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003588:	e797      	b.n	80034ba <_printf_float+0xa2>
 800358a:	2947      	cmp	r1, #71	; 0x47
 800358c:	d1bc      	bne.n	8003508 <_printf_float+0xf0>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ba      	bne.n	8003508 <_printf_float+0xf0>
 8003592:	2301      	movs	r3, #1
 8003594:	e7b7      	b.n	8003506 <_printf_float+0xee>
 8003596:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800359a:	d118      	bne.n	80035ce <_printf_float+0x1b6>
 800359c:	2900      	cmp	r1, #0
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	dd0b      	ble.n	80035ba <_printf_float+0x1a2>
 80035a2:	6121      	str	r1, [r4, #16]
 80035a4:	b913      	cbnz	r3, 80035ac <_printf_float+0x194>
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	07d0      	lsls	r0, r2, #31
 80035aa:	d502      	bpl.n	80035b2 <_printf_float+0x19a>
 80035ac:	3301      	adds	r3, #1
 80035ae:	440b      	add	r3, r1
 80035b0:	6123      	str	r3, [r4, #16]
 80035b2:	f04f 0a00 	mov.w	sl, #0
 80035b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80035b8:	e7df      	b.n	800357a <_printf_float+0x162>
 80035ba:	b913      	cbnz	r3, 80035c2 <_printf_float+0x1aa>
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	07d2      	lsls	r2, r2, #31
 80035c0:	d501      	bpl.n	80035c6 <_printf_float+0x1ae>
 80035c2:	3302      	adds	r3, #2
 80035c4:	e7f4      	b.n	80035b0 <_printf_float+0x198>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e7f2      	b.n	80035b0 <_printf_float+0x198>
 80035ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80035ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d0:	4299      	cmp	r1, r3
 80035d2:	db05      	blt.n	80035e0 <_printf_float+0x1c8>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	6121      	str	r1, [r4, #16]
 80035d8:	07d8      	lsls	r0, r3, #31
 80035da:	d5ea      	bpl.n	80035b2 <_printf_float+0x19a>
 80035dc:	1c4b      	adds	r3, r1, #1
 80035de:	e7e7      	b.n	80035b0 <_printf_float+0x198>
 80035e0:	2900      	cmp	r1, #0
 80035e2:	bfcc      	ite	gt
 80035e4:	2201      	movgt	r2, #1
 80035e6:	f1c1 0202 	rsble	r2, r1, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	e7e0      	b.n	80035b0 <_printf_float+0x198>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	055a      	lsls	r2, r3, #21
 80035f2:	d407      	bmi.n	8003604 <_printf_float+0x1ec>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	4642      	mov	r2, r8
 80035f8:	4631      	mov	r1, r6
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	3001      	adds	r0, #1
 8003600:	d12b      	bne.n	800365a <_printf_float+0x242>
 8003602:	e764      	b.n	80034ce <_printf_float+0xb6>
 8003604:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003608:	f240 80dd 	bls.w	80037c6 <_printf_float+0x3ae>
 800360c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003610:	2200      	movs	r2, #0
 8003612:	2300      	movs	r3, #0
 8003614:	f7fd f9d8 	bl	80009c8 <__aeabi_dcmpeq>
 8003618:	2800      	cmp	r0, #0
 800361a:	d033      	beq.n	8003684 <_printf_float+0x26c>
 800361c:	2301      	movs	r3, #1
 800361e:	4631      	mov	r1, r6
 8003620:	4628      	mov	r0, r5
 8003622:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <_printf_float+0x2e0>)
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	f43f af51 	beq.w	80034ce <_printf_float+0xb6>
 800362c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003630:	429a      	cmp	r2, r3
 8003632:	db02      	blt.n	800363a <_printf_float+0x222>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	07d8      	lsls	r0, r3, #31
 8003638:	d50f      	bpl.n	800365a <_printf_float+0x242>
 800363a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	47b8      	blx	r7
 8003644:	3001      	adds	r0, #1
 8003646:	f43f af42 	beq.w	80034ce <_printf_float+0xb6>
 800364a:	f04f 0800 	mov.w	r8, #0
 800364e:	f104 091a 	add.w	r9, r4, #26
 8003652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003654:	3b01      	subs	r3, #1
 8003656:	4543      	cmp	r3, r8
 8003658:	dc09      	bgt.n	800366e <_printf_float+0x256>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	079b      	lsls	r3, r3, #30
 800365e:	f100 8104 	bmi.w	800386a <_printf_float+0x452>
 8003662:	68e0      	ldr	r0, [r4, #12]
 8003664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003666:	4298      	cmp	r0, r3
 8003668:	bfb8      	it	lt
 800366a:	4618      	movlt	r0, r3
 800366c:	e731      	b.n	80034d2 <_printf_float+0xba>
 800366e:	2301      	movs	r3, #1
 8003670:	464a      	mov	r2, r9
 8003672:	4631      	mov	r1, r6
 8003674:	4628      	mov	r0, r5
 8003676:	47b8      	blx	r7
 8003678:	3001      	adds	r0, #1
 800367a:	f43f af28 	beq.w	80034ce <_printf_float+0xb6>
 800367e:	f108 0801 	add.w	r8, r8, #1
 8003682:	e7e6      	b.n	8003652 <_printf_float+0x23a>
 8003684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	dc38      	bgt.n	80036fc <_printf_float+0x2e4>
 800368a:	2301      	movs	r3, #1
 800368c:	4631      	mov	r1, r6
 800368e:	4628      	mov	r0, r5
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <_printf_float+0x2e0>)
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	f43f af1a 	beq.w	80034ce <_printf_float+0xb6>
 800369a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800369e:	4313      	orrs	r3, r2
 80036a0:	d102      	bne.n	80036a8 <_printf_float+0x290>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	07d9      	lsls	r1, r3, #31
 80036a6:	d5d8      	bpl.n	800365a <_printf_float+0x242>
 80036a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036ac:	4631      	mov	r1, r6
 80036ae:	4628      	mov	r0, r5
 80036b0:	47b8      	blx	r7
 80036b2:	3001      	adds	r0, #1
 80036b4:	f43f af0b 	beq.w	80034ce <_printf_float+0xb6>
 80036b8:	f04f 0900 	mov.w	r9, #0
 80036bc:	f104 0a1a 	add.w	sl, r4, #26
 80036c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036c2:	425b      	negs	r3, r3
 80036c4:	454b      	cmp	r3, r9
 80036c6:	dc01      	bgt.n	80036cc <_printf_float+0x2b4>
 80036c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036ca:	e794      	b.n	80035f6 <_printf_float+0x1de>
 80036cc:	2301      	movs	r3, #1
 80036ce:	4652      	mov	r2, sl
 80036d0:	4631      	mov	r1, r6
 80036d2:	4628      	mov	r0, r5
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	f43f aef9 	beq.w	80034ce <_printf_float+0xb6>
 80036dc:	f109 0901 	add.w	r9, r9, #1
 80036e0:	e7ee      	b.n	80036c0 <_printf_float+0x2a8>
 80036e2:	bf00      	nop
 80036e4:	7fefffff 	.word	0x7fefffff
 80036e8:	08007428 	.word	0x08007428
 80036ec:	0800742c 	.word	0x0800742c
 80036f0:	08007430 	.word	0x08007430
 80036f4:	08007434 	.word	0x08007434
 80036f8:	08007438 	.word	0x08007438
 80036fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003700:	429a      	cmp	r2, r3
 8003702:	bfa8      	it	ge
 8003704:	461a      	movge	r2, r3
 8003706:	2a00      	cmp	r2, #0
 8003708:	4691      	mov	r9, r2
 800370a:	dc37      	bgt.n	800377c <_printf_float+0x364>
 800370c:	f04f 0b00 	mov.w	fp, #0
 8003710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003714:	f104 021a 	add.w	r2, r4, #26
 8003718:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800371c:	ebaa 0309 	sub.w	r3, sl, r9
 8003720:	455b      	cmp	r3, fp
 8003722:	dc33      	bgt.n	800378c <_printf_float+0x374>
 8003724:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003728:	429a      	cmp	r2, r3
 800372a:	db3b      	blt.n	80037a4 <_printf_float+0x38c>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	07da      	lsls	r2, r3, #31
 8003730:	d438      	bmi.n	80037a4 <_printf_float+0x38c>
 8003732:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003736:	eba2 0903 	sub.w	r9, r2, r3
 800373a:	eba2 020a 	sub.w	r2, r2, sl
 800373e:	4591      	cmp	r9, r2
 8003740:	bfa8      	it	ge
 8003742:	4691      	movge	r9, r2
 8003744:	f1b9 0f00 	cmp.w	r9, #0
 8003748:	dc34      	bgt.n	80037b4 <_printf_float+0x39c>
 800374a:	f04f 0800 	mov.w	r8, #0
 800374e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003752:	f104 0a1a 	add.w	sl, r4, #26
 8003756:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	eba3 0309 	sub.w	r3, r3, r9
 8003760:	4543      	cmp	r3, r8
 8003762:	f77f af7a 	ble.w	800365a <_printf_float+0x242>
 8003766:	2301      	movs	r3, #1
 8003768:	4652      	mov	r2, sl
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	47b8      	blx	r7
 8003770:	3001      	adds	r0, #1
 8003772:	f43f aeac 	beq.w	80034ce <_printf_float+0xb6>
 8003776:	f108 0801 	add.w	r8, r8, #1
 800377a:	e7ec      	b.n	8003756 <_printf_float+0x33e>
 800377c:	4613      	mov	r3, r2
 800377e:	4631      	mov	r1, r6
 8003780:	4642      	mov	r2, r8
 8003782:	4628      	mov	r0, r5
 8003784:	47b8      	blx	r7
 8003786:	3001      	adds	r0, #1
 8003788:	d1c0      	bne.n	800370c <_printf_float+0x2f4>
 800378a:	e6a0      	b.n	80034ce <_printf_float+0xb6>
 800378c:	2301      	movs	r3, #1
 800378e:	4631      	mov	r1, r6
 8003790:	4628      	mov	r0, r5
 8003792:	920b      	str	r2, [sp, #44]	; 0x2c
 8003794:	47b8      	blx	r7
 8003796:	3001      	adds	r0, #1
 8003798:	f43f ae99 	beq.w	80034ce <_printf_float+0xb6>
 800379c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800379e:	f10b 0b01 	add.w	fp, fp, #1
 80037a2:	e7b9      	b.n	8003718 <_printf_float+0x300>
 80037a4:	4631      	mov	r1, r6
 80037a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037aa:	4628      	mov	r0, r5
 80037ac:	47b8      	blx	r7
 80037ae:	3001      	adds	r0, #1
 80037b0:	d1bf      	bne.n	8003732 <_printf_float+0x31a>
 80037b2:	e68c      	b.n	80034ce <_printf_float+0xb6>
 80037b4:	464b      	mov	r3, r9
 80037b6:	4631      	mov	r1, r6
 80037b8:	4628      	mov	r0, r5
 80037ba:	eb08 020a 	add.w	r2, r8, sl
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	d1c2      	bne.n	800374a <_printf_float+0x332>
 80037c4:	e683      	b.n	80034ce <_printf_float+0xb6>
 80037c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037c8:	2a01      	cmp	r2, #1
 80037ca:	dc01      	bgt.n	80037d0 <_printf_float+0x3b8>
 80037cc:	07db      	lsls	r3, r3, #31
 80037ce:	d539      	bpl.n	8003844 <_printf_float+0x42c>
 80037d0:	2301      	movs	r3, #1
 80037d2:	4642      	mov	r2, r8
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	f43f ae77 	beq.w	80034ce <_printf_float+0xb6>
 80037e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037e4:	4631      	mov	r1, r6
 80037e6:	4628      	mov	r0, r5
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	f43f ae6f 	beq.w	80034ce <_printf_float+0xb6>
 80037f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037f4:	2200      	movs	r2, #0
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80037fc:	f7fd f8e4 	bl	80009c8 <__aeabi_dcmpeq>
 8003800:	b9d8      	cbnz	r0, 800383a <_printf_float+0x422>
 8003802:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8003806:	f108 0201 	add.w	r2, r8, #1
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	d10e      	bne.n	8003832 <_printf_float+0x41a>
 8003814:	e65b      	b.n	80034ce <_printf_float+0xb6>
 8003816:	2301      	movs	r3, #1
 8003818:	464a      	mov	r2, r9
 800381a:	4631      	mov	r1, r6
 800381c:	4628      	mov	r0, r5
 800381e:	47b8      	blx	r7
 8003820:	3001      	adds	r0, #1
 8003822:	f43f ae54 	beq.w	80034ce <_printf_float+0xb6>
 8003826:	f108 0801 	add.w	r8, r8, #1
 800382a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800382c:	3b01      	subs	r3, #1
 800382e:	4543      	cmp	r3, r8
 8003830:	dcf1      	bgt.n	8003816 <_printf_float+0x3fe>
 8003832:	4653      	mov	r3, sl
 8003834:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003838:	e6de      	b.n	80035f8 <_printf_float+0x1e0>
 800383a:	f04f 0800 	mov.w	r8, #0
 800383e:	f104 091a 	add.w	r9, r4, #26
 8003842:	e7f2      	b.n	800382a <_printf_float+0x412>
 8003844:	2301      	movs	r3, #1
 8003846:	4642      	mov	r2, r8
 8003848:	e7df      	b.n	800380a <_printf_float+0x3f2>
 800384a:	2301      	movs	r3, #1
 800384c:	464a      	mov	r2, r9
 800384e:	4631      	mov	r1, r6
 8003850:	4628      	mov	r0, r5
 8003852:	47b8      	blx	r7
 8003854:	3001      	adds	r0, #1
 8003856:	f43f ae3a 	beq.w	80034ce <_printf_float+0xb6>
 800385a:	f108 0801 	add.w	r8, r8, #1
 800385e:	68e3      	ldr	r3, [r4, #12]
 8003860:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003862:	1a5b      	subs	r3, r3, r1
 8003864:	4543      	cmp	r3, r8
 8003866:	dcf0      	bgt.n	800384a <_printf_float+0x432>
 8003868:	e6fb      	b.n	8003662 <_printf_float+0x24a>
 800386a:	f04f 0800 	mov.w	r8, #0
 800386e:	f104 0919 	add.w	r9, r4, #25
 8003872:	e7f4      	b.n	800385e <_printf_float+0x446>

08003874 <_printf_common>:
 8003874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	4616      	mov	r6, r2
 800387a:	4699      	mov	r9, r3
 800387c:	688a      	ldr	r2, [r1, #8]
 800387e:	690b      	ldr	r3, [r1, #16]
 8003880:	4607      	mov	r7, r0
 8003882:	4293      	cmp	r3, r2
 8003884:	bfb8      	it	lt
 8003886:	4613      	movlt	r3, r2
 8003888:	6033      	str	r3, [r6, #0]
 800388a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800388e:	460c      	mov	r4, r1
 8003890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003894:	b10a      	cbz	r2, 800389a <_printf_common+0x26>
 8003896:	3301      	adds	r3, #1
 8003898:	6033      	str	r3, [r6, #0]
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	0699      	lsls	r1, r3, #26
 800389e:	bf42      	ittt	mi
 80038a0:	6833      	ldrmi	r3, [r6, #0]
 80038a2:	3302      	addmi	r3, #2
 80038a4:	6033      	strmi	r3, [r6, #0]
 80038a6:	6825      	ldr	r5, [r4, #0]
 80038a8:	f015 0506 	ands.w	r5, r5, #6
 80038ac:	d106      	bne.n	80038bc <_printf_common+0x48>
 80038ae:	f104 0a19 	add.w	sl, r4, #25
 80038b2:	68e3      	ldr	r3, [r4, #12]
 80038b4:	6832      	ldr	r2, [r6, #0]
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	42ab      	cmp	r3, r5
 80038ba:	dc2b      	bgt.n	8003914 <_printf_common+0xa0>
 80038bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038c0:	1e13      	subs	r3, r2, #0
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	bf18      	it	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	0692      	lsls	r2, r2, #26
 80038ca:	d430      	bmi.n	800392e <_printf_common+0xba>
 80038cc:	4649      	mov	r1, r9
 80038ce:	4638      	mov	r0, r7
 80038d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038d4:	47c0      	blx	r8
 80038d6:	3001      	adds	r0, #1
 80038d8:	d023      	beq.n	8003922 <_printf_common+0xae>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	6922      	ldr	r2, [r4, #16]
 80038de:	f003 0306 	and.w	r3, r3, #6
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf14      	ite	ne
 80038e6:	2500      	movne	r5, #0
 80038e8:	6833      	ldreq	r3, [r6, #0]
 80038ea:	f04f 0600 	mov.w	r6, #0
 80038ee:	bf08      	it	eq
 80038f0:	68e5      	ldreq	r5, [r4, #12]
 80038f2:	f104 041a 	add.w	r4, r4, #26
 80038f6:	bf08      	it	eq
 80038f8:	1aed      	subeq	r5, r5, r3
 80038fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038fe:	bf08      	it	eq
 8003900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003904:	4293      	cmp	r3, r2
 8003906:	bfc4      	itt	gt
 8003908:	1a9b      	subgt	r3, r3, r2
 800390a:	18ed      	addgt	r5, r5, r3
 800390c:	42b5      	cmp	r5, r6
 800390e:	d11a      	bne.n	8003946 <_printf_common+0xd2>
 8003910:	2000      	movs	r0, #0
 8003912:	e008      	b.n	8003926 <_printf_common+0xb2>
 8003914:	2301      	movs	r3, #1
 8003916:	4652      	mov	r2, sl
 8003918:	4649      	mov	r1, r9
 800391a:	4638      	mov	r0, r7
 800391c:	47c0      	blx	r8
 800391e:	3001      	adds	r0, #1
 8003920:	d103      	bne.n	800392a <_printf_common+0xb6>
 8003922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392a:	3501      	adds	r5, #1
 800392c:	e7c1      	b.n	80038b2 <_printf_common+0x3e>
 800392e:	2030      	movs	r0, #48	; 0x30
 8003930:	18e1      	adds	r1, r4, r3
 8003932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800393c:	4422      	add	r2, r4
 800393e:	3302      	adds	r3, #2
 8003940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003944:	e7c2      	b.n	80038cc <_printf_common+0x58>
 8003946:	2301      	movs	r3, #1
 8003948:	4622      	mov	r2, r4
 800394a:	4649      	mov	r1, r9
 800394c:	4638      	mov	r0, r7
 800394e:	47c0      	blx	r8
 8003950:	3001      	adds	r0, #1
 8003952:	d0e6      	beq.n	8003922 <_printf_common+0xae>
 8003954:	3601      	adds	r6, #1
 8003956:	e7d9      	b.n	800390c <_printf_common+0x98>

08003958 <_printf_i>:
 8003958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	7e0f      	ldrb	r7, [r1, #24]
 800395e:	4691      	mov	r9, r2
 8003960:	2f78      	cmp	r7, #120	; 0x78
 8003962:	4680      	mov	r8, r0
 8003964:	460c      	mov	r4, r1
 8003966:	469a      	mov	sl, r3
 8003968:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800396a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800396e:	d807      	bhi.n	8003980 <_printf_i+0x28>
 8003970:	2f62      	cmp	r7, #98	; 0x62
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x32>
 8003974:	2f00      	cmp	r7, #0
 8003976:	f000 80d5 	beq.w	8003b24 <_printf_i+0x1cc>
 800397a:	2f58      	cmp	r7, #88	; 0x58
 800397c:	f000 80c1 	beq.w	8003b02 <_printf_i+0x1aa>
 8003980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003988:	e03a      	b.n	8003a00 <_printf_i+0xa8>
 800398a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800398e:	2b15      	cmp	r3, #21
 8003990:	d8f6      	bhi.n	8003980 <_printf_i+0x28>
 8003992:	a101      	add	r1, pc, #4	; (adr r1, 8003998 <_printf_i+0x40>)
 8003994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003998:	080039f1 	.word	0x080039f1
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003981 	.word	0x08003981
 80039a4:	08003981 	.word	0x08003981
 80039a8:	08003981 	.word	0x08003981
 80039ac:	08003981 	.word	0x08003981
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003981 	.word	0x08003981
 80039b8:	08003981 	.word	0x08003981
 80039bc:	08003981 	.word	0x08003981
 80039c0:	08003981 	.word	0x08003981
 80039c4:	08003b0b 	.word	0x08003b0b
 80039c8:	08003a31 	.word	0x08003a31
 80039cc:	08003ac5 	.word	0x08003ac5
 80039d0:	08003981 	.word	0x08003981
 80039d4:	08003981 	.word	0x08003981
 80039d8:	08003b2d 	.word	0x08003b2d
 80039dc:	08003981 	.word	0x08003981
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003981 	.word	0x08003981
 80039e8:	08003981 	.word	0x08003981
 80039ec:	08003acd 	.word	0x08003acd
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0a0      	b.n	8003b46 <_printf_i+0x1ee>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	0607      	lsls	r7, r0, #24
 8003a0a:	f103 0104 	add.w	r1, r3, #4
 8003a0e:	6029      	str	r1, [r5, #0]
 8003a10:	d501      	bpl.n	8003a16 <_printf_i+0xbe>
 8003a12:	681e      	ldr	r6, [r3, #0]
 8003a14:	e003      	b.n	8003a1e <_printf_i+0xc6>
 8003a16:	0646      	lsls	r6, r0, #25
 8003a18:	d5fb      	bpl.n	8003a12 <_printf_i+0xba>
 8003a1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	da03      	bge.n	8003a2a <_printf_i+0xd2>
 8003a22:	232d      	movs	r3, #45	; 0x2d
 8003a24:	4276      	negs	r6, r6
 8003a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	4859      	ldr	r0, [pc, #356]	; (8003b94 <_printf_i+0x23c>)
 8003a2e:	e012      	b.n	8003a56 <_printf_i+0xfe>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	1d19      	adds	r1, r3, #4
 8003a36:	6029      	str	r1, [r5, #0]
 8003a38:	0605      	lsls	r5, r0, #24
 8003a3a:	d501      	bpl.n	8003a40 <_printf_i+0xe8>
 8003a3c:	681e      	ldr	r6, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <_printf_i+0xee>
 8003a40:	0641      	lsls	r1, r0, #25
 8003a42:	d5fb      	bpl.n	8003a3c <_printf_i+0xe4>
 8003a44:	881e      	ldrh	r6, [r3, #0]
 8003a46:	2f6f      	cmp	r7, #111	; 0x6f
 8003a48:	bf0c      	ite	eq
 8003a4a:	2308      	moveq	r3, #8
 8003a4c:	230a      	movne	r3, #10
 8003a4e:	4851      	ldr	r0, [pc, #324]	; (8003b94 <_printf_i+0x23c>)
 8003a50:	2100      	movs	r1, #0
 8003a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a56:	6865      	ldr	r5, [r4, #4]
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	bfa8      	it	ge
 8003a5c:	6821      	ldrge	r1, [r4, #0]
 8003a5e:	60a5      	str	r5, [r4, #8]
 8003a60:	bfa4      	itt	ge
 8003a62:	f021 0104 	bicge.w	r1, r1, #4
 8003a66:	6021      	strge	r1, [r4, #0]
 8003a68:	b90e      	cbnz	r6, 8003a6e <_printf_i+0x116>
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	d04b      	beq.n	8003b06 <_printf_i+0x1ae>
 8003a6e:	4615      	mov	r5, r2
 8003a70:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a74:	fb03 6711 	mls	r7, r3, r1, r6
 8003a78:	5dc7      	ldrb	r7, [r0, r7]
 8003a7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a7e:	4637      	mov	r7, r6
 8003a80:	42bb      	cmp	r3, r7
 8003a82:	460e      	mov	r6, r1
 8003a84:	d9f4      	bls.n	8003a70 <_printf_i+0x118>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d10b      	bne.n	8003aa2 <_printf_i+0x14a>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	07de      	lsls	r6, r3, #31
 8003a8e:	d508      	bpl.n	8003aa2 <_printf_i+0x14a>
 8003a90:	6923      	ldr	r3, [r4, #16]
 8003a92:	6861      	ldr	r1, [r4, #4]
 8003a94:	4299      	cmp	r1, r3
 8003a96:	bfde      	ittt	le
 8003a98:	2330      	movle	r3, #48	; 0x30
 8003a9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003aa2:	1b52      	subs	r2, r2, r5
 8003aa4:	6122      	str	r2, [r4, #16]
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4640      	mov	r0, r8
 8003aac:	f8cd a000 	str.w	sl, [sp]
 8003ab0:	aa03      	add	r2, sp, #12
 8003ab2:	f7ff fedf 	bl	8003874 <_printf_common>
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d14a      	bne.n	8003b50 <_printf_i+0x1f8>
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003abe:	b004      	add	sp, #16
 8003ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	f043 0320 	orr.w	r3, r3, #32
 8003aca:	6023      	str	r3, [r4, #0]
 8003acc:	2778      	movs	r7, #120	; 0x78
 8003ace:	4832      	ldr	r0, [pc, #200]	; (8003b98 <_printf_i+0x240>)
 8003ad0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	6829      	ldr	r1, [r5, #0]
 8003ad8:	061f      	lsls	r7, r3, #24
 8003ada:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ade:	d402      	bmi.n	8003ae6 <_printf_i+0x18e>
 8003ae0:	065f      	lsls	r7, r3, #25
 8003ae2:	bf48      	it	mi
 8003ae4:	b2b6      	uxthmi	r6, r6
 8003ae6:	07df      	lsls	r7, r3, #31
 8003ae8:	bf48      	it	mi
 8003aea:	f043 0320 	orrmi.w	r3, r3, #32
 8003aee:	6029      	str	r1, [r5, #0]
 8003af0:	bf48      	it	mi
 8003af2:	6023      	strmi	r3, [r4, #0]
 8003af4:	b91e      	cbnz	r6, 8003afe <_printf_i+0x1a6>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	f023 0320 	bic.w	r3, r3, #32
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	2310      	movs	r3, #16
 8003b00:	e7a6      	b.n	8003a50 <_printf_i+0xf8>
 8003b02:	4824      	ldr	r0, [pc, #144]	; (8003b94 <_printf_i+0x23c>)
 8003b04:	e7e4      	b.n	8003ad0 <_printf_i+0x178>
 8003b06:	4615      	mov	r5, r2
 8003b08:	e7bd      	b.n	8003a86 <_printf_i+0x12e>
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	6826      	ldr	r6, [r4, #0]
 8003b0e:	1d18      	adds	r0, r3, #4
 8003b10:	6961      	ldr	r1, [r4, #20]
 8003b12:	6028      	str	r0, [r5, #0]
 8003b14:	0635      	lsls	r5, r6, #24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	d501      	bpl.n	8003b1e <_printf_i+0x1c6>
 8003b1a:	6019      	str	r1, [r3, #0]
 8003b1c:	e002      	b.n	8003b24 <_printf_i+0x1cc>
 8003b1e:	0670      	lsls	r0, r6, #25
 8003b20:	d5fb      	bpl.n	8003b1a <_printf_i+0x1c2>
 8003b22:	8019      	strh	r1, [r3, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	4615      	mov	r5, r2
 8003b28:	6123      	str	r3, [r4, #16]
 8003b2a:	e7bc      	b.n	8003aa6 <_printf_i+0x14e>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	1d1a      	adds	r2, r3, #4
 8003b32:	602a      	str	r2, [r5, #0]
 8003b34:	681d      	ldr	r5, [r3, #0]
 8003b36:	6862      	ldr	r2, [r4, #4]
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f000 f917 	bl	8003d6c <memchr>
 8003b3e:	b108      	cbz	r0, 8003b44 <_printf_i+0x1ec>
 8003b40:	1b40      	subs	r0, r0, r5
 8003b42:	6060      	str	r0, [r4, #4]
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b4e:	e7aa      	b.n	8003aa6 <_printf_i+0x14e>
 8003b50:	462a      	mov	r2, r5
 8003b52:	4649      	mov	r1, r9
 8003b54:	4640      	mov	r0, r8
 8003b56:	6923      	ldr	r3, [r4, #16]
 8003b58:	47d0      	blx	sl
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d0ad      	beq.n	8003aba <_printf_i+0x162>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	079b      	lsls	r3, r3, #30
 8003b62:	d413      	bmi.n	8003b8c <_printf_i+0x234>
 8003b64:	68e0      	ldr	r0, [r4, #12]
 8003b66:	9b03      	ldr	r3, [sp, #12]
 8003b68:	4298      	cmp	r0, r3
 8003b6a:	bfb8      	it	lt
 8003b6c:	4618      	movlt	r0, r3
 8003b6e:	e7a6      	b.n	8003abe <_printf_i+0x166>
 8003b70:	2301      	movs	r3, #1
 8003b72:	4632      	mov	r2, r6
 8003b74:	4649      	mov	r1, r9
 8003b76:	4640      	mov	r0, r8
 8003b78:	47d0      	blx	sl
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d09d      	beq.n	8003aba <_printf_i+0x162>
 8003b7e:	3501      	adds	r5, #1
 8003b80:	68e3      	ldr	r3, [r4, #12]
 8003b82:	9903      	ldr	r1, [sp, #12]
 8003b84:	1a5b      	subs	r3, r3, r1
 8003b86:	42ab      	cmp	r3, r5
 8003b88:	dcf2      	bgt.n	8003b70 <_printf_i+0x218>
 8003b8a:	e7eb      	b.n	8003b64 <_printf_i+0x20c>
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	f104 0619 	add.w	r6, r4, #25
 8003b92:	e7f5      	b.n	8003b80 <_printf_i+0x228>
 8003b94:	0800743a 	.word	0x0800743a
 8003b98:	0800744b 	.word	0x0800744b

08003b9c <std>:
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003baa:	6083      	str	r3, [r0, #8]
 8003bac:	8181      	strh	r1, [r0, #12]
 8003bae:	6643      	str	r3, [r0, #100]	; 0x64
 8003bb0:	81c2      	strh	r2, [r0, #14]
 8003bb2:	6183      	str	r3, [r0, #24]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	305c      	adds	r0, #92	; 0x5c
 8003bba:	f000 f89f 	bl	8003cfc <memset>
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <std+0x38>)
 8003bc0:	6224      	str	r4, [r4, #32]
 8003bc2:	6263      	str	r3, [r4, #36]	; 0x24
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <std+0x3c>)
 8003bc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <std+0x40>)
 8003bca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <std+0x44>)
 8003bce:	6323      	str	r3, [r4, #48]	; 0x30
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08005415 	.word	0x08005415
 8003bd8:	08005437 	.word	0x08005437
 8003bdc:	0800546f 	.word	0x0800546f
 8003be0:	08005493 	.word	0x08005493

08003be4 <stdio_exit_handler>:
 8003be4:	4a02      	ldr	r2, [pc, #8]	; (8003bf0 <stdio_exit_handler+0xc>)
 8003be6:	4903      	ldr	r1, [pc, #12]	; (8003bf4 <stdio_exit_handler+0x10>)
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <stdio_exit_handler+0x14>)
 8003bea:	f000 b869 	b.w	8003cc0 <_fwalk_sglue>
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c
 8003bf4:	08004cbd 	.word	0x08004cbd
 8003bf8:	20000018 	.word	0x20000018

08003bfc <cleanup_stdio>:
 8003bfc:	6841      	ldr	r1, [r0, #4]
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <cleanup_stdio+0x34>)
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4299      	cmp	r1, r3
 8003c04:	4604      	mov	r4, r0
 8003c06:	d001      	beq.n	8003c0c <cleanup_stdio+0x10>
 8003c08:	f001 f858 	bl	8004cbc <_fflush_r>
 8003c0c:	68a1      	ldr	r1, [r4, #8]
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <cleanup_stdio+0x38>)
 8003c10:	4299      	cmp	r1, r3
 8003c12:	d002      	beq.n	8003c1a <cleanup_stdio+0x1e>
 8003c14:	4620      	mov	r0, r4
 8003c16:	f001 f851 	bl	8004cbc <_fflush_r>
 8003c1a:	68e1      	ldr	r1, [r4, #12]
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <cleanup_stdio+0x3c>)
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d004      	beq.n	8003c2c <cleanup_stdio+0x30>
 8003c22:	4620      	mov	r0, r4
 8003c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c28:	f001 b848 	b.w	8004cbc <_fflush_r>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	bf00      	nop
 8003c30:	200002b0 	.word	0x200002b0
 8003c34:	20000318 	.word	0x20000318
 8003c38:	20000380 	.word	0x20000380

08003c3c <global_stdio_init.part.0>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <global_stdio_init.part.0+0x30>)
 8003c40:	4c0b      	ldr	r4, [pc, #44]	; (8003c70 <global_stdio_init.part.0+0x34>)
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <global_stdio_init.part.0+0x38>)
 8003c44:	4620      	mov	r0, r4
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	2104      	movs	r1, #4
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f7ff ffa6 	bl	8003b9c <std>
 8003c50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c54:	2201      	movs	r2, #1
 8003c56:	2109      	movs	r1, #9
 8003c58:	f7ff ffa0 	bl	8003b9c <std>
 8003c5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c60:	2202      	movs	r2, #2
 8003c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c66:	2112      	movs	r1, #18
 8003c68:	f7ff bf98 	b.w	8003b9c <std>
 8003c6c:	200003e8 	.word	0x200003e8
 8003c70:	200002b0 	.word	0x200002b0
 8003c74:	08003be5 	.word	0x08003be5

08003c78 <__sfp_lock_acquire>:
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <__sfp_lock_acquire+0x8>)
 8003c7a:	f000 b875 	b.w	8003d68 <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	200003ed 	.word	0x200003ed

08003c84 <__sfp_lock_release>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__sfp_lock_release+0x8>)
 8003c86:	f000 b870 	b.w	8003d6a <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	200003ed 	.word	0x200003ed

08003c90 <__sinit>:
 8003c90:	b510      	push	{r4, lr}
 8003c92:	4604      	mov	r4, r0
 8003c94:	f7ff fff0 	bl	8003c78 <__sfp_lock_acquire>
 8003c98:	6a23      	ldr	r3, [r4, #32]
 8003c9a:	b11b      	cbz	r3, 8003ca4 <__sinit+0x14>
 8003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca0:	f7ff bff0 	b.w	8003c84 <__sfp_lock_release>
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <__sinit+0x28>)
 8003ca6:	6223      	str	r3, [r4, #32]
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <__sinit+0x2c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f5      	bne.n	8003c9c <__sinit+0xc>
 8003cb0:	f7ff ffc4 	bl	8003c3c <global_stdio_init.part.0>
 8003cb4:	e7f2      	b.n	8003c9c <__sinit+0xc>
 8003cb6:	bf00      	nop
 8003cb8:	08003bfd 	.word	0x08003bfd
 8003cbc:	200003e8 	.word	0x200003e8

08003cc0 <_fwalk_sglue>:
 8003cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	4607      	mov	r7, r0
 8003cc6:	4688      	mov	r8, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	2600      	movs	r6, #0
 8003ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd4:	d505      	bpl.n	8003ce2 <_fwalk_sglue+0x22>
 8003cd6:	6824      	ldr	r4, [r4, #0]
 8003cd8:	2c00      	cmp	r4, #0
 8003cda:	d1f7      	bne.n	8003ccc <_fwalk_sglue+0xc>
 8003cdc:	4630      	mov	r0, r6
 8003cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d907      	bls.n	8003cf8 <_fwalk_sglue+0x38>
 8003ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cec:	3301      	adds	r3, #1
 8003cee:	d003      	beq.n	8003cf8 <_fwalk_sglue+0x38>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c0      	blx	r8
 8003cf6:	4306      	orrs	r6, r0
 8003cf8:	3568      	adds	r5, #104	; 0x68
 8003cfa:	e7e9      	b.n	8003cd0 <_fwalk_sglue+0x10>

08003cfc <memset>:
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4402      	add	r2, r0
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <memset+0xa>
 8003d04:	4770      	bx	lr
 8003d06:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0a:	e7f9      	b.n	8003d00 <memset+0x4>

08003d0c <_localeconv_r>:
 8003d0c:	4800      	ldr	r0, [pc, #0]	; (8003d10 <_localeconv_r+0x4>)
 8003d0e:	4770      	bx	lr
 8003d10:	20000158 	.word	0x20000158

08003d14 <__errno>:
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <__errno+0x8>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000064 	.word	0x20000064

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	2600      	movs	r6, #0
 8003d24:	4d0c      	ldr	r5, [pc, #48]	; (8003d58 <__libc_init_array+0x38>)
 8003d26:	4c0d      	ldr	r4, [pc, #52]	; (8003d5c <__libc_init_array+0x3c>)
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	42a6      	cmp	r6, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	f002 ff18 	bl	8006b64 <_init>
 8003d34:	2600      	movs	r6, #0
 8003d36:	4d0a      	ldr	r5, [pc, #40]	; (8003d60 <__libc_init_array+0x40>)
 8003d38:	4c0a      	ldr	r4, [pc, #40]	; (8003d64 <__libc_init_array+0x44>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	42a6      	cmp	r6, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d48:	4798      	blx	r3
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d52:	4798      	blx	r3
 8003d54:	3601      	adds	r6, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	080077d0 	.word	0x080077d0
 8003d5c:	080077d0 	.word	0x080077d0
 8003d60:	080077d0 	.word	0x080077d0
 8003d64:	080077d4 	.word	0x080077d4

08003d68 <__retarget_lock_acquire_recursive>:
 8003d68:	4770      	bx	lr

08003d6a <__retarget_lock_release_recursive>:
 8003d6a:	4770      	bx	lr

08003d6c <memchr>:
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	b2c9      	uxtb	r1, r1
 8003d72:	4402      	add	r2, r0
 8003d74:	4293      	cmp	r3, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	d101      	bne.n	8003d7e <memchr+0x12>
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e003      	b.n	8003d86 <memchr+0x1a>
 8003d7e:	7804      	ldrb	r4, [r0, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	428c      	cmp	r4, r1
 8003d84:	d1f6      	bne.n	8003d74 <memchr+0x8>
 8003d86:	bd10      	pop	{r4, pc}

08003d88 <quorem>:
 8003d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	6903      	ldr	r3, [r0, #16]
 8003d8e:	690c      	ldr	r4, [r1, #16]
 8003d90:	4607      	mov	r7, r0
 8003d92:	42a3      	cmp	r3, r4
 8003d94:	db7f      	blt.n	8003e96 <quorem+0x10e>
 8003d96:	3c01      	subs	r4, #1
 8003d98:	f100 0514 	add.w	r5, r0, #20
 8003d9c:	f101 0814 	add.w	r8, r1, #20
 8003da0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dae:	3301      	adds	r3, #1
 8003db0:	429a      	cmp	r2, r3
 8003db2:	fbb2 f6f3 	udiv	r6, r2, r3
 8003db6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003dba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003dbe:	d331      	bcc.n	8003e24 <quorem+0x9c>
 8003dc0:	f04f 0e00 	mov.w	lr, #0
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	46ac      	mov	ip, r5
 8003dc8:	46f2      	mov	sl, lr
 8003dca:	f850 2b04 	ldr.w	r2, [r0], #4
 8003dce:	b293      	uxth	r3, r2
 8003dd0:	fb06 e303 	mla	r3, r6, r3, lr
 8003dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dd8:	0c1a      	lsrs	r2, r3, #16
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	fb06 220e 	mla	r2, r6, lr, r2
 8003de0:	ebaa 0303 	sub.w	r3, sl, r3
 8003de4:	f8dc a000 	ldr.w	sl, [ip]
 8003de8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dec:	fa1f fa8a 	uxth.w	sl, sl
 8003df0:	4453      	add	r3, sl
 8003df2:	f8dc a000 	ldr.w	sl, [ip]
 8003df6:	b292      	uxth	r2, r2
 8003df8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e06:	4581      	cmp	r9, r0
 8003e08:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003e0c:	f84c 3b04 	str.w	r3, [ip], #4
 8003e10:	d2db      	bcs.n	8003dca <quorem+0x42>
 8003e12:	f855 300b 	ldr.w	r3, [r5, fp]
 8003e16:	b92b      	cbnz	r3, 8003e24 <quorem+0x9c>
 8003e18:	9b01      	ldr	r3, [sp, #4]
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	429d      	cmp	r5, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	d32d      	bcc.n	8003e7e <quorem+0xf6>
 8003e22:	613c      	str	r4, [r7, #16]
 8003e24:	4638      	mov	r0, r7
 8003e26:	f001 f9f7 	bl	8005218 <__mcmp>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	db23      	blt.n	8003e76 <quorem+0xee>
 8003e2e:	4629      	mov	r1, r5
 8003e30:	2000      	movs	r0, #0
 8003e32:	3601      	adds	r6, #1
 8003e34:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e38:	f8d1 c000 	ldr.w	ip, [r1]
 8003e3c:	b293      	uxth	r3, r2
 8003e3e:	1ac3      	subs	r3, r0, r3
 8003e40:	0c12      	lsrs	r2, r2, #16
 8003e42:	fa1f f08c 	uxth.w	r0, ip
 8003e46:	4403      	add	r3, r0
 8003e48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e56:	45c1      	cmp	r9, r8
 8003e58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e5c:	f841 3b04 	str.w	r3, [r1], #4
 8003e60:	d2e8      	bcs.n	8003e34 <quorem+0xac>
 8003e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e6a:	b922      	cbnz	r2, 8003e76 <quorem+0xee>
 8003e6c:	3b04      	subs	r3, #4
 8003e6e:	429d      	cmp	r5, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	d30a      	bcc.n	8003e8a <quorem+0x102>
 8003e74:	613c      	str	r4, [r7, #16]
 8003e76:	4630      	mov	r0, r6
 8003e78:	b003      	add	sp, #12
 8003e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	3b04      	subs	r3, #4
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d1cd      	bne.n	8003e22 <quorem+0x9a>
 8003e86:	3c01      	subs	r4, #1
 8003e88:	e7c8      	b.n	8003e1c <quorem+0x94>
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	3b04      	subs	r3, #4
 8003e8e:	2a00      	cmp	r2, #0
 8003e90:	d1f0      	bne.n	8003e74 <quorem+0xec>
 8003e92:	3c01      	subs	r4, #1
 8003e94:	e7eb      	b.n	8003e6e <quorem+0xe6>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e7ee      	b.n	8003e78 <quorem+0xf0>
 8003e9a:	0000      	movs	r0, r0
 8003e9c:	0000      	movs	r0, r0
	...

08003ea0 <_dtoa_r>:
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	4616      	mov	r6, r2
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	69c4      	ldr	r4, [r0, #28]
 8003eaa:	b099      	sub	sp, #100	; 0x64
 8003eac:	4605      	mov	r5, r0
 8003eae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003eb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003eb6:	b974      	cbnz	r4, 8003ed6 <_dtoa_r+0x36>
 8003eb8:	2010      	movs	r0, #16
 8003eba:	f000 fdd5 	bl	8004a68 <malloc>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	61e8      	str	r0, [r5, #28]
 8003ec2:	b920      	cbnz	r0, 8003ece <_dtoa_r+0x2e>
 8003ec4:	21ef      	movs	r1, #239	; 0xef
 8003ec6:	4bac      	ldr	r3, [pc, #688]	; (8004178 <_dtoa_r+0x2d8>)
 8003ec8:	48ac      	ldr	r0, [pc, #688]	; (800417c <_dtoa_r+0x2dc>)
 8003eca:	f001 fb4b 	bl	8005564 <__assert_func>
 8003ece:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ed2:	6004      	str	r4, [r0, #0]
 8003ed4:	60c4      	str	r4, [r0, #12]
 8003ed6:	69eb      	ldr	r3, [r5, #28]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	b151      	cbz	r1, 8003ef2 <_dtoa_r+0x52>
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	604a      	str	r2, [r1, #4]
 8003ee4:	608b      	str	r3, [r1, #8]
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 ff5c 	bl	8004da4 <_Bfree>
 8003eec:	2200      	movs	r2, #0
 8003eee:	69eb      	ldr	r3, [r5, #28]
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	1e3b      	subs	r3, r7, #0
 8003ef4:	bfaf      	iteee	ge
 8003ef6:	2300      	movge	r3, #0
 8003ef8:	2201      	movlt	r2, #1
 8003efa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003efe:	9305      	strlt	r3, [sp, #20]
 8003f00:	bfa8      	it	ge
 8003f02:	f8c8 3000 	strge.w	r3, [r8]
 8003f06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003f0a:	4b9d      	ldr	r3, [pc, #628]	; (8004180 <_dtoa_r+0x2e0>)
 8003f0c:	bfb8      	it	lt
 8003f0e:	f8c8 2000 	strlt.w	r2, [r8]
 8003f12:	ea33 0309 	bics.w	r3, r3, r9
 8003f16:	d119      	bne.n	8003f4c <_dtoa_r+0xac>
 8003f18:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f24:	4333      	orrs	r3, r6
 8003f26:	f000 8589 	beq.w	8004a3c <_dtoa_r+0xb9c>
 8003f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f2c:	b953      	cbnz	r3, 8003f44 <_dtoa_r+0xa4>
 8003f2e:	4b95      	ldr	r3, [pc, #596]	; (8004184 <_dtoa_r+0x2e4>)
 8003f30:	e023      	b.n	8003f7a <_dtoa_r+0xda>
 8003f32:	4b95      	ldr	r3, [pc, #596]	; (8004188 <_dtoa_r+0x2e8>)
 8003f34:	9303      	str	r3, [sp, #12]
 8003f36:	3308      	adds	r3, #8
 8003f38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	9803      	ldr	r0, [sp, #12]
 8003f3e:	b019      	add	sp, #100	; 0x64
 8003f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f44:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <_dtoa_r+0x2e4>)
 8003f46:	9303      	str	r3, [sp, #12]
 8003f48:	3303      	adds	r3, #3
 8003f4a:	e7f5      	b.n	8003f38 <_dtoa_r+0x98>
 8003f4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f7fc fd34 	bl	80009c8 <__aeabi_dcmpeq>
 8003f60:	4680      	mov	r8, r0
 8003f62:	b160      	cbz	r0, 8003f7e <_dtoa_r+0xde>
 8003f64:	2301      	movs	r3, #1
 8003f66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8562 	beq.w	8004a36 <_dtoa_r+0xb96>
 8003f72:	4b86      	ldr	r3, [pc, #536]	; (800418c <_dtoa_r+0x2ec>)
 8003f74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	e7de      	b.n	8003f3c <_dtoa_r+0x9c>
 8003f7e:	ab16      	add	r3, sp, #88	; 0x58
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	ab17      	add	r3, sp, #92	; 0x5c
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4628      	mov	r0, r5
 8003f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f8c:	f001 f9ec 	bl	8005368 <__d2b>
 8003f90:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003f94:	4682      	mov	sl, r0
 8003f96:	2c00      	cmp	r4, #0
 8003f98:	d07e      	beq.n	8004098 <_dtoa_r+0x1f8>
 8003f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fa0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003fac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003fb0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <_dtoa_r+0x2f0>)
 8003fba:	f7fc f8e5 	bl	8000188 <__aeabi_dsub>
 8003fbe:	a368      	add	r3, pc, #416	; (adr r3, 8004160 <_dtoa_r+0x2c0>)
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f7fc fa98 	bl	80004f8 <__aeabi_dmul>
 8003fc8:	a367      	add	r3, pc, #412	; (adr r3, 8004168 <_dtoa_r+0x2c8>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc f8dd 	bl	800018c <__adddf3>
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	460f      	mov	r7, r1
 8003fd8:	f7fc fa24 	bl	8000424 <__aeabi_i2d>
 8003fdc:	a364      	add	r3, pc, #400	; (adr r3, 8004170 <_dtoa_r+0x2d0>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc fa89 	bl	80004f8 <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4630      	mov	r0, r6
 8003fec:	4639      	mov	r1, r7
 8003fee:	f7fc f8cd 	bl	800018c <__adddf3>
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	460f      	mov	r7, r1
 8003ff6:	f7fc fd2f 	bl	8000a58 <__aeabi_d2iz>
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4683      	mov	fp, r0
 8003ffe:	2300      	movs	r3, #0
 8004000:	4630      	mov	r0, r6
 8004002:	4639      	mov	r1, r7
 8004004:	f7fc fcea 	bl	80009dc <__aeabi_dcmplt>
 8004008:	b148      	cbz	r0, 800401e <_dtoa_r+0x17e>
 800400a:	4658      	mov	r0, fp
 800400c:	f7fc fa0a 	bl	8000424 <__aeabi_i2d>
 8004010:	4632      	mov	r2, r6
 8004012:	463b      	mov	r3, r7
 8004014:	f7fc fcd8 	bl	80009c8 <__aeabi_dcmpeq>
 8004018:	b908      	cbnz	r0, 800401e <_dtoa_r+0x17e>
 800401a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800401e:	f1bb 0f16 	cmp.w	fp, #22
 8004022:	d857      	bhi.n	80040d4 <_dtoa_r+0x234>
 8004024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004028:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <_dtoa_r+0x2f4>)
 800402a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc fcd3 	bl	80009dc <__aeabi_dcmplt>
 8004036:	2800      	cmp	r0, #0
 8004038:	d04e      	beq.n	80040d8 <_dtoa_r+0x238>
 800403a:	2300      	movs	r3, #0
 800403c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004040:	930f      	str	r3, [sp, #60]	; 0x3c
 8004042:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004044:	1b1b      	subs	r3, r3, r4
 8004046:	1e5a      	subs	r2, r3, #1
 8004048:	bf46      	itte	mi
 800404a:	f1c3 0901 	rsbmi	r9, r3, #1
 800404e:	2300      	movmi	r3, #0
 8004050:	f04f 0900 	movpl.w	r9, #0
 8004054:	9209      	str	r2, [sp, #36]	; 0x24
 8004056:	bf48      	it	mi
 8004058:	9309      	strmi	r3, [sp, #36]	; 0x24
 800405a:	f1bb 0f00 	cmp.w	fp, #0
 800405e:	db3d      	blt.n	80040dc <_dtoa_r+0x23c>
 8004060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004062:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004066:	445b      	add	r3, fp
 8004068:	9309      	str	r3, [sp, #36]	; 0x24
 800406a:	2300      	movs	r3, #0
 800406c:	930a      	str	r3, [sp, #40]	; 0x28
 800406e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004070:	2b09      	cmp	r3, #9
 8004072:	d867      	bhi.n	8004144 <_dtoa_r+0x2a4>
 8004074:	2b05      	cmp	r3, #5
 8004076:	bfc4      	itt	gt
 8004078:	3b04      	subgt	r3, #4
 800407a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800407c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800407e:	bfc8      	it	gt
 8004080:	2400      	movgt	r4, #0
 8004082:	f1a3 0302 	sub.w	r3, r3, #2
 8004086:	bfd8      	it	le
 8004088:	2401      	movle	r4, #1
 800408a:	2b03      	cmp	r3, #3
 800408c:	f200 8086 	bhi.w	800419c <_dtoa_r+0x2fc>
 8004090:	e8df f003 	tbb	[pc, r3]
 8004094:	5637392c 	.word	0x5637392c
 8004098:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800409c:	441c      	add	r4, r3
 800409e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	bfc1      	itttt	gt
 80040a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80040aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80040ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80040b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80040b6:	bfd6      	itet	le
 80040b8:	f1c3 0320 	rsble	r3, r3, #32
 80040bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80040c0:	fa06 f003 	lslle.w	r0, r6, r3
 80040c4:	f7fc f99e 	bl	8000404 <__aeabi_ui2d>
 80040c8:	2201      	movs	r2, #1
 80040ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80040ce:	3c01      	subs	r4, #1
 80040d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80040d2:	e76f      	b.n	8003fb4 <_dtoa_r+0x114>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e7b3      	b.n	8004040 <_dtoa_r+0x1a0>
 80040d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80040da:	e7b2      	b.n	8004042 <_dtoa_r+0x1a2>
 80040dc:	f1cb 0300 	rsb	r3, fp, #0
 80040e0:	930a      	str	r3, [sp, #40]	; 0x28
 80040e2:	2300      	movs	r3, #0
 80040e4:	eba9 090b 	sub.w	r9, r9, fp
 80040e8:	930e      	str	r3, [sp, #56]	; 0x38
 80040ea:	e7c0      	b.n	800406e <_dtoa_r+0x1ce>
 80040ec:	2300      	movs	r3, #0
 80040ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80040f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	dc55      	bgt.n	80041a2 <_dtoa_r+0x302>
 80040f6:	2301      	movs	r3, #1
 80040f8:	461a      	mov	r2, r3
 80040fa:	9306      	str	r3, [sp, #24]
 80040fc:	9308      	str	r3, [sp, #32]
 80040fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8004100:	e00b      	b.n	800411a <_dtoa_r+0x27a>
 8004102:	2301      	movs	r3, #1
 8004104:	e7f3      	b.n	80040ee <_dtoa_r+0x24e>
 8004106:	2300      	movs	r3, #0
 8004108:	930b      	str	r3, [sp, #44]	; 0x2c
 800410a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800410c:	445b      	add	r3, fp
 800410e:	9306      	str	r3, [sp, #24]
 8004110:	3301      	adds	r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	9308      	str	r3, [sp, #32]
 8004116:	bfb8      	it	lt
 8004118:	2301      	movlt	r3, #1
 800411a:	2100      	movs	r1, #0
 800411c:	2204      	movs	r2, #4
 800411e:	69e8      	ldr	r0, [r5, #28]
 8004120:	f102 0614 	add.w	r6, r2, #20
 8004124:	429e      	cmp	r6, r3
 8004126:	d940      	bls.n	80041aa <_dtoa_r+0x30a>
 8004128:	6041      	str	r1, [r0, #4]
 800412a:	4628      	mov	r0, r5
 800412c:	f000 fdfa 	bl	8004d24 <_Balloc>
 8004130:	9003      	str	r0, [sp, #12]
 8004132:	2800      	cmp	r0, #0
 8004134:	d13c      	bne.n	80041b0 <_dtoa_r+0x310>
 8004136:	4602      	mov	r2, r0
 8004138:	f240 11af 	movw	r1, #431	; 0x1af
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <_dtoa_r+0x2f8>)
 800413e:	e6c3      	b.n	8003ec8 <_dtoa_r+0x28>
 8004140:	2301      	movs	r3, #1
 8004142:	e7e1      	b.n	8004108 <_dtoa_r+0x268>
 8004144:	2401      	movs	r4, #1
 8004146:	2300      	movs	r3, #0
 8004148:	940b      	str	r4, [sp, #44]	; 0x2c
 800414a:	9322      	str	r3, [sp, #136]	; 0x88
 800414c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004150:	2200      	movs	r2, #0
 8004152:	9306      	str	r3, [sp, #24]
 8004154:	9308      	str	r3, [sp, #32]
 8004156:	2312      	movs	r3, #18
 8004158:	e7d1      	b.n	80040fe <_dtoa_r+0x25e>
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w
 8004160:	636f4361 	.word	0x636f4361
 8004164:	3fd287a7 	.word	0x3fd287a7
 8004168:	8b60c8b3 	.word	0x8b60c8b3
 800416c:	3fc68a28 	.word	0x3fc68a28
 8004170:	509f79fb 	.word	0x509f79fb
 8004174:	3fd34413 	.word	0x3fd34413
 8004178:	08007469 	.word	0x08007469
 800417c:	08007480 	.word	0x08007480
 8004180:	7ff00000 	.word	0x7ff00000
 8004184:	08007465 	.word	0x08007465
 8004188:	0800745c 	.word	0x0800745c
 800418c:	08007439 	.word	0x08007439
 8004190:	3ff80000 	.word	0x3ff80000
 8004194:	08007570 	.word	0x08007570
 8004198:	080074d8 	.word	0x080074d8
 800419c:	2301      	movs	r3, #1
 800419e:	930b      	str	r3, [sp, #44]	; 0x2c
 80041a0:	e7d4      	b.n	800414c <_dtoa_r+0x2ac>
 80041a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041a4:	9306      	str	r3, [sp, #24]
 80041a6:	9308      	str	r3, [sp, #32]
 80041a8:	e7b7      	b.n	800411a <_dtoa_r+0x27a>
 80041aa:	3101      	adds	r1, #1
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	e7b7      	b.n	8004120 <_dtoa_r+0x280>
 80041b0:	69eb      	ldr	r3, [r5, #28]
 80041b2:	9a03      	ldr	r2, [sp, #12]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	9b08      	ldr	r3, [sp, #32]
 80041b8:	2b0e      	cmp	r3, #14
 80041ba:	f200 80a8 	bhi.w	800430e <_dtoa_r+0x46e>
 80041be:	2c00      	cmp	r4, #0
 80041c0:	f000 80a5 	beq.w	800430e <_dtoa_r+0x46e>
 80041c4:	f1bb 0f00 	cmp.w	fp, #0
 80041c8:	dd34      	ble.n	8004234 <_dtoa_r+0x394>
 80041ca:	4b9a      	ldr	r3, [pc, #616]	; (8004434 <_dtoa_r+0x594>)
 80041cc:	f00b 020f 	and.w	r2, fp, #15
 80041d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80041d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80041e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80041e4:	d016      	beq.n	8004214 <_dtoa_r+0x374>
 80041e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041ea:	4b93      	ldr	r3, [pc, #588]	; (8004438 <_dtoa_r+0x598>)
 80041ec:	2703      	movs	r7, #3
 80041ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041f2:	f7fc faab 	bl	800074c <__aeabi_ddiv>
 80041f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041fa:	f004 040f 	and.w	r4, r4, #15
 80041fe:	4e8e      	ldr	r6, [pc, #568]	; (8004438 <_dtoa_r+0x598>)
 8004200:	b954      	cbnz	r4, 8004218 <_dtoa_r+0x378>
 8004202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800420a:	f7fc fa9f 	bl	800074c <__aeabi_ddiv>
 800420e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004212:	e029      	b.n	8004268 <_dtoa_r+0x3c8>
 8004214:	2702      	movs	r7, #2
 8004216:	e7f2      	b.n	80041fe <_dtoa_r+0x35e>
 8004218:	07e1      	lsls	r1, r4, #31
 800421a:	d508      	bpl.n	800422e <_dtoa_r+0x38e>
 800421c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004220:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004224:	f7fc f968 	bl	80004f8 <__aeabi_dmul>
 8004228:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800422c:	3701      	adds	r7, #1
 800422e:	1064      	asrs	r4, r4, #1
 8004230:	3608      	adds	r6, #8
 8004232:	e7e5      	b.n	8004200 <_dtoa_r+0x360>
 8004234:	f000 80a5 	beq.w	8004382 <_dtoa_r+0x4e2>
 8004238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800423c:	f1cb 0400 	rsb	r4, fp, #0
 8004240:	4b7c      	ldr	r3, [pc, #496]	; (8004434 <_dtoa_r+0x594>)
 8004242:	f004 020f 	and.w	r2, r4, #15
 8004246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fc f953 	bl	80004f8 <__aeabi_dmul>
 8004252:	2702      	movs	r7, #2
 8004254:	2300      	movs	r3, #0
 8004256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800425a:	4e77      	ldr	r6, [pc, #476]	; (8004438 <_dtoa_r+0x598>)
 800425c:	1124      	asrs	r4, r4, #4
 800425e:	2c00      	cmp	r4, #0
 8004260:	f040 8084 	bne.w	800436c <_dtoa_r+0x4cc>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1d2      	bne.n	800420e <_dtoa_r+0x36e>
 8004268:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800426c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8087 	beq.w	8004386 <_dtoa_r+0x4e6>
 8004278:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800427c:	2200      	movs	r2, #0
 800427e:	4b6f      	ldr	r3, [pc, #444]	; (800443c <_dtoa_r+0x59c>)
 8004280:	f7fc fbac 	bl	80009dc <__aeabi_dcmplt>
 8004284:	2800      	cmp	r0, #0
 8004286:	d07e      	beq.n	8004386 <_dtoa_r+0x4e6>
 8004288:	9b08      	ldr	r3, [sp, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d07b      	beq.n	8004386 <_dtoa_r+0x4e6>
 800428e:	9b06      	ldr	r3, [sp, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	dd38      	ble.n	8004306 <_dtoa_r+0x466>
 8004294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004298:	2200      	movs	r2, #0
 800429a:	4b69      	ldr	r3, [pc, #420]	; (8004440 <_dtoa_r+0x5a0>)
 800429c:	f7fc f92c 	bl	80004f8 <__aeabi_dmul>
 80042a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042a4:	9c06      	ldr	r4, [sp, #24]
 80042a6:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 80042aa:	3701      	adds	r7, #1
 80042ac:	4638      	mov	r0, r7
 80042ae:	f7fc f8b9 	bl	8000424 <__aeabi_i2d>
 80042b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042b6:	f7fc f91f 	bl	80004f8 <__aeabi_dmul>
 80042ba:	2200      	movs	r2, #0
 80042bc:	4b61      	ldr	r3, [pc, #388]	; (8004444 <_dtoa_r+0x5a4>)
 80042be:	f7fb ff65 	bl	800018c <__adddf3>
 80042c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80042c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042ca:	9611      	str	r6, [sp, #68]	; 0x44
 80042cc:	2c00      	cmp	r4, #0
 80042ce:	d15d      	bne.n	800438c <_dtoa_r+0x4ec>
 80042d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042d4:	2200      	movs	r2, #0
 80042d6:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <_dtoa_r+0x5a8>)
 80042d8:	f7fb ff56 	bl	8000188 <__aeabi_dsub>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042e4:	4633      	mov	r3, r6
 80042e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042e8:	f7fc fb96 	bl	8000a18 <__aeabi_dcmpgt>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	f040 8295 	bne.w	800481c <_dtoa_r+0x97c>
 80042f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80042fc:	f7fc fb6e 	bl	80009dc <__aeabi_dcmplt>
 8004300:	2800      	cmp	r0, #0
 8004302:	f040 8289 	bne.w	8004818 <_dtoa_r+0x978>
 8004306:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800430a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800430e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004310:	2b00      	cmp	r3, #0
 8004312:	f2c0 8151 	blt.w	80045b8 <_dtoa_r+0x718>
 8004316:	f1bb 0f0e 	cmp.w	fp, #14
 800431a:	f300 814d 	bgt.w	80045b8 <_dtoa_r+0x718>
 800431e:	4b45      	ldr	r3, [pc, #276]	; (8004434 <_dtoa_r+0x594>)
 8004320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004328:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800432c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800432e:	2b00      	cmp	r3, #0
 8004330:	f280 80da 	bge.w	80044e8 <_dtoa_r+0x648>
 8004334:	9b08      	ldr	r3, [sp, #32]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f300 80d6 	bgt.w	80044e8 <_dtoa_r+0x648>
 800433c:	f040 826b 	bne.w	8004816 <_dtoa_r+0x976>
 8004340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004344:	2200      	movs	r2, #0
 8004346:	4b40      	ldr	r3, [pc, #256]	; (8004448 <_dtoa_r+0x5a8>)
 8004348:	f7fc f8d6 	bl	80004f8 <__aeabi_dmul>
 800434c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004350:	f7fc fb58 	bl	8000a04 <__aeabi_dcmpge>
 8004354:	9c08      	ldr	r4, [sp, #32]
 8004356:	4626      	mov	r6, r4
 8004358:	2800      	cmp	r0, #0
 800435a:	f040 8241 	bne.w	80047e0 <_dtoa_r+0x940>
 800435e:	2331      	movs	r3, #49	; 0x31
 8004360:	9f03      	ldr	r7, [sp, #12]
 8004362:	f10b 0b01 	add.w	fp, fp, #1
 8004366:	f807 3b01 	strb.w	r3, [r7], #1
 800436a:	e23d      	b.n	80047e8 <_dtoa_r+0x948>
 800436c:	07e2      	lsls	r2, r4, #31
 800436e:	d505      	bpl.n	800437c <_dtoa_r+0x4dc>
 8004370:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004374:	f7fc f8c0 	bl	80004f8 <__aeabi_dmul>
 8004378:	2301      	movs	r3, #1
 800437a:	3701      	adds	r7, #1
 800437c:	1064      	asrs	r4, r4, #1
 800437e:	3608      	adds	r6, #8
 8004380:	e76d      	b.n	800425e <_dtoa_r+0x3be>
 8004382:	2702      	movs	r7, #2
 8004384:	e770      	b.n	8004268 <_dtoa_r+0x3c8>
 8004386:	46d8      	mov	r8, fp
 8004388:	9c08      	ldr	r4, [sp, #32]
 800438a:	e78f      	b.n	80042ac <_dtoa_r+0x40c>
 800438c:	9903      	ldr	r1, [sp, #12]
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <_dtoa_r+0x594>)
 8004390:	4421      	add	r1, r4
 8004392:	9112      	str	r1, [sp, #72]	; 0x48
 8004394:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004396:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800439a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800439e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043a2:	2900      	cmp	r1, #0
 80043a4:	d054      	beq.n	8004450 <_dtoa_r+0x5b0>
 80043a6:	2000      	movs	r0, #0
 80043a8:	4928      	ldr	r1, [pc, #160]	; (800444c <_dtoa_r+0x5ac>)
 80043aa:	f7fc f9cf 	bl	800074c <__aeabi_ddiv>
 80043ae:	463b      	mov	r3, r7
 80043b0:	4632      	mov	r2, r6
 80043b2:	f7fb fee9 	bl	8000188 <__aeabi_dsub>
 80043b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043ba:	9f03      	ldr	r7, [sp, #12]
 80043bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043c0:	f7fc fb4a 	bl	8000a58 <__aeabi_d2iz>
 80043c4:	4604      	mov	r4, r0
 80043c6:	f7fc f82d 	bl	8000424 <__aeabi_i2d>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043d2:	f7fb fed9 	bl	8000188 <__aeabi_dsub>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	3430      	adds	r4, #48	; 0x30
 80043dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043e4:	f807 4b01 	strb.w	r4, [r7], #1
 80043e8:	f7fc faf8 	bl	80009dc <__aeabi_dcmplt>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d173      	bne.n	80044d8 <_dtoa_r+0x638>
 80043f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043f4:	2000      	movs	r0, #0
 80043f6:	4911      	ldr	r1, [pc, #68]	; (800443c <_dtoa_r+0x59c>)
 80043f8:	f7fb fec6 	bl	8000188 <__aeabi_dsub>
 80043fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004400:	f7fc faec 	bl	80009dc <__aeabi_dcmplt>
 8004404:	2800      	cmp	r0, #0
 8004406:	f040 80b6 	bne.w	8004576 <_dtoa_r+0x6d6>
 800440a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800440c:	429f      	cmp	r7, r3
 800440e:	f43f af7a 	beq.w	8004306 <_dtoa_r+0x466>
 8004412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004416:	2200      	movs	r2, #0
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <_dtoa_r+0x5a0>)
 800441a:	f7fc f86d 	bl	80004f8 <__aeabi_dmul>
 800441e:	2200      	movs	r2, #0
 8004420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <_dtoa_r+0x5a0>)
 800442a:	f7fc f865 	bl	80004f8 <__aeabi_dmul>
 800442e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004432:	e7c3      	b.n	80043bc <_dtoa_r+0x51c>
 8004434:	08007570 	.word	0x08007570
 8004438:	08007548 	.word	0x08007548
 800443c:	3ff00000 	.word	0x3ff00000
 8004440:	40240000 	.word	0x40240000
 8004444:	401c0000 	.word	0x401c0000
 8004448:	40140000 	.word	0x40140000
 800444c:	3fe00000 	.word	0x3fe00000
 8004450:	4630      	mov	r0, r6
 8004452:	4639      	mov	r1, r7
 8004454:	f7fc f850 	bl	80004f8 <__aeabi_dmul>
 8004458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800445a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800445e:	9c03      	ldr	r4, [sp, #12]
 8004460:	9314      	str	r3, [sp, #80]	; 0x50
 8004462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004466:	f7fc faf7 	bl	8000a58 <__aeabi_d2iz>
 800446a:	9015      	str	r0, [sp, #84]	; 0x54
 800446c:	f7fb ffda 	bl	8000424 <__aeabi_i2d>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004478:	f7fb fe86 	bl	8000188 <__aeabi_dsub>
 800447c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800447e:	4606      	mov	r6, r0
 8004480:	3330      	adds	r3, #48	; 0x30
 8004482:	f804 3b01 	strb.w	r3, [r4], #1
 8004486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004488:	460f      	mov	r7, r1
 800448a:	429c      	cmp	r4, r3
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	d124      	bne.n	80044dc <_dtoa_r+0x63c>
 8004492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004496:	4baf      	ldr	r3, [pc, #700]	; (8004754 <_dtoa_r+0x8b4>)
 8004498:	f7fb fe78 	bl	800018c <__adddf3>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4630      	mov	r0, r6
 80044a2:	4639      	mov	r1, r7
 80044a4:	f7fc fab8 	bl	8000a18 <__aeabi_dcmpgt>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d163      	bne.n	8004574 <_dtoa_r+0x6d4>
 80044ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044b0:	2000      	movs	r0, #0
 80044b2:	49a8      	ldr	r1, [pc, #672]	; (8004754 <_dtoa_r+0x8b4>)
 80044b4:	f7fb fe68 	bl	8000188 <__aeabi_dsub>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4630      	mov	r0, r6
 80044be:	4639      	mov	r1, r7
 80044c0:	f7fc fa8c 	bl	80009dc <__aeabi_dcmplt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f43f af1e 	beq.w	8004306 <_dtoa_r+0x466>
 80044ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044cc:	1e7b      	subs	r3, r7, #1
 80044ce:	9314      	str	r3, [sp, #80]	; 0x50
 80044d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80044d4:	2b30      	cmp	r3, #48	; 0x30
 80044d6:	d0f8      	beq.n	80044ca <_dtoa_r+0x62a>
 80044d8:	46c3      	mov	fp, r8
 80044da:	e03b      	b.n	8004554 <_dtoa_r+0x6b4>
 80044dc:	4b9e      	ldr	r3, [pc, #632]	; (8004758 <_dtoa_r+0x8b8>)
 80044de:	f7fc f80b 	bl	80004f8 <__aeabi_dmul>
 80044e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044e6:	e7bc      	b.n	8004462 <_dtoa_r+0x5c2>
 80044e8:	9f03      	ldr	r7, [sp, #12]
 80044ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80044ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044f2:	4640      	mov	r0, r8
 80044f4:	4649      	mov	r1, r9
 80044f6:	f7fc f929 	bl	800074c <__aeabi_ddiv>
 80044fa:	f7fc faad 	bl	8000a58 <__aeabi_d2iz>
 80044fe:	4604      	mov	r4, r0
 8004500:	f7fb ff90 	bl	8000424 <__aeabi_i2d>
 8004504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004508:	f7fb fff6 	bl	80004f8 <__aeabi_dmul>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	f7fb fe38 	bl	8000188 <__aeabi_dsub>
 8004518:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800451c:	f807 6b01 	strb.w	r6, [r7], #1
 8004520:	9e03      	ldr	r6, [sp, #12]
 8004522:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004526:	1bbe      	subs	r6, r7, r6
 8004528:	45b4      	cmp	ip, r6
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	d136      	bne.n	800459e <_dtoa_r+0x6fe>
 8004530:	f7fb fe2c 	bl	800018c <__adddf3>
 8004534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004538:	4680      	mov	r8, r0
 800453a:	4689      	mov	r9, r1
 800453c:	f7fc fa6c 	bl	8000a18 <__aeabi_dcmpgt>
 8004540:	bb58      	cbnz	r0, 800459a <_dtoa_r+0x6fa>
 8004542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004546:	4640      	mov	r0, r8
 8004548:	4649      	mov	r1, r9
 800454a:	f7fc fa3d 	bl	80009c8 <__aeabi_dcmpeq>
 800454e:	b108      	cbz	r0, 8004554 <_dtoa_r+0x6b4>
 8004550:	07e3      	lsls	r3, r4, #31
 8004552:	d422      	bmi.n	800459a <_dtoa_r+0x6fa>
 8004554:	4651      	mov	r1, sl
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fc24 	bl	8004da4 <_Bfree>
 800455c:	2300      	movs	r3, #0
 800455e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004560:	703b      	strb	r3, [r7, #0]
 8004562:	f10b 0301 	add.w	r3, fp, #1
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800456a:	2b00      	cmp	r3, #0
 800456c:	f43f ace6 	beq.w	8003f3c <_dtoa_r+0x9c>
 8004570:	601f      	str	r7, [r3, #0]
 8004572:	e4e3      	b.n	8003f3c <_dtoa_r+0x9c>
 8004574:	4627      	mov	r7, r4
 8004576:	463b      	mov	r3, r7
 8004578:	461f      	mov	r7, r3
 800457a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800457e:	2a39      	cmp	r2, #57	; 0x39
 8004580:	d107      	bne.n	8004592 <_dtoa_r+0x6f2>
 8004582:	9a03      	ldr	r2, [sp, #12]
 8004584:	429a      	cmp	r2, r3
 8004586:	d1f7      	bne.n	8004578 <_dtoa_r+0x6d8>
 8004588:	2230      	movs	r2, #48	; 0x30
 800458a:	9903      	ldr	r1, [sp, #12]
 800458c:	f108 0801 	add.w	r8, r8, #1
 8004590:	700a      	strb	r2, [r1, #0]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	3201      	adds	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e79e      	b.n	80044d8 <_dtoa_r+0x638>
 800459a:	46d8      	mov	r8, fp
 800459c:	e7eb      	b.n	8004576 <_dtoa_r+0x6d6>
 800459e:	2200      	movs	r2, #0
 80045a0:	4b6d      	ldr	r3, [pc, #436]	; (8004758 <_dtoa_r+0x8b8>)
 80045a2:	f7fb ffa9 	bl	80004f8 <__aeabi_dmul>
 80045a6:	2200      	movs	r2, #0
 80045a8:	2300      	movs	r3, #0
 80045aa:	4680      	mov	r8, r0
 80045ac:	4689      	mov	r9, r1
 80045ae:	f7fc fa0b 	bl	80009c8 <__aeabi_dcmpeq>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d09b      	beq.n	80044ee <_dtoa_r+0x64e>
 80045b6:	e7cd      	b.n	8004554 <_dtoa_r+0x6b4>
 80045b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	f000 80c4 	beq.w	8004748 <_dtoa_r+0x8a8>
 80045c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80045c2:	2a01      	cmp	r2, #1
 80045c4:	f300 80a8 	bgt.w	8004718 <_dtoa_r+0x878>
 80045c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	f000 80a0 	beq.w	8004710 <_dtoa_r+0x870>
 80045d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045d4:	464f      	mov	r7, r9
 80045d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045da:	2101      	movs	r1, #1
 80045dc:	441a      	add	r2, r3
 80045de:	4628      	mov	r0, r5
 80045e0:	4499      	add	r9, r3
 80045e2:	9209      	str	r2, [sp, #36]	; 0x24
 80045e4:	f000 fc94 	bl	8004f10 <__i2b>
 80045e8:	4606      	mov	r6, r0
 80045ea:	b15f      	cbz	r7, 8004604 <_dtoa_r+0x764>
 80045ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dd08      	ble.n	8004604 <_dtoa_r+0x764>
 80045f2:	42bb      	cmp	r3, r7
 80045f4:	bfa8      	it	ge
 80045f6:	463b      	movge	r3, r7
 80045f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fa:	eba9 0903 	sub.w	r9, r9, r3
 80045fe:	1aff      	subs	r7, r7, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	9309      	str	r3, [sp, #36]	; 0x24
 8004604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004606:	b1f3      	cbz	r3, 8004646 <_dtoa_r+0x7a6>
 8004608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a0 	beq.w	8004750 <_dtoa_r+0x8b0>
 8004610:	2c00      	cmp	r4, #0
 8004612:	dd10      	ble.n	8004636 <_dtoa_r+0x796>
 8004614:	4631      	mov	r1, r6
 8004616:	4622      	mov	r2, r4
 8004618:	4628      	mov	r0, r5
 800461a:	f000 fd37 	bl	800508c <__pow5mult>
 800461e:	4652      	mov	r2, sl
 8004620:	4601      	mov	r1, r0
 8004622:	4606      	mov	r6, r0
 8004624:	4628      	mov	r0, r5
 8004626:	f000 fc89 	bl	8004f3c <__multiply>
 800462a:	4680      	mov	r8, r0
 800462c:	4651      	mov	r1, sl
 800462e:	4628      	mov	r0, r5
 8004630:	f000 fbb8 	bl	8004da4 <_Bfree>
 8004634:	46c2      	mov	sl, r8
 8004636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004638:	1b1a      	subs	r2, r3, r4
 800463a:	d004      	beq.n	8004646 <_dtoa_r+0x7a6>
 800463c:	4651      	mov	r1, sl
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fd24 	bl	800508c <__pow5mult>
 8004644:	4682      	mov	sl, r0
 8004646:	2101      	movs	r1, #1
 8004648:	4628      	mov	r0, r5
 800464a:	f000 fc61 	bl	8004f10 <__i2b>
 800464e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004650:	4604      	mov	r4, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f340 8082 	ble.w	800475c <_dtoa_r+0x8bc>
 8004658:	461a      	mov	r2, r3
 800465a:	4601      	mov	r1, r0
 800465c:	4628      	mov	r0, r5
 800465e:	f000 fd15 	bl	800508c <__pow5mult>
 8004662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004664:	4604      	mov	r4, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	dd7b      	ble.n	8004762 <_dtoa_r+0x8c2>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004674:	6918      	ldr	r0, [r3, #16]
 8004676:	f000 fbfd 	bl	8004e74 <__hi0bits>
 800467a:	f1c0 0020 	rsb	r0, r0, #32
 800467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004680:	4418      	add	r0, r3
 8004682:	f010 001f 	ands.w	r0, r0, #31
 8004686:	f000 8092 	beq.w	80047ae <_dtoa_r+0x90e>
 800468a:	f1c0 0320 	rsb	r3, r0, #32
 800468e:	2b04      	cmp	r3, #4
 8004690:	f340 8085 	ble.w	800479e <_dtoa_r+0x8fe>
 8004694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004696:	f1c0 001c 	rsb	r0, r0, #28
 800469a:	4403      	add	r3, r0
 800469c:	4481      	add	r9, r0
 800469e:	4407      	add	r7, r0
 80046a0:	9309      	str	r3, [sp, #36]	; 0x24
 80046a2:	f1b9 0f00 	cmp.w	r9, #0
 80046a6:	dd05      	ble.n	80046b4 <_dtoa_r+0x814>
 80046a8:	4651      	mov	r1, sl
 80046aa:	464a      	mov	r2, r9
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 fd47 	bl	8005140 <__lshift>
 80046b2:	4682      	mov	sl, r0
 80046b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dd05      	ble.n	80046c6 <_dtoa_r+0x826>
 80046ba:	4621      	mov	r1, r4
 80046bc:	461a      	mov	r2, r3
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 fd3e 	bl	8005140 <__lshift>
 80046c4:	4604      	mov	r4, r0
 80046c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d072      	beq.n	80047b2 <_dtoa_r+0x912>
 80046cc:	4621      	mov	r1, r4
 80046ce:	4650      	mov	r0, sl
 80046d0:	f000 fda2 	bl	8005218 <__mcmp>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	da6c      	bge.n	80047b2 <_dtoa_r+0x912>
 80046d8:	2300      	movs	r3, #0
 80046da:	4651      	mov	r1, sl
 80046dc:	220a      	movs	r2, #10
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 fb82 	bl	8004de8 <__multadd>
 80046e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e6:	4682      	mov	sl, r0
 80046e8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 81ac 	beq.w	8004a4a <_dtoa_r+0xbaa>
 80046f2:	2300      	movs	r3, #0
 80046f4:	4631      	mov	r1, r6
 80046f6:	220a      	movs	r2, #10
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fb75 	bl	8004de8 <__multadd>
 80046fe:	9b06      	ldr	r3, [sp, #24]
 8004700:	4606      	mov	r6, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	f300 8093 	bgt.w	800482e <_dtoa_r+0x98e>
 8004708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800470a:	2b02      	cmp	r3, #2
 800470c:	dc59      	bgt.n	80047c2 <_dtoa_r+0x922>
 800470e:	e08e      	b.n	800482e <_dtoa_r+0x98e>
 8004710:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004712:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004716:	e75d      	b.n	80045d4 <_dtoa_r+0x734>
 8004718:	9b08      	ldr	r3, [sp, #32]
 800471a:	1e5c      	subs	r4, r3, #1
 800471c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471e:	42a3      	cmp	r3, r4
 8004720:	bfbf      	itttt	lt
 8004722:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004724:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004726:	1ae3      	sublt	r3, r4, r3
 8004728:	18d2      	addlt	r2, r2, r3
 800472a:	bfa8      	it	ge
 800472c:	1b1c      	subge	r4, r3, r4
 800472e:	9b08      	ldr	r3, [sp, #32]
 8004730:	bfbe      	ittt	lt
 8004732:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004734:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004736:	2400      	movlt	r4, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	bfb5      	itete	lt
 800473c:	eba9 0703 	sublt.w	r7, r9, r3
 8004740:	464f      	movge	r7, r9
 8004742:	2300      	movlt	r3, #0
 8004744:	9b08      	ldrge	r3, [sp, #32]
 8004746:	e747      	b.n	80045d8 <_dtoa_r+0x738>
 8004748:	464f      	mov	r7, r9
 800474a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800474c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800474e:	e74c      	b.n	80045ea <_dtoa_r+0x74a>
 8004750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004752:	e773      	b.n	800463c <_dtoa_r+0x79c>
 8004754:	3fe00000 	.word	0x3fe00000
 8004758:	40240000 	.word	0x40240000
 800475c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800475e:	2b01      	cmp	r3, #1
 8004760:	dc18      	bgt.n	8004794 <_dtoa_r+0x8f4>
 8004762:	9b04      	ldr	r3, [sp, #16]
 8004764:	b9b3      	cbnz	r3, 8004794 <_dtoa_r+0x8f4>
 8004766:	9b05      	ldr	r3, [sp, #20]
 8004768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800476c:	b993      	cbnz	r3, 8004794 <_dtoa_r+0x8f4>
 800476e:	9b05      	ldr	r3, [sp, #20]
 8004770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004774:	0d1b      	lsrs	r3, r3, #20
 8004776:	051b      	lsls	r3, r3, #20
 8004778:	b17b      	cbz	r3, 800479a <_dtoa_r+0x8fa>
 800477a:	f04f 0801 	mov.w	r8, #1
 800477e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004780:	f109 0901 	add.w	r9, r9, #1
 8004784:	3301      	adds	r3, #1
 8004786:	9309      	str	r3, [sp, #36]	; 0x24
 8004788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	f47f af6f 	bne.w	800466e <_dtoa_r+0x7ce>
 8004790:	2001      	movs	r0, #1
 8004792:	e774      	b.n	800467e <_dtoa_r+0x7de>
 8004794:	f04f 0800 	mov.w	r8, #0
 8004798:	e7f6      	b.n	8004788 <_dtoa_r+0x8e8>
 800479a:	4698      	mov	r8, r3
 800479c:	e7f4      	b.n	8004788 <_dtoa_r+0x8e8>
 800479e:	d080      	beq.n	80046a2 <_dtoa_r+0x802>
 80047a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a2:	331c      	adds	r3, #28
 80047a4:	441a      	add	r2, r3
 80047a6:	4499      	add	r9, r3
 80047a8:	441f      	add	r7, r3
 80047aa:	9209      	str	r2, [sp, #36]	; 0x24
 80047ac:	e779      	b.n	80046a2 <_dtoa_r+0x802>
 80047ae:	4603      	mov	r3, r0
 80047b0:	e7f6      	b.n	80047a0 <_dtoa_r+0x900>
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dc34      	bgt.n	8004822 <_dtoa_r+0x982>
 80047b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	dd31      	ble.n	8004822 <_dtoa_r+0x982>
 80047be:	9b08      	ldr	r3, [sp, #32]
 80047c0:	9306      	str	r3, [sp, #24]
 80047c2:	9b06      	ldr	r3, [sp, #24]
 80047c4:	b963      	cbnz	r3, 80047e0 <_dtoa_r+0x940>
 80047c6:	4621      	mov	r1, r4
 80047c8:	2205      	movs	r2, #5
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 fb0c 	bl	8004de8 <__multadd>
 80047d0:	4601      	mov	r1, r0
 80047d2:	4604      	mov	r4, r0
 80047d4:	4650      	mov	r0, sl
 80047d6:	f000 fd1f 	bl	8005218 <__mcmp>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f73f adbf 	bgt.w	800435e <_dtoa_r+0x4be>
 80047e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047e2:	9f03      	ldr	r7, [sp, #12]
 80047e4:	ea6f 0b03 	mvn.w	fp, r3
 80047e8:	f04f 0800 	mov.w	r8, #0
 80047ec:	4621      	mov	r1, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 fad8 	bl	8004da4 <_Bfree>
 80047f4:	2e00      	cmp	r6, #0
 80047f6:	f43f aead 	beq.w	8004554 <_dtoa_r+0x6b4>
 80047fa:	f1b8 0f00 	cmp.w	r8, #0
 80047fe:	d005      	beq.n	800480c <_dtoa_r+0x96c>
 8004800:	45b0      	cmp	r8, r6
 8004802:	d003      	beq.n	800480c <_dtoa_r+0x96c>
 8004804:	4641      	mov	r1, r8
 8004806:	4628      	mov	r0, r5
 8004808:	f000 facc 	bl	8004da4 <_Bfree>
 800480c:	4631      	mov	r1, r6
 800480e:	4628      	mov	r0, r5
 8004810:	f000 fac8 	bl	8004da4 <_Bfree>
 8004814:	e69e      	b.n	8004554 <_dtoa_r+0x6b4>
 8004816:	2400      	movs	r4, #0
 8004818:	4626      	mov	r6, r4
 800481a:	e7e1      	b.n	80047e0 <_dtoa_r+0x940>
 800481c:	46c3      	mov	fp, r8
 800481e:	4626      	mov	r6, r4
 8004820:	e59d      	b.n	800435e <_dtoa_r+0x4be>
 8004822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80c8 	beq.w	80049ba <_dtoa_r+0xb1a>
 800482a:	9b08      	ldr	r3, [sp, #32]
 800482c:	9306      	str	r3, [sp, #24]
 800482e:	2f00      	cmp	r7, #0
 8004830:	dd05      	ble.n	800483e <_dtoa_r+0x99e>
 8004832:	4631      	mov	r1, r6
 8004834:	463a      	mov	r2, r7
 8004836:	4628      	mov	r0, r5
 8004838:	f000 fc82 	bl	8005140 <__lshift>
 800483c:	4606      	mov	r6, r0
 800483e:	f1b8 0f00 	cmp.w	r8, #0
 8004842:	d05b      	beq.n	80048fc <_dtoa_r+0xa5c>
 8004844:	4628      	mov	r0, r5
 8004846:	6871      	ldr	r1, [r6, #4]
 8004848:	f000 fa6c 	bl	8004d24 <_Balloc>
 800484c:	4607      	mov	r7, r0
 800484e:	b928      	cbnz	r0, 800485c <_dtoa_r+0x9bc>
 8004850:	4602      	mov	r2, r0
 8004852:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004856:	4b81      	ldr	r3, [pc, #516]	; (8004a5c <_dtoa_r+0xbbc>)
 8004858:	f7ff bb36 	b.w	8003ec8 <_dtoa_r+0x28>
 800485c:	6932      	ldr	r2, [r6, #16]
 800485e:	f106 010c 	add.w	r1, r6, #12
 8004862:	3202      	adds	r2, #2
 8004864:	0092      	lsls	r2, r2, #2
 8004866:	300c      	adds	r0, #12
 8004868:	f000 fe6e 	bl	8005548 <memcpy>
 800486c:	2201      	movs	r2, #1
 800486e:	4639      	mov	r1, r7
 8004870:	4628      	mov	r0, r5
 8004872:	f000 fc65 	bl	8005140 <__lshift>
 8004876:	46b0      	mov	r8, r6
 8004878:	4606      	mov	r6, r0
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	9a03      	ldr	r2, [sp, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	9308      	str	r3, [sp, #32]
 8004882:	9b06      	ldr	r3, [sp, #24]
 8004884:	4413      	add	r3, r2
 8004886:	930b      	str	r3, [sp, #44]	; 0x2c
 8004888:	9b04      	ldr	r3, [sp, #16]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	930a      	str	r3, [sp, #40]	; 0x28
 8004890:	9b08      	ldr	r3, [sp, #32]
 8004892:	4621      	mov	r1, r4
 8004894:	3b01      	subs	r3, #1
 8004896:	4650      	mov	r0, sl
 8004898:	9304      	str	r3, [sp, #16]
 800489a:	f7ff fa75 	bl	8003d88 <quorem>
 800489e:	4641      	mov	r1, r8
 80048a0:	9006      	str	r0, [sp, #24]
 80048a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80048a6:	4650      	mov	r0, sl
 80048a8:	f000 fcb6 	bl	8005218 <__mcmp>
 80048ac:	4632      	mov	r2, r6
 80048ae:	9009      	str	r0, [sp, #36]	; 0x24
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 fccc 	bl	8005250 <__mdiff>
 80048b8:	68c2      	ldr	r2, [r0, #12]
 80048ba:	4607      	mov	r7, r0
 80048bc:	bb02      	cbnz	r2, 8004900 <_dtoa_r+0xa60>
 80048be:	4601      	mov	r1, r0
 80048c0:	4650      	mov	r0, sl
 80048c2:	f000 fca9 	bl	8005218 <__mcmp>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4639      	mov	r1, r7
 80048ca:	4628      	mov	r0, r5
 80048cc:	920c      	str	r2, [sp, #48]	; 0x30
 80048ce:	f000 fa69 	bl	8004da4 <_Bfree>
 80048d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048d6:	9f08      	ldr	r7, [sp, #32]
 80048d8:	ea43 0102 	orr.w	r1, r3, r2
 80048dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048de:	4319      	orrs	r1, r3
 80048e0:	d110      	bne.n	8004904 <_dtoa_r+0xa64>
 80048e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048e6:	d029      	beq.n	800493c <_dtoa_r+0xa9c>
 80048e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd02      	ble.n	80048f4 <_dtoa_r+0xa54>
 80048ee:	9b06      	ldr	r3, [sp, #24]
 80048f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80048f4:	9b04      	ldr	r3, [sp, #16]
 80048f6:	f883 9000 	strb.w	r9, [r3]
 80048fa:	e777      	b.n	80047ec <_dtoa_r+0x94c>
 80048fc:	4630      	mov	r0, r6
 80048fe:	e7ba      	b.n	8004876 <_dtoa_r+0x9d6>
 8004900:	2201      	movs	r2, #1
 8004902:	e7e1      	b.n	80048c8 <_dtoa_r+0xa28>
 8004904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	db04      	blt.n	8004914 <_dtoa_r+0xa74>
 800490a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800490c:	430b      	orrs	r3, r1
 800490e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004910:	430b      	orrs	r3, r1
 8004912:	d120      	bne.n	8004956 <_dtoa_r+0xab6>
 8004914:	2a00      	cmp	r2, #0
 8004916:	dded      	ble.n	80048f4 <_dtoa_r+0xa54>
 8004918:	4651      	mov	r1, sl
 800491a:	2201      	movs	r2, #1
 800491c:	4628      	mov	r0, r5
 800491e:	f000 fc0f 	bl	8005140 <__lshift>
 8004922:	4621      	mov	r1, r4
 8004924:	4682      	mov	sl, r0
 8004926:	f000 fc77 	bl	8005218 <__mcmp>
 800492a:	2800      	cmp	r0, #0
 800492c:	dc03      	bgt.n	8004936 <_dtoa_r+0xa96>
 800492e:	d1e1      	bne.n	80048f4 <_dtoa_r+0xa54>
 8004930:	f019 0f01 	tst.w	r9, #1
 8004934:	d0de      	beq.n	80048f4 <_dtoa_r+0xa54>
 8004936:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800493a:	d1d8      	bne.n	80048ee <_dtoa_r+0xa4e>
 800493c:	2339      	movs	r3, #57	; 0x39
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	7013      	strb	r3, [r2, #0]
 8004942:	463b      	mov	r3, r7
 8004944:	461f      	mov	r7, r3
 8004946:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800494a:	3b01      	subs	r3, #1
 800494c:	2a39      	cmp	r2, #57	; 0x39
 800494e:	d06b      	beq.n	8004a28 <_dtoa_r+0xb88>
 8004950:	3201      	adds	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e74a      	b.n	80047ec <_dtoa_r+0x94c>
 8004956:	2a00      	cmp	r2, #0
 8004958:	dd07      	ble.n	800496a <_dtoa_r+0xaca>
 800495a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800495e:	d0ed      	beq.n	800493c <_dtoa_r+0xa9c>
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	f109 0301 	add.w	r3, r9, #1
 8004966:	7013      	strb	r3, [r2, #0]
 8004968:	e740      	b.n	80047ec <_dtoa_r+0x94c>
 800496a:	9b08      	ldr	r3, [sp, #32]
 800496c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800496e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004972:	4293      	cmp	r3, r2
 8004974:	d042      	beq.n	80049fc <_dtoa_r+0xb5c>
 8004976:	4651      	mov	r1, sl
 8004978:	2300      	movs	r3, #0
 800497a:	220a      	movs	r2, #10
 800497c:	4628      	mov	r0, r5
 800497e:	f000 fa33 	bl	8004de8 <__multadd>
 8004982:	45b0      	cmp	r8, r6
 8004984:	4682      	mov	sl, r0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	f04f 020a 	mov.w	r2, #10
 800498e:	4641      	mov	r1, r8
 8004990:	4628      	mov	r0, r5
 8004992:	d107      	bne.n	80049a4 <_dtoa_r+0xb04>
 8004994:	f000 fa28 	bl	8004de8 <__multadd>
 8004998:	4680      	mov	r8, r0
 800499a:	4606      	mov	r6, r0
 800499c:	9b08      	ldr	r3, [sp, #32]
 800499e:	3301      	adds	r3, #1
 80049a0:	9308      	str	r3, [sp, #32]
 80049a2:	e775      	b.n	8004890 <_dtoa_r+0x9f0>
 80049a4:	f000 fa20 	bl	8004de8 <__multadd>
 80049a8:	4631      	mov	r1, r6
 80049aa:	4680      	mov	r8, r0
 80049ac:	2300      	movs	r3, #0
 80049ae:	220a      	movs	r2, #10
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 fa19 	bl	8004de8 <__multadd>
 80049b6:	4606      	mov	r6, r0
 80049b8:	e7f0      	b.n	800499c <_dtoa_r+0xafc>
 80049ba:	9b08      	ldr	r3, [sp, #32]
 80049bc:	9306      	str	r3, [sp, #24]
 80049be:	9f03      	ldr	r7, [sp, #12]
 80049c0:	4621      	mov	r1, r4
 80049c2:	4650      	mov	r0, sl
 80049c4:	f7ff f9e0 	bl	8003d88 <quorem>
 80049c8:	9b03      	ldr	r3, [sp, #12]
 80049ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049ce:	f807 9b01 	strb.w	r9, [r7], #1
 80049d2:	1afa      	subs	r2, r7, r3
 80049d4:	9b06      	ldr	r3, [sp, #24]
 80049d6:	4293      	cmp	r3, r2
 80049d8:	dd07      	ble.n	80049ea <_dtoa_r+0xb4a>
 80049da:	4651      	mov	r1, sl
 80049dc:	2300      	movs	r3, #0
 80049de:	220a      	movs	r2, #10
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 fa01 	bl	8004de8 <__multadd>
 80049e6:	4682      	mov	sl, r0
 80049e8:	e7ea      	b.n	80049c0 <_dtoa_r+0xb20>
 80049ea:	9b06      	ldr	r3, [sp, #24]
 80049ec:	f04f 0800 	mov.w	r8, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bfcc      	ite	gt
 80049f4:	461f      	movgt	r7, r3
 80049f6:	2701      	movle	r7, #1
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	441f      	add	r7, r3
 80049fc:	4651      	mov	r1, sl
 80049fe:	2201      	movs	r2, #1
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 fb9d 	bl	8005140 <__lshift>
 8004a06:	4621      	mov	r1, r4
 8004a08:	4682      	mov	sl, r0
 8004a0a:	f000 fc05 	bl	8005218 <__mcmp>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	dc97      	bgt.n	8004942 <_dtoa_r+0xaa2>
 8004a12:	d102      	bne.n	8004a1a <_dtoa_r+0xb7a>
 8004a14:	f019 0f01 	tst.w	r9, #1
 8004a18:	d193      	bne.n	8004942 <_dtoa_r+0xaa2>
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	461f      	mov	r7, r3
 8004a1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a22:	2a30      	cmp	r2, #48	; 0x30
 8004a24:	d0fa      	beq.n	8004a1c <_dtoa_r+0xb7c>
 8004a26:	e6e1      	b.n	80047ec <_dtoa_r+0x94c>
 8004a28:	9a03      	ldr	r2, [sp, #12]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d18a      	bne.n	8004944 <_dtoa_r+0xaa4>
 8004a2e:	2331      	movs	r3, #49	; 0x31
 8004a30:	f10b 0b01 	add.w	fp, fp, #1
 8004a34:	e797      	b.n	8004966 <_dtoa_r+0xac6>
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <_dtoa_r+0xbc0>)
 8004a38:	f7ff ba9f 	b.w	8003f7a <_dtoa_r+0xda>
 8004a3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f47f aa77 	bne.w	8003f32 <_dtoa_r+0x92>
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <_dtoa_r+0xbc4>)
 8004a46:	f7ff ba98 	b.w	8003f7a <_dtoa_r+0xda>
 8004a4a:	9b06      	ldr	r3, [sp, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	dcb6      	bgt.n	80049be <_dtoa_r+0xb1e>
 8004a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	f73f aeb5 	bgt.w	80047c2 <_dtoa_r+0x922>
 8004a58:	e7b1      	b.n	80049be <_dtoa_r+0xb1e>
 8004a5a:	bf00      	nop
 8004a5c:	080074d8 	.word	0x080074d8
 8004a60:	08007438 	.word	0x08007438
 8004a64:	0800745c 	.word	0x0800745c

08004a68 <malloc>:
 8004a68:	4b02      	ldr	r3, [pc, #8]	; (8004a74 <malloc+0xc>)
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f000 b823 	b.w	8004ab8 <_malloc_r>
 8004a72:	bf00      	nop
 8004a74:	20000064 	.word	0x20000064

08004a78 <sbrk_aligned>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0e      	ldr	r6, [pc, #56]	; (8004ab4 <sbrk_aligned+0x3c>)
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	6831      	ldr	r1, [r6, #0]
 8004a80:	4605      	mov	r5, r0
 8004a82:	b911      	cbnz	r1, 8004a8a <sbrk_aligned+0x12>
 8004a84:	f000 fd3e 	bl	8005504 <_sbrk_r>
 8004a88:	6030      	str	r0, [r6, #0]
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 fd39 	bl	8005504 <_sbrk_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d00a      	beq.n	8004aac <sbrk_aligned+0x34>
 8004a96:	1cc4      	adds	r4, r0, #3
 8004a98:	f024 0403 	bic.w	r4, r4, #3
 8004a9c:	42a0      	cmp	r0, r4
 8004a9e:	d007      	beq.n	8004ab0 <sbrk_aligned+0x38>
 8004aa0:	1a21      	subs	r1, r4, r0
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 fd2e 	bl	8005504 <_sbrk_r>
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d101      	bne.n	8004ab0 <sbrk_aligned+0x38>
 8004aac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	200003f4 	.word	0x200003f4

08004ab8 <_malloc_r>:
 8004ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004abc:	1ccd      	adds	r5, r1, #3
 8004abe:	f025 0503 	bic.w	r5, r5, #3
 8004ac2:	3508      	adds	r5, #8
 8004ac4:	2d0c      	cmp	r5, #12
 8004ac6:	bf38      	it	cc
 8004ac8:	250c      	movcc	r5, #12
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	4607      	mov	r7, r0
 8004ace:	db01      	blt.n	8004ad4 <_malloc_r+0x1c>
 8004ad0:	42a9      	cmp	r1, r5
 8004ad2:	d905      	bls.n	8004ae0 <_malloc_r+0x28>
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4630      	mov	r0, r6
 8004adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bb4 <_malloc_r+0xfc>
 8004ae4:	f000 f912 	bl	8004d0c <__malloc_lock>
 8004ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8004aec:	461c      	mov	r4, r3
 8004aee:	bb5c      	cbnz	r4, 8004b48 <_malloc_r+0x90>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4638      	mov	r0, r7
 8004af4:	f7ff ffc0 	bl	8004a78 <sbrk_aligned>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	4604      	mov	r4, r0
 8004afc:	d155      	bne.n	8004baa <_malloc_r+0xf2>
 8004afe:	f8d8 4000 	ldr.w	r4, [r8]
 8004b02:	4626      	mov	r6, r4
 8004b04:	2e00      	cmp	r6, #0
 8004b06:	d145      	bne.n	8004b94 <_malloc_r+0xdc>
 8004b08:	2c00      	cmp	r4, #0
 8004b0a:	d048      	beq.n	8004b9e <_malloc_r+0xe6>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4638      	mov	r0, r7
 8004b12:	eb04 0903 	add.w	r9, r4, r3
 8004b16:	f000 fcf5 	bl	8005504 <_sbrk_r>
 8004b1a:	4581      	cmp	r9, r0
 8004b1c:	d13f      	bne.n	8004b9e <_malloc_r+0xe6>
 8004b1e:	6821      	ldr	r1, [r4, #0]
 8004b20:	4638      	mov	r0, r7
 8004b22:	1a6d      	subs	r5, r5, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7ff ffa7 	bl	8004a78 <sbrk_aligned>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d037      	beq.n	8004b9e <_malloc_r+0xe6>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	442b      	add	r3, r5
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	f8d8 3000 	ldr.w	r3, [r8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d038      	beq.n	8004bae <_malloc_r+0xf6>
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	42a2      	cmp	r2, r4
 8004b40:	d12b      	bne.n	8004b9a <_malloc_r+0xe2>
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	e00f      	b.n	8004b68 <_malloc_r+0xb0>
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	1b52      	subs	r2, r2, r5
 8004b4c:	d41f      	bmi.n	8004b8e <_malloc_r+0xd6>
 8004b4e:	2a0b      	cmp	r2, #11
 8004b50:	d917      	bls.n	8004b82 <_malloc_r+0xca>
 8004b52:	1961      	adds	r1, r4, r5
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	6025      	str	r5, [r4, #0]
 8004b58:	bf18      	it	ne
 8004b5a:	6059      	strne	r1, [r3, #4]
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	bf08      	it	eq
 8004b60:	f8c8 1000 	streq.w	r1, [r8]
 8004b64:	5162      	str	r2, [r4, r5]
 8004b66:	604b      	str	r3, [r1, #4]
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f104 060b 	add.w	r6, r4, #11
 8004b6e:	f000 f8d3 	bl	8004d18 <__malloc_unlock>
 8004b72:	f026 0607 	bic.w	r6, r6, #7
 8004b76:	1d23      	adds	r3, r4, #4
 8004b78:	1af2      	subs	r2, r6, r3
 8004b7a:	d0ae      	beq.n	8004ada <_malloc_r+0x22>
 8004b7c:	1b9b      	subs	r3, r3, r6
 8004b7e:	50a3      	str	r3, [r4, r2]
 8004b80:	e7ab      	b.n	8004ada <_malloc_r+0x22>
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	6862      	ldr	r2, [r4, #4]
 8004b86:	d1dd      	bne.n	8004b44 <_malloc_r+0x8c>
 8004b88:	f8c8 2000 	str.w	r2, [r8]
 8004b8c:	e7ec      	b.n	8004b68 <_malloc_r+0xb0>
 8004b8e:	4623      	mov	r3, r4
 8004b90:	6864      	ldr	r4, [r4, #4]
 8004b92:	e7ac      	b.n	8004aee <_malloc_r+0x36>
 8004b94:	4634      	mov	r4, r6
 8004b96:	6876      	ldr	r6, [r6, #4]
 8004b98:	e7b4      	b.n	8004b04 <_malloc_r+0x4c>
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	e7cc      	b.n	8004b38 <_malloc_r+0x80>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	f000 f8b8 	bl	8004d18 <__malloc_unlock>
 8004ba8:	e797      	b.n	8004ada <_malloc_r+0x22>
 8004baa:	6025      	str	r5, [r4, #0]
 8004bac:	e7dc      	b.n	8004b68 <_malloc_r+0xb0>
 8004bae:	605b      	str	r3, [r3, #4]
 8004bb0:	deff      	udf	#255	; 0xff
 8004bb2:	bf00      	nop
 8004bb4:	200003f0 	.word	0x200003f0

08004bb8 <__sflush_r>:
 8004bb8:	898a      	ldrh	r2, [r1, #12]
 8004bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	0710      	lsls	r0, r2, #28
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d457      	bmi.n	8004c74 <__sflush_r+0xbc>
 8004bc4:	684b      	ldr	r3, [r1, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	dc04      	bgt.n	8004bd4 <__sflush_r+0x1c>
 8004bca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	dc01      	bgt.n	8004bd4 <__sflush_r+0x1c>
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d0fa      	beq.n	8004bd0 <__sflush_r+0x18>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004be0:	682f      	ldr	r7, [r5, #0]
 8004be2:	6a21      	ldr	r1, [r4, #32]
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	d032      	beq.n	8004c4e <__sflush_r+0x96>
 8004be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	075a      	lsls	r2, r3, #29
 8004bee:	d505      	bpl.n	8004bfc <__sflush_r+0x44>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	1ac0      	subs	r0, r0, r3
 8004bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf6:	b10b      	cbz	r3, 8004bfc <__sflush_r+0x44>
 8004bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bfa:	1ac0      	subs	r0, r0, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c02:	4628      	mov	r0, r5
 8004c04:	6a21      	ldr	r1, [r4, #32]
 8004c06:	47b0      	blx	r6
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	d106      	bne.n	8004c1c <__sflush_r+0x64>
 8004c0e:	6829      	ldr	r1, [r5, #0]
 8004c10:	291d      	cmp	r1, #29
 8004c12:	d82b      	bhi.n	8004c6c <__sflush_r+0xb4>
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <__sflush_r+0x100>)
 8004c16:	410a      	asrs	r2, r1
 8004c18:	07d6      	lsls	r6, r2, #31
 8004c1a:	d427      	bmi.n	8004c6c <__sflush_r+0xb4>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	6062      	str	r2, [r4, #4]
 8004c20:	6922      	ldr	r2, [r4, #16]
 8004c22:	04d9      	lsls	r1, r3, #19
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	d504      	bpl.n	8004c32 <__sflush_r+0x7a>
 8004c28:	1c42      	adds	r2, r0, #1
 8004c2a:	d101      	bne.n	8004c30 <__sflush_r+0x78>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b903      	cbnz	r3, 8004c32 <__sflush_r+0x7a>
 8004c30:	6560      	str	r0, [r4, #84]	; 0x54
 8004c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c34:	602f      	str	r7, [r5, #0]
 8004c36:	2900      	cmp	r1, #0
 8004c38:	d0ca      	beq.n	8004bd0 <__sflush_r+0x18>
 8004c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d002      	beq.n	8004c48 <__sflush_r+0x90>
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 fcc0 	bl	80055c8 <_free_r>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8004c4c:	e7c1      	b.n	8004bd2 <__sflush_r+0x1a>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b0      	blx	r6
 8004c54:	1c41      	adds	r1, r0, #1
 8004c56:	d1c8      	bne.n	8004bea <__sflush_r+0x32>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c5      	beq.n	8004bea <__sflush_r+0x32>
 8004c5e:	2b1d      	cmp	r3, #29
 8004c60:	d001      	beq.n	8004c66 <__sflush_r+0xae>
 8004c62:	2b16      	cmp	r3, #22
 8004c64:	d101      	bne.n	8004c6a <__sflush_r+0xb2>
 8004c66:	602f      	str	r7, [r5, #0]
 8004c68:	e7b2      	b.n	8004bd0 <__sflush_r+0x18>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	e7ae      	b.n	8004bd2 <__sflush_r+0x1a>
 8004c74:	690f      	ldr	r7, [r1, #16]
 8004c76:	2f00      	cmp	r7, #0
 8004c78:	d0aa      	beq.n	8004bd0 <__sflush_r+0x18>
 8004c7a:	0793      	lsls	r3, r2, #30
 8004c7c:	bf18      	it	ne
 8004c7e:	2300      	movne	r3, #0
 8004c80:	680e      	ldr	r6, [r1, #0]
 8004c82:	bf08      	it	eq
 8004c84:	694b      	ldreq	r3, [r1, #20]
 8004c86:	1bf6      	subs	r6, r6, r7
 8004c88:	600f      	str	r7, [r1, #0]
 8004c8a:	608b      	str	r3, [r1, #8]
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	dd9f      	ble.n	8004bd0 <__sflush_r+0x18>
 8004c90:	4633      	mov	r3, r6
 8004c92:	463a      	mov	r2, r7
 8004c94:	4628      	mov	r0, r5
 8004c96:	6a21      	ldr	r1, [r4, #32]
 8004c98:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c9c:	47e0      	blx	ip
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	dc06      	bgt.n	8004cb0 <__sflush_r+0xf8>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	e790      	b.n	8004bd2 <__sflush_r+0x1a>
 8004cb0:	4407      	add	r7, r0
 8004cb2:	1a36      	subs	r6, r6, r0
 8004cb4:	e7ea      	b.n	8004c8c <__sflush_r+0xd4>
 8004cb6:	bf00      	nop
 8004cb8:	dfbffffe 	.word	0xdfbffffe

08004cbc <_fflush_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	690b      	ldr	r3, [r1, #16]
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	b913      	cbnz	r3, 8004ccc <_fflush_r+0x10>
 8004cc6:	2500      	movs	r5, #0
 8004cc8:	4628      	mov	r0, r5
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	b118      	cbz	r0, 8004cd6 <_fflush_r+0x1a>
 8004cce:	6a03      	ldr	r3, [r0, #32]
 8004cd0:	b90b      	cbnz	r3, 8004cd6 <_fflush_r+0x1a>
 8004cd2:	f7fe ffdd 	bl	8003c90 <__sinit>
 8004cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f3      	beq.n	8004cc6 <_fflush_r+0xa>
 8004cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ce0:	07d0      	lsls	r0, r2, #31
 8004ce2:	d404      	bmi.n	8004cee <_fflush_r+0x32>
 8004ce4:	0599      	lsls	r1, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_fflush_r+0x32>
 8004ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cea:	f7ff f83d 	bl	8003d68 <__retarget_lock_acquire_recursive>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	f7ff ff61 	bl	8004bb8 <__sflush_r>
 8004cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	07da      	lsls	r2, r3, #31
 8004cfc:	d4e4      	bmi.n	8004cc8 <_fflush_r+0xc>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	059b      	lsls	r3, r3, #22
 8004d02:	d4e1      	bmi.n	8004cc8 <_fflush_r+0xc>
 8004d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d06:	f7ff f830 	bl	8003d6a <__retarget_lock_release_recursive>
 8004d0a:	e7dd      	b.n	8004cc8 <_fflush_r+0xc>

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f7ff b82b 	b.w	8003d68 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	200003ec 	.word	0x200003ec

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f7ff b826 	b.w	8003d6a <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	200003ec 	.word	0x200003ec

08004d24 <_Balloc>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	69c6      	ldr	r6, [r0, #28]
 8004d28:	4604      	mov	r4, r0
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	b976      	cbnz	r6, 8004d4c <_Balloc+0x28>
 8004d2e:	2010      	movs	r0, #16
 8004d30:	f7ff fe9a 	bl	8004a68 <malloc>
 8004d34:	4602      	mov	r2, r0
 8004d36:	61e0      	str	r0, [r4, #28]
 8004d38:	b920      	cbnz	r0, 8004d44 <_Balloc+0x20>
 8004d3a:	216b      	movs	r1, #107	; 0x6b
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <_Balloc+0x78>)
 8004d3e:	4818      	ldr	r0, [pc, #96]	; (8004da0 <_Balloc+0x7c>)
 8004d40:	f000 fc10 	bl	8005564 <__assert_func>
 8004d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d48:	6006      	str	r6, [r0, #0]
 8004d4a:	60c6      	str	r6, [r0, #12]
 8004d4c:	69e6      	ldr	r6, [r4, #28]
 8004d4e:	68f3      	ldr	r3, [r6, #12]
 8004d50:	b183      	cbz	r3, 8004d74 <_Balloc+0x50>
 8004d52:	69e3      	ldr	r3, [r4, #28]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d5a:	b9b8      	cbnz	r0, 8004d8c <_Balloc+0x68>
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8004d62:	1d72      	adds	r2, r6, #5
 8004d64:	4620      	mov	r0, r4
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	f000 fc1a 	bl	80055a0 <_calloc_r>
 8004d6c:	b160      	cbz	r0, 8004d88 <_Balloc+0x64>
 8004d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d72:	e00e      	b.n	8004d92 <_Balloc+0x6e>
 8004d74:	2221      	movs	r2, #33	; 0x21
 8004d76:	2104      	movs	r1, #4
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 fc11 	bl	80055a0 <_calloc_r>
 8004d7e:	69e3      	ldr	r3, [r4, #28]
 8004d80:	60f0      	str	r0, [r6, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e4      	bne.n	8004d52 <_Balloc+0x2e>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	6802      	ldr	r2, [r0, #0]
 8004d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d92:	2300      	movs	r3, #0
 8004d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d98:	e7f7      	b.n	8004d8a <_Balloc+0x66>
 8004d9a:	bf00      	nop
 8004d9c:	08007469 	.word	0x08007469
 8004da0:	080074e9 	.word	0x080074e9

08004da4 <_Bfree>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	69c6      	ldr	r6, [r0, #28]
 8004da8:	4605      	mov	r5, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	b976      	cbnz	r6, 8004dcc <_Bfree+0x28>
 8004dae:	2010      	movs	r0, #16
 8004db0:	f7ff fe5a 	bl	8004a68 <malloc>
 8004db4:	4602      	mov	r2, r0
 8004db6:	61e8      	str	r0, [r5, #28]
 8004db8:	b920      	cbnz	r0, 8004dc4 <_Bfree+0x20>
 8004dba:	218f      	movs	r1, #143	; 0x8f
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <_Bfree+0x3c>)
 8004dbe:	4809      	ldr	r0, [pc, #36]	; (8004de4 <_Bfree+0x40>)
 8004dc0:	f000 fbd0 	bl	8005564 <__assert_func>
 8004dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dc8:	6006      	str	r6, [r0, #0]
 8004dca:	60c6      	str	r6, [r0, #12]
 8004dcc:	b13c      	cbz	r4, 8004dde <_Bfree+0x3a>
 8004dce:	69eb      	ldr	r3, [r5, #28]
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dd8:	6021      	str	r1, [r4, #0]
 8004dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	08007469 	.word	0x08007469
 8004de4:	080074e9 	.word	0x080074e9

08004de8 <__multadd>:
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	4607      	mov	r7, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	461e      	mov	r6, r3
 8004df2:	2000      	movs	r0, #0
 8004df4:	690d      	ldr	r5, [r1, #16]
 8004df6:	f101 0c14 	add.w	ip, r1, #20
 8004dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8004dfe:	3001      	adds	r0, #1
 8004e00:	b299      	uxth	r1, r3
 8004e02:	fb02 6101 	mla	r1, r2, r1, r6
 8004e06:	0c1e      	lsrs	r6, r3, #16
 8004e08:	0c0b      	lsrs	r3, r1, #16
 8004e0a:	fb02 3306 	mla	r3, r2, r6, r3
 8004e0e:	b289      	uxth	r1, r1
 8004e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e14:	4285      	cmp	r5, r0
 8004e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8004e1e:	dcec      	bgt.n	8004dfa <__multadd+0x12>
 8004e20:	b30e      	cbz	r6, 8004e66 <__multadd+0x7e>
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc19      	bgt.n	8004e5c <__multadd+0x74>
 8004e28:	6861      	ldr	r1, [r4, #4]
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	3101      	adds	r1, #1
 8004e2e:	f7ff ff79 	bl	8004d24 <_Balloc>
 8004e32:	4680      	mov	r8, r0
 8004e34:	b928      	cbnz	r0, 8004e42 <__multadd+0x5a>
 8004e36:	4602      	mov	r2, r0
 8004e38:	21ba      	movs	r1, #186	; 0xba
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <__multadd+0x84>)
 8004e3c:	480c      	ldr	r0, [pc, #48]	; (8004e70 <__multadd+0x88>)
 8004e3e:	f000 fb91 	bl	8005564 <__assert_func>
 8004e42:	6922      	ldr	r2, [r4, #16]
 8004e44:	f104 010c 	add.w	r1, r4, #12
 8004e48:	3202      	adds	r2, #2
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	300c      	adds	r0, #12
 8004e4e:	f000 fb7b 	bl	8005548 <memcpy>
 8004e52:	4621      	mov	r1, r4
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ffa5 	bl	8004da4 <_Bfree>
 8004e5a:	4644      	mov	r4, r8
 8004e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e60:	3501      	adds	r5, #1
 8004e62:	615e      	str	r6, [r3, #20]
 8004e64:	6125      	str	r5, [r4, #16]
 8004e66:	4620      	mov	r0, r4
 8004e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e6c:	080074d8 	.word	0x080074d8
 8004e70:	080074e9 	.word	0x080074e9

08004e74 <__hi0bits>:
 8004e74:	0c02      	lsrs	r2, r0, #16
 8004e76:	0412      	lsls	r2, r2, #16
 8004e78:	4603      	mov	r3, r0
 8004e7a:	b9ca      	cbnz	r2, 8004eb0 <__hi0bits+0x3c>
 8004e7c:	0403      	lsls	r3, r0, #16
 8004e7e:	2010      	movs	r0, #16
 8004e80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004e84:	bf04      	itt	eq
 8004e86:	021b      	lsleq	r3, r3, #8
 8004e88:	3008      	addeq	r0, #8
 8004e8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004e8e:	bf04      	itt	eq
 8004e90:	011b      	lsleq	r3, r3, #4
 8004e92:	3004      	addeq	r0, #4
 8004e94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004e98:	bf04      	itt	eq
 8004e9a:	009b      	lsleq	r3, r3, #2
 8004e9c:	3002      	addeq	r0, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db05      	blt.n	8004eae <__hi0bits+0x3a>
 8004ea2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004ea6:	f100 0001 	add.w	r0, r0, #1
 8004eaa:	bf08      	it	eq
 8004eac:	2020      	moveq	r0, #32
 8004eae:	4770      	bx	lr
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7e5      	b.n	8004e80 <__hi0bits+0xc>

08004eb4 <__lo0bits>:
 8004eb4:	6803      	ldr	r3, [r0, #0]
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f013 0007 	ands.w	r0, r3, #7
 8004ebc:	d00b      	beq.n	8004ed6 <__lo0bits+0x22>
 8004ebe:	07d9      	lsls	r1, r3, #31
 8004ec0:	d421      	bmi.n	8004f06 <__lo0bits+0x52>
 8004ec2:	0798      	lsls	r0, r3, #30
 8004ec4:	bf49      	itett	mi
 8004ec6:	085b      	lsrmi	r3, r3, #1
 8004ec8:	089b      	lsrpl	r3, r3, #2
 8004eca:	2001      	movmi	r0, #1
 8004ecc:	6013      	strmi	r3, [r2, #0]
 8004ece:	bf5c      	itt	pl
 8004ed0:	2002      	movpl	r0, #2
 8004ed2:	6013      	strpl	r3, [r2, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	b299      	uxth	r1, r3
 8004ed8:	b909      	cbnz	r1, 8004ede <__lo0bits+0x2a>
 8004eda:	2010      	movs	r0, #16
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	b2d9      	uxtb	r1, r3
 8004ee0:	b909      	cbnz	r1, 8004ee6 <__lo0bits+0x32>
 8004ee2:	3008      	adds	r0, #8
 8004ee4:	0a1b      	lsrs	r3, r3, #8
 8004ee6:	0719      	lsls	r1, r3, #28
 8004ee8:	bf04      	itt	eq
 8004eea:	091b      	lsreq	r3, r3, #4
 8004eec:	3004      	addeq	r0, #4
 8004eee:	0799      	lsls	r1, r3, #30
 8004ef0:	bf04      	itt	eq
 8004ef2:	089b      	lsreq	r3, r3, #2
 8004ef4:	3002      	addeq	r0, #2
 8004ef6:	07d9      	lsls	r1, r3, #31
 8004ef8:	d403      	bmi.n	8004f02 <__lo0bits+0x4e>
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	f100 0001 	add.w	r0, r0, #1
 8004f00:	d003      	beq.n	8004f0a <__lo0bits+0x56>
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4770      	bx	lr
 8004f06:	2000      	movs	r0, #0
 8004f08:	4770      	bx	lr
 8004f0a:	2020      	movs	r0, #32
 8004f0c:	4770      	bx	lr
	...

08004f10 <__i2b>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	460c      	mov	r4, r1
 8004f14:	2101      	movs	r1, #1
 8004f16:	f7ff ff05 	bl	8004d24 <_Balloc>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	b928      	cbnz	r0, 8004f2a <__i2b+0x1a>
 8004f1e:	f240 1145 	movw	r1, #325	; 0x145
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <__i2b+0x24>)
 8004f24:	4804      	ldr	r0, [pc, #16]	; (8004f38 <__i2b+0x28>)
 8004f26:	f000 fb1d 	bl	8005564 <__assert_func>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	6144      	str	r4, [r0, #20]
 8004f2e:	6103      	str	r3, [r0, #16]
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	bf00      	nop
 8004f34:	080074d8 	.word	0x080074d8
 8004f38:	080074e9 	.word	0x080074e9

08004f3c <__multiply>:
 8004f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f40:	4691      	mov	r9, r2
 8004f42:	690a      	ldr	r2, [r1, #16]
 8004f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f48:	460c      	mov	r4, r1
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	bfbe      	ittt	lt
 8004f4e:	460b      	movlt	r3, r1
 8004f50:	464c      	movlt	r4, r9
 8004f52:	4699      	movlt	r9, r3
 8004f54:	6927      	ldr	r7, [r4, #16]
 8004f56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	6861      	ldr	r1, [r4, #4]
 8004f5e:	eb07 060a 	add.w	r6, r7, sl
 8004f62:	42b3      	cmp	r3, r6
 8004f64:	b085      	sub	sp, #20
 8004f66:	bfb8      	it	lt
 8004f68:	3101      	addlt	r1, #1
 8004f6a:	f7ff fedb 	bl	8004d24 <_Balloc>
 8004f6e:	b930      	cbnz	r0, 8004f7e <__multiply+0x42>
 8004f70:	4602      	mov	r2, r0
 8004f72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004f76:	4b43      	ldr	r3, [pc, #268]	; (8005084 <__multiply+0x148>)
 8004f78:	4843      	ldr	r0, [pc, #268]	; (8005088 <__multiply+0x14c>)
 8004f7a:	f000 faf3 	bl	8005564 <__assert_func>
 8004f7e:	f100 0514 	add.w	r5, r0, #20
 8004f82:	462b      	mov	r3, r5
 8004f84:	2200      	movs	r2, #0
 8004f86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f8a:	4543      	cmp	r3, r8
 8004f8c:	d321      	bcc.n	8004fd2 <__multiply+0x96>
 8004f8e:	f104 0314 	add.w	r3, r4, #20
 8004f92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004f96:	f109 0314 	add.w	r3, r9, #20
 8004f9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004f9e:	9202      	str	r2, [sp, #8]
 8004fa0:	1b3a      	subs	r2, r7, r4
 8004fa2:	3a15      	subs	r2, #21
 8004fa4:	f022 0203 	bic.w	r2, r2, #3
 8004fa8:	3204      	adds	r2, #4
 8004faa:	f104 0115 	add.w	r1, r4, #21
 8004fae:	428f      	cmp	r7, r1
 8004fb0:	bf38      	it	cc
 8004fb2:	2204      	movcc	r2, #4
 8004fb4:	9201      	str	r2, [sp, #4]
 8004fb6:	9a02      	ldr	r2, [sp, #8]
 8004fb8:	9303      	str	r3, [sp, #12]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d80c      	bhi.n	8004fd8 <__multiply+0x9c>
 8004fbe:	2e00      	cmp	r6, #0
 8004fc0:	dd03      	ble.n	8004fca <__multiply+0x8e>
 8004fc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d05a      	beq.n	8005080 <__multiply+0x144>
 8004fca:	6106      	str	r6, [r0, #16]
 8004fcc:	b005      	add	sp, #20
 8004fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd2:	f843 2b04 	str.w	r2, [r3], #4
 8004fd6:	e7d8      	b.n	8004f8a <__multiply+0x4e>
 8004fd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8004fdc:	f1ba 0f00 	cmp.w	sl, #0
 8004fe0:	d023      	beq.n	800502a <__multiply+0xee>
 8004fe2:	46a9      	mov	r9, r5
 8004fe4:	f04f 0c00 	mov.w	ip, #0
 8004fe8:	f104 0e14 	add.w	lr, r4, #20
 8004fec:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004ff0:	f8d9 1000 	ldr.w	r1, [r9]
 8004ff4:	fa1f fb82 	uxth.w	fp, r2
 8004ff8:	b289      	uxth	r1, r1
 8004ffa:	fb0a 110b 	mla	r1, sl, fp, r1
 8004ffe:	4461      	add	r1, ip
 8005000:	f8d9 c000 	ldr.w	ip, [r9]
 8005004:	0c12      	lsrs	r2, r2, #16
 8005006:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800500a:	fb0a c202 	mla	r2, sl, r2, ip
 800500e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005012:	b289      	uxth	r1, r1
 8005014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005018:	4577      	cmp	r7, lr
 800501a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800501e:	f849 1b04 	str.w	r1, [r9], #4
 8005022:	d8e3      	bhi.n	8004fec <__multiply+0xb0>
 8005024:	9a01      	ldr	r2, [sp, #4]
 8005026:	f845 c002 	str.w	ip, [r5, r2]
 800502a:	9a03      	ldr	r2, [sp, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005032:	f1b9 0f00 	cmp.w	r9, #0
 8005036:	d021      	beq.n	800507c <__multiply+0x140>
 8005038:	46ae      	mov	lr, r5
 800503a:	f04f 0a00 	mov.w	sl, #0
 800503e:	6829      	ldr	r1, [r5, #0]
 8005040:	f104 0c14 	add.w	ip, r4, #20
 8005044:	f8bc b000 	ldrh.w	fp, [ip]
 8005048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800504c:	b289      	uxth	r1, r1
 800504e:	fb09 220b 	mla	r2, r9, fp, r2
 8005052:	4452      	add	r2, sl
 8005054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005058:	f84e 1b04 	str.w	r1, [lr], #4
 800505c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005064:	f8be 1000 	ldrh.w	r1, [lr]
 8005068:	4567      	cmp	r7, ip
 800506a:	fb09 110a 	mla	r1, r9, sl, r1
 800506e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005072:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005076:	d8e5      	bhi.n	8005044 <__multiply+0x108>
 8005078:	9a01      	ldr	r2, [sp, #4]
 800507a:	50a9      	str	r1, [r5, r2]
 800507c:	3504      	adds	r5, #4
 800507e:	e79a      	b.n	8004fb6 <__multiply+0x7a>
 8005080:	3e01      	subs	r6, #1
 8005082:	e79c      	b.n	8004fbe <__multiply+0x82>
 8005084:	080074d8 	.word	0x080074d8
 8005088:	080074e9 	.word	0x080074e9

0800508c <__pow5mult>:
 800508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005090:	4615      	mov	r5, r2
 8005092:	f012 0203 	ands.w	r2, r2, #3
 8005096:	4606      	mov	r6, r0
 8005098:	460f      	mov	r7, r1
 800509a:	d007      	beq.n	80050ac <__pow5mult+0x20>
 800509c:	4c25      	ldr	r4, [pc, #148]	; (8005134 <__pow5mult+0xa8>)
 800509e:	3a01      	subs	r2, #1
 80050a0:	2300      	movs	r3, #0
 80050a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050a6:	f7ff fe9f 	bl	8004de8 <__multadd>
 80050aa:	4607      	mov	r7, r0
 80050ac:	10ad      	asrs	r5, r5, #2
 80050ae:	d03d      	beq.n	800512c <__pow5mult+0xa0>
 80050b0:	69f4      	ldr	r4, [r6, #28]
 80050b2:	b97c      	cbnz	r4, 80050d4 <__pow5mult+0x48>
 80050b4:	2010      	movs	r0, #16
 80050b6:	f7ff fcd7 	bl	8004a68 <malloc>
 80050ba:	4602      	mov	r2, r0
 80050bc:	61f0      	str	r0, [r6, #28]
 80050be:	b928      	cbnz	r0, 80050cc <__pow5mult+0x40>
 80050c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <__pow5mult+0xac>)
 80050c6:	481d      	ldr	r0, [pc, #116]	; (800513c <__pow5mult+0xb0>)
 80050c8:	f000 fa4c 	bl	8005564 <__assert_func>
 80050cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050d0:	6004      	str	r4, [r0, #0]
 80050d2:	60c4      	str	r4, [r0, #12]
 80050d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80050d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050dc:	b94c      	cbnz	r4, 80050f2 <__pow5mult+0x66>
 80050de:	f240 2171 	movw	r1, #625	; 0x271
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7ff ff14 	bl	8004f10 <__i2b>
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80050f0:	6003      	str	r3, [r0, #0]
 80050f2:	f04f 0900 	mov.w	r9, #0
 80050f6:	07eb      	lsls	r3, r5, #31
 80050f8:	d50a      	bpl.n	8005110 <__pow5mult+0x84>
 80050fa:	4639      	mov	r1, r7
 80050fc:	4622      	mov	r2, r4
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ff1c 	bl	8004f3c <__multiply>
 8005104:	4680      	mov	r8, r0
 8005106:	4639      	mov	r1, r7
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff fe4b 	bl	8004da4 <_Bfree>
 800510e:	4647      	mov	r7, r8
 8005110:	106d      	asrs	r5, r5, #1
 8005112:	d00b      	beq.n	800512c <__pow5mult+0xa0>
 8005114:	6820      	ldr	r0, [r4, #0]
 8005116:	b938      	cbnz	r0, 8005128 <__pow5mult+0x9c>
 8005118:	4622      	mov	r2, r4
 800511a:	4621      	mov	r1, r4
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff ff0d 	bl	8004f3c <__multiply>
 8005122:	6020      	str	r0, [r4, #0]
 8005124:	f8c0 9000 	str.w	r9, [r0]
 8005128:	4604      	mov	r4, r0
 800512a:	e7e4      	b.n	80050f6 <__pow5mult+0x6a>
 800512c:	4638      	mov	r0, r7
 800512e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005132:	bf00      	nop
 8005134:	08007638 	.word	0x08007638
 8005138:	08007469 	.word	0x08007469
 800513c:	080074e9 	.word	0x080074e9

08005140 <__lshift>:
 8005140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005144:	460c      	mov	r4, r1
 8005146:	4607      	mov	r7, r0
 8005148:	4691      	mov	r9, r2
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	6849      	ldr	r1, [r1, #4]
 800514e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005158:	f108 0601 	add.w	r6, r8, #1
 800515c:	42b3      	cmp	r3, r6
 800515e:	db0b      	blt.n	8005178 <__lshift+0x38>
 8005160:	4638      	mov	r0, r7
 8005162:	f7ff fddf 	bl	8004d24 <_Balloc>
 8005166:	4605      	mov	r5, r0
 8005168:	b948      	cbnz	r0, 800517e <__lshift+0x3e>
 800516a:	4602      	mov	r2, r0
 800516c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <__lshift+0xd0>)
 8005172:	4828      	ldr	r0, [pc, #160]	; (8005214 <__lshift+0xd4>)
 8005174:	f000 f9f6 	bl	8005564 <__assert_func>
 8005178:	3101      	adds	r1, #1
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	e7ee      	b.n	800515c <__lshift+0x1c>
 800517e:	2300      	movs	r3, #0
 8005180:	f100 0114 	add.w	r1, r0, #20
 8005184:	f100 0210 	add.w	r2, r0, #16
 8005188:	4618      	mov	r0, r3
 800518a:	4553      	cmp	r3, sl
 800518c:	db33      	blt.n	80051f6 <__lshift+0xb6>
 800518e:	6920      	ldr	r0, [r4, #16]
 8005190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005194:	f104 0314 	add.w	r3, r4, #20
 8005198:	f019 091f 	ands.w	r9, r9, #31
 800519c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051a4:	d02b      	beq.n	80051fe <__lshift+0xbe>
 80051a6:	468a      	mov	sl, r1
 80051a8:	2200      	movs	r2, #0
 80051aa:	f1c9 0e20 	rsb	lr, r9, #32
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	fa00 f009 	lsl.w	r0, r0, r9
 80051b4:	4310      	orrs	r0, r2
 80051b6:	f84a 0b04 	str.w	r0, [sl], #4
 80051ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80051be:	459c      	cmp	ip, r3
 80051c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80051c4:	d8f3      	bhi.n	80051ae <__lshift+0x6e>
 80051c6:	ebac 0304 	sub.w	r3, ip, r4
 80051ca:	3b15      	subs	r3, #21
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	3304      	adds	r3, #4
 80051d2:	f104 0015 	add.w	r0, r4, #21
 80051d6:	4584      	cmp	ip, r0
 80051d8:	bf38      	it	cc
 80051da:	2304      	movcc	r3, #4
 80051dc:	50ca      	str	r2, [r1, r3]
 80051de:	b10a      	cbz	r2, 80051e4 <__lshift+0xa4>
 80051e0:	f108 0602 	add.w	r6, r8, #2
 80051e4:	3e01      	subs	r6, #1
 80051e6:	4638      	mov	r0, r7
 80051e8:	4621      	mov	r1, r4
 80051ea:	612e      	str	r6, [r5, #16]
 80051ec:	f7ff fdda 	bl	8004da4 <_Bfree>
 80051f0:	4628      	mov	r0, r5
 80051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80051fa:	3301      	adds	r3, #1
 80051fc:	e7c5      	b.n	800518a <__lshift+0x4a>
 80051fe:	3904      	subs	r1, #4
 8005200:	f853 2b04 	ldr.w	r2, [r3], #4
 8005204:	459c      	cmp	ip, r3
 8005206:	f841 2f04 	str.w	r2, [r1, #4]!
 800520a:	d8f9      	bhi.n	8005200 <__lshift+0xc0>
 800520c:	e7ea      	b.n	80051e4 <__lshift+0xa4>
 800520e:	bf00      	nop
 8005210:	080074d8 	.word	0x080074d8
 8005214:	080074e9 	.word	0x080074e9

08005218 <__mcmp>:
 8005218:	4603      	mov	r3, r0
 800521a:	690a      	ldr	r2, [r1, #16]
 800521c:	6900      	ldr	r0, [r0, #16]
 800521e:	b530      	push	{r4, r5, lr}
 8005220:	1a80      	subs	r0, r0, r2
 8005222:	d10d      	bne.n	8005240 <__mcmp+0x28>
 8005224:	3314      	adds	r3, #20
 8005226:	3114      	adds	r1, #20
 8005228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800522c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005238:	4295      	cmp	r5, r2
 800523a:	d002      	beq.n	8005242 <__mcmp+0x2a>
 800523c:	d304      	bcc.n	8005248 <__mcmp+0x30>
 800523e:	2001      	movs	r0, #1
 8005240:	bd30      	pop	{r4, r5, pc}
 8005242:	42a3      	cmp	r3, r4
 8005244:	d3f4      	bcc.n	8005230 <__mcmp+0x18>
 8005246:	e7fb      	b.n	8005240 <__mcmp+0x28>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800524c:	e7f8      	b.n	8005240 <__mcmp+0x28>
	...

08005250 <__mdiff>:
 8005250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	460d      	mov	r5, r1
 8005256:	4607      	mov	r7, r0
 8005258:	4611      	mov	r1, r2
 800525a:	4628      	mov	r0, r5
 800525c:	4614      	mov	r4, r2
 800525e:	f7ff ffdb 	bl	8005218 <__mcmp>
 8005262:	1e06      	subs	r6, r0, #0
 8005264:	d111      	bne.n	800528a <__mdiff+0x3a>
 8005266:	4631      	mov	r1, r6
 8005268:	4638      	mov	r0, r7
 800526a:	f7ff fd5b 	bl	8004d24 <_Balloc>
 800526e:	4602      	mov	r2, r0
 8005270:	b928      	cbnz	r0, 800527e <__mdiff+0x2e>
 8005272:	f240 2137 	movw	r1, #567	; 0x237
 8005276:	4b3a      	ldr	r3, [pc, #232]	; (8005360 <__mdiff+0x110>)
 8005278:	483a      	ldr	r0, [pc, #232]	; (8005364 <__mdiff+0x114>)
 800527a:	f000 f973 	bl	8005564 <__assert_func>
 800527e:	2301      	movs	r3, #1
 8005280:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005284:	4610      	mov	r0, r2
 8005286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528a:	bfa4      	itt	ge
 800528c:	4623      	movge	r3, r4
 800528e:	462c      	movge	r4, r5
 8005290:	4638      	mov	r0, r7
 8005292:	6861      	ldr	r1, [r4, #4]
 8005294:	bfa6      	itte	ge
 8005296:	461d      	movge	r5, r3
 8005298:	2600      	movge	r6, #0
 800529a:	2601      	movlt	r6, #1
 800529c:	f7ff fd42 	bl	8004d24 <_Balloc>
 80052a0:	4602      	mov	r2, r0
 80052a2:	b918      	cbnz	r0, 80052ac <__mdiff+0x5c>
 80052a4:	f240 2145 	movw	r1, #581	; 0x245
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <__mdiff+0x110>)
 80052aa:	e7e5      	b.n	8005278 <__mdiff+0x28>
 80052ac:	f102 0814 	add.w	r8, r2, #20
 80052b0:	46c2      	mov	sl, r8
 80052b2:	f04f 0c00 	mov.w	ip, #0
 80052b6:	6927      	ldr	r7, [r4, #16]
 80052b8:	60c6      	str	r6, [r0, #12]
 80052ba:	692e      	ldr	r6, [r5, #16]
 80052bc:	f104 0014 	add.w	r0, r4, #20
 80052c0:	f105 0914 	add.w	r9, r5, #20
 80052c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80052c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80052cc:	3410      	adds	r4, #16
 80052ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80052d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80052d6:	fa1f f18b 	uxth.w	r1, fp
 80052da:	4461      	add	r1, ip
 80052dc:	fa1f fc83 	uxth.w	ip, r3
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	eba1 010c 	sub.w	r1, r1, ip
 80052e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80052ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80052ee:	b289      	uxth	r1, r1
 80052f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80052f4:	454e      	cmp	r6, r9
 80052f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80052fa:	f84a 1b04 	str.w	r1, [sl], #4
 80052fe:	d8e6      	bhi.n	80052ce <__mdiff+0x7e>
 8005300:	1b73      	subs	r3, r6, r5
 8005302:	3b15      	subs	r3, #21
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	3515      	adds	r5, #21
 800530a:	3304      	adds	r3, #4
 800530c:	42ae      	cmp	r6, r5
 800530e:	bf38      	it	cc
 8005310:	2304      	movcc	r3, #4
 8005312:	4418      	add	r0, r3
 8005314:	4443      	add	r3, r8
 8005316:	461e      	mov	r6, r3
 8005318:	4605      	mov	r5, r0
 800531a:	4575      	cmp	r5, lr
 800531c:	d30e      	bcc.n	800533c <__mdiff+0xec>
 800531e:	f10e 0103 	add.w	r1, lr, #3
 8005322:	1a09      	subs	r1, r1, r0
 8005324:	f021 0103 	bic.w	r1, r1, #3
 8005328:	3803      	subs	r0, #3
 800532a:	4586      	cmp	lr, r0
 800532c:	bf38      	it	cc
 800532e:	2100      	movcc	r1, #0
 8005330:	440b      	add	r3, r1
 8005332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005336:	b189      	cbz	r1, 800535c <__mdiff+0x10c>
 8005338:	6117      	str	r7, [r2, #16]
 800533a:	e7a3      	b.n	8005284 <__mdiff+0x34>
 800533c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005340:	fa1f f188 	uxth.w	r1, r8
 8005344:	4461      	add	r1, ip
 8005346:	140c      	asrs	r4, r1, #16
 8005348:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800534c:	b289      	uxth	r1, r1
 800534e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005352:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005356:	f846 1b04 	str.w	r1, [r6], #4
 800535a:	e7de      	b.n	800531a <__mdiff+0xca>
 800535c:	3f01      	subs	r7, #1
 800535e:	e7e8      	b.n	8005332 <__mdiff+0xe2>
 8005360:	080074d8 	.word	0x080074d8
 8005364:	080074e9 	.word	0x080074e9

08005368 <__d2b>:
 8005368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536a:	2101      	movs	r1, #1
 800536c:	4617      	mov	r7, r2
 800536e:	461c      	mov	r4, r3
 8005370:	9e08      	ldr	r6, [sp, #32]
 8005372:	f7ff fcd7 	bl	8004d24 <_Balloc>
 8005376:	4605      	mov	r5, r0
 8005378:	b930      	cbnz	r0, 8005388 <__d2b+0x20>
 800537a:	4602      	mov	r2, r0
 800537c:	f240 310f 	movw	r1, #783	; 0x30f
 8005380:	4b22      	ldr	r3, [pc, #136]	; (800540c <__d2b+0xa4>)
 8005382:	4823      	ldr	r0, [pc, #140]	; (8005410 <__d2b+0xa8>)
 8005384:	f000 f8ee 	bl	8005564 <__assert_func>
 8005388:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800538c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005390:	bb24      	cbnz	r4, 80053dc <__d2b+0x74>
 8005392:	2f00      	cmp	r7, #0
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	d026      	beq.n	80053e6 <__d2b+0x7e>
 8005398:	4668      	mov	r0, sp
 800539a:	9700      	str	r7, [sp, #0]
 800539c:	f7ff fd8a 	bl	8004eb4 <__lo0bits>
 80053a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80053a4:	b1e8      	cbz	r0, 80053e2 <__d2b+0x7a>
 80053a6:	f1c0 0320 	rsb	r3, r0, #32
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	430b      	orrs	r3, r1
 80053b0:	40c2      	lsrs	r2, r0
 80053b2:	616b      	str	r3, [r5, #20]
 80053b4:	9201      	str	r2, [sp, #4]
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf14      	ite	ne
 80053bc:	2102      	movne	r1, #2
 80053be:	2101      	moveq	r1, #1
 80053c0:	61ab      	str	r3, [r5, #24]
 80053c2:	6129      	str	r1, [r5, #16]
 80053c4:	b1bc      	cbz	r4, 80053f6 <__d2b+0x8e>
 80053c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80053ca:	4404      	add	r4, r0
 80053cc:	6034      	str	r4, [r6, #0]
 80053ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d4:	6018      	str	r0, [r3, #0]
 80053d6:	4628      	mov	r0, r5
 80053d8:	b003      	add	sp, #12
 80053da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e0:	e7d7      	b.n	8005392 <__d2b+0x2a>
 80053e2:	6169      	str	r1, [r5, #20]
 80053e4:	e7e7      	b.n	80053b6 <__d2b+0x4e>
 80053e6:	a801      	add	r0, sp, #4
 80053e8:	f7ff fd64 	bl	8004eb4 <__lo0bits>
 80053ec:	9b01      	ldr	r3, [sp, #4]
 80053ee:	2101      	movs	r1, #1
 80053f0:	616b      	str	r3, [r5, #20]
 80053f2:	3020      	adds	r0, #32
 80053f4:	e7e5      	b.n	80053c2 <__d2b+0x5a>
 80053f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053fa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80053fe:	6030      	str	r0, [r6, #0]
 8005400:	6918      	ldr	r0, [r3, #16]
 8005402:	f7ff fd37 	bl	8004e74 <__hi0bits>
 8005406:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800540a:	e7e2      	b.n	80053d2 <__d2b+0x6a>
 800540c:	080074d8 	.word	0x080074d8
 8005410:	080074e9 	.word	0x080074e9

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f860 	bl	80054e0 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	4605      	mov	r5, r0
 8005440:	05db      	lsls	r3, r3, #23
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f834 	bl	80054bc <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	4632      	mov	r2, r6
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	4628      	mov	r0, r5
 8005460:	463b      	mov	r3, r7
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b85b 	b.w	8005524 <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f821 	bl	80054bc <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b801 	b.w	800549c <_close_r>
	...

0800549c <_close_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	2300      	movs	r3, #0
 80054a0:	4d05      	ldr	r5, [pc, #20]	; (80054b8 <_close_r+0x1c>)
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fd fcf6 	bl	8002e98 <_close>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_close_r+0x1a>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_close_r+0x1a>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	200003f8 	.word	0x200003f8

080054bc <_lseek_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	2200      	movs	r2, #0
 80054c6:	4d05      	ldr	r5, [pc, #20]	; (80054dc <_lseek_r+0x20>)
 80054c8:	602a      	str	r2, [r5, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fd fd08 	bl	8002ee0 <_lseek>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_lseek_r+0x1e>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_lseek_r+0x1e>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	200003f8 	.word	0x200003f8

080054e0 <_read_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	2200      	movs	r2, #0
 80054ea:	4d05      	ldr	r5, [pc, #20]	; (8005500 <_read_r+0x20>)
 80054ec:	602a      	str	r2, [r5, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f7fd fcb5 	bl	8002e5e <_read>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_read_r+0x1e>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_read_r+0x1e>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	200003f8 	.word	0x200003f8

08005504 <_sbrk_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	2300      	movs	r3, #0
 8005508:	4d05      	ldr	r5, [pc, #20]	; (8005520 <_sbrk_r+0x1c>)
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fd fcf2 	bl	8002ef8 <_sbrk>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_sbrk_r+0x1a>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_sbrk_r+0x1a>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200003f8 	.word	0x200003f8

08005524 <_write_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	2200      	movs	r2, #0
 800552e:	4d05      	ldr	r5, [pc, #20]	; (8005544 <_write_r+0x20>)
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fd fe68 	bl	8003208 <_write>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_write_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_write_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	200003f8 	.word	0x200003f8

08005548 <memcpy>:
 8005548:	440a      	add	r2, r1
 800554a:	4291      	cmp	r1, r2
 800554c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005550:	d100      	bne.n	8005554 <memcpy+0xc>
 8005552:	4770      	bx	lr
 8005554:	b510      	push	{r4, lr}
 8005556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555a:	4291      	cmp	r1, r2
 800555c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005560:	d1f9      	bne.n	8005556 <memcpy+0xe>
 8005562:	bd10      	pop	{r4, pc}

08005564 <__assert_func>:
 8005564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005566:	4614      	mov	r4, r2
 8005568:	461a      	mov	r2, r3
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <__assert_func+0x2c>)
 800556c:	4605      	mov	r5, r0
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68d8      	ldr	r0, [r3, #12]
 8005572:	b14c      	cbz	r4, 8005588 <__assert_func+0x24>
 8005574:	4b07      	ldr	r3, [pc, #28]	; (8005594 <__assert_func+0x30>)
 8005576:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800557a:	9100      	str	r1, [sp, #0]
 800557c:	462b      	mov	r3, r5
 800557e:	4906      	ldr	r1, [pc, #24]	; (8005598 <__assert_func+0x34>)
 8005580:	f000 f87c 	bl	800567c <fiprintf>
 8005584:	f000 f899 	bl	80056ba <abort>
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <__assert_func+0x38>)
 800558a:	461c      	mov	r4, r3
 800558c:	e7f3      	b.n	8005576 <__assert_func+0x12>
 800558e:	bf00      	nop
 8005590:	20000064 	.word	0x20000064
 8005594:	0800774f 	.word	0x0800774f
 8005598:	0800775c 	.word	0x0800775c
 800559c:	0800778a 	.word	0x0800778a

080055a0 <_calloc_r>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	fba1 5402 	umull	r5, r4, r1, r2
 80055a6:	b934      	cbnz	r4, 80055b6 <_calloc_r+0x16>
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7ff fa85 	bl	8004ab8 <_malloc_r>
 80055ae:	4606      	mov	r6, r0
 80055b0:	b928      	cbnz	r0, 80055be <_calloc_r+0x1e>
 80055b2:	4630      	mov	r0, r6
 80055b4:	bd70      	pop	{r4, r5, r6, pc}
 80055b6:	220c      	movs	r2, #12
 80055b8:	2600      	movs	r6, #0
 80055ba:	6002      	str	r2, [r0, #0]
 80055bc:	e7f9      	b.n	80055b2 <_calloc_r+0x12>
 80055be:	462a      	mov	r2, r5
 80055c0:	4621      	mov	r1, r4
 80055c2:	f7fe fb9b 	bl	8003cfc <memset>
 80055c6:	e7f4      	b.n	80055b2 <_calloc_r+0x12>

080055c8 <_free_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4605      	mov	r5, r0
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d040      	beq.n	8005652 <_free_r+0x8a>
 80055d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d4:	1f0c      	subs	r4, r1, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfb8      	it	lt
 80055da:	18e4      	addlt	r4, r4, r3
 80055dc:	f7ff fb96 	bl	8004d0c <__malloc_lock>
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <_free_r+0x8c>)
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	b933      	cbnz	r3, 80055f4 <_free_r+0x2c>
 80055e6:	6063      	str	r3, [r4, #4]
 80055e8:	6014      	str	r4, [r2, #0]
 80055ea:	4628      	mov	r0, r5
 80055ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f0:	f7ff bb92 	b.w	8004d18 <__malloc_unlock>
 80055f4:	42a3      	cmp	r3, r4
 80055f6:	d908      	bls.n	800560a <_free_r+0x42>
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	1821      	adds	r1, r4, r0
 80055fc:	428b      	cmp	r3, r1
 80055fe:	bf01      	itttt	eq
 8005600:	6819      	ldreq	r1, [r3, #0]
 8005602:	685b      	ldreq	r3, [r3, #4]
 8005604:	1809      	addeq	r1, r1, r0
 8005606:	6021      	streq	r1, [r4, #0]
 8005608:	e7ed      	b.n	80055e6 <_free_r+0x1e>
 800560a:	461a      	mov	r2, r3
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b10b      	cbz	r3, 8005614 <_free_r+0x4c>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d9fa      	bls.n	800560a <_free_r+0x42>
 8005614:	6811      	ldr	r1, [r2, #0]
 8005616:	1850      	adds	r0, r2, r1
 8005618:	42a0      	cmp	r0, r4
 800561a:	d10b      	bne.n	8005634 <_free_r+0x6c>
 800561c:	6820      	ldr	r0, [r4, #0]
 800561e:	4401      	add	r1, r0
 8005620:	1850      	adds	r0, r2, r1
 8005622:	4283      	cmp	r3, r0
 8005624:	6011      	str	r1, [r2, #0]
 8005626:	d1e0      	bne.n	80055ea <_free_r+0x22>
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	4408      	add	r0, r1
 800562e:	6010      	str	r0, [r2, #0]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	e7da      	b.n	80055ea <_free_r+0x22>
 8005634:	d902      	bls.n	800563c <_free_r+0x74>
 8005636:	230c      	movs	r3, #12
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	e7d6      	b.n	80055ea <_free_r+0x22>
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	1821      	adds	r1, r4, r0
 8005640:	428b      	cmp	r3, r1
 8005642:	bf01      	itttt	eq
 8005644:	6819      	ldreq	r1, [r3, #0]
 8005646:	685b      	ldreq	r3, [r3, #4]
 8005648:	1809      	addeq	r1, r1, r0
 800564a:	6021      	streq	r1, [r4, #0]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	6054      	str	r4, [r2, #4]
 8005650:	e7cb      	b.n	80055ea <_free_r+0x22>
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	200003f0 	.word	0x200003f0

08005658 <__ascii_mbtowc>:
 8005658:	b082      	sub	sp, #8
 800565a:	b901      	cbnz	r1, 800565e <__ascii_mbtowc+0x6>
 800565c:	a901      	add	r1, sp, #4
 800565e:	b142      	cbz	r2, 8005672 <__ascii_mbtowc+0x1a>
 8005660:	b14b      	cbz	r3, 8005676 <__ascii_mbtowc+0x1e>
 8005662:	7813      	ldrb	r3, [r2, #0]
 8005664:	600b      	str	r3, [r1, #0]
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	1e10      	subs	r0, r2, #0
 800566a:	bf18      	it	ne
 800566c:	2001      	movne	r0, #1
 800566e:	b002      	add	sp, #8
 8005670:	4770      	bx	lr
 8005672:	4610      	mov	r0, r2
 8005674:	e7fb      	b.n	800566e <__ascii_mbtowc+0x16>
 8005676:	f06f 0001 	mvn.w	r0, #1
 800567a:	e7f8      	b.n	800566e <__ascii_mbtowc+0x16>

0800567c <fiprintf>:
 800567c:	b40e      	push	{r1, r2, r3}
 800567e:	b503      	push	{r0, r1, lr}
 8005680:	4601      	mov	r1, r0
 8005682:	ab03      	add	r3, sp, #12
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <fiprintf+0x20>)
 8005686:	f853 2b04 	ldr.w	r2, [r3], #4
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	f000 f843 	bl	8005718 <_vfiprintf_r>
 8005692:	b002      	add	sp, #8
 8005694:	f85d eb04 	ldr.w	lr, [sp], #4
 8005698:	b003      	add	sp, #12
 800569a:	4770      	bx	lr
 800569c:	20000064 	.word	0x20000064

080056a0 <__ascii_wctomb>:
 80056a0:	4603      	mov	r3, r0
 80056a2:	4608      	mov	r0, r1
 80056a4:	b141      	cbz	r1, 80056b8 <__ascii_wctomb+0x18>
 80056a6:	2aff      	cmp	r2, #255	; 0xff
 80056a8:	d904      	bls.n	80056b4 <__ascii_wctomb+0x14>
 80056aa:	228a      	movs	r2, #138	; 0x8a
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	4770      	bx	lr
 80056b4:	2001      	movs	r0, #1
 80056b6:	700a      	strb	r2, [r1, #0]
 80056b8:	4770      	bx	lr

080056ba <abort>:
 80056ba:	2006      	movs	r0, #6
 80056bc:	b508      	push	{r3, lr}
 80056be:	f000 fa87 	bl	8005bd0 <raise>
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fd fbc1 	bl	8002e4a <_exit>

080056c8 <__sfputc_r>:
 80056c8:	6893      	ldr	r3, [r2, #8]
 80056ca:	b410      	push	{r4}
 80056cc:	3b01      	subs	r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	6093      	str	r3, [r2, #8]
 80056d2:	da07      	bge.n	80056e4 <__sfputc_r+0x1c>
 80056d4:	6994      	ldr	r4, [r2, #24]
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	db01      	blt.n	80056de <__sfputc_r+0x16>
 80056da:	290a      	cmp	r1, #10
 80056dc:	d102      	bne.n	80056e4 <__sfputc_r+0x1c>
 80056de:	bc10      	pop	{r4}
 80056e0:	f000 b934 	b.w	800594c <__swbuf_r>
 80056e4:	6813      	ldr	r3, [r2, #0]
 80056e6:	1c58      	adds	r0, r3, #1
 80056e8:	6010      	str	r0, [r2, #0]
 80056ea:	7019      	strb	r1, [r3, #0]
 80056ec:	4608      	mov	r0, r1
 80056ee:	bc10      	pop	{r4}
 80056f0:	4770      	bx	lr

080056f2 <__sfputs_r>:
 80056f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f4:	4606      	mov	r6, r0
 80056f6:	460f      	mov	r7, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	18d5      	adds	r5, r2, r3
 80056fc:	42ac      	cmp	r4, r5
 80056fe:	d101      	bne.n	8005704 <__sfputs_r+0x12>
 8005700:	2000      	movs	r0, #0
 8005702:	e007      	b.n	8005714 <__sfputs_r+0x22>
 8005704:	463a      	mov	r2, r7
 8005706:	4630      	mov	r0, r6
 8005708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570c:	f7ff ffdc 	bl	80056c8 <__sfputc_r>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d1f3      	bne.n	80056fc <__sfputs_r+0xa>
 8005714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005718 <_vfiprintf_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	460d      	mov	r5, r1
 800571e:	4614      	mov	r4, r2
 8005720:	4698      	mov	r8, r3
 8005722:	4606      	mov	r6, r0
 8005724:	b09d      	sub	sp, #116	; 0x74
 8005726:	b118      	cbz	r0, 8005730 <_vfiprintf_r+0x18>
 8005728:	6a03      	ldr	r3, [r0, #32]
 800572a:	b90b      	cbnz	r3, 8005730 <_vfiprintf_r+0x18>
 800572c:	f7fe fab0 	bl	8003c90 <__sinit>
 8005730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005732:	07d9      	lsls	r1, r3, #31
 8005734:	d405      	bmi.n	8005742 <_vfiprintf_r+0x2a>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	059a      	lsls	r2, r3, #22
 800573a:	d402      	bmi.n	8005742 <_vfiprintf_r+0x2a>
 800573c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800573e:	f7fe fb13 	bl	8003d68 <__retarget_lock_acquire_recursive>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	071b      	lsls	r3, r3, #28
 8005746:	d501      	bpl.n	800574c <_vfiprintf_r+0x34>
 8005748:	692b      	ldr	r3, [r5, #16]
 800574a:	b99b      	cbnz	r3, 8005774 <_vfiprintf_r+0x5c>
 800574c:	4629      	mov	r1, r5
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f93a 	bl	80059c8 <__swsetup_r>
 8005754:	b170      	cbz	r0, 8005774 <_vfiprintf_r+0x5c>
 8005756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005758:	07dc      	lsls	r4, r3, #31
 800575a:	d504      	bpl.n	8005766 <_vfiprintf_r+0x4e>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	b01d      	add	sp, #116	; 0x74
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	0598      	lsls	r0, r3, #22
 800576a:	d4f7      	bmi.n	800575c <_vfiprintf_r+0x44>
 800576c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800576e:	f7fe fafc 	bl	8003d6a <__retarget_lock_release_recursive>
 8005772:	e7f3      	b.n	800575c <_vfiprintf_r+0x44>
 8005774:	2300      	movs	r3, #0
 8005776:	9309      	str	r3, [sp, #36]	; 0x24
 8005778:	2320      	movs	r3, #32
 800577a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800577e:	2330      	movs	r3, #48	; 0x30
 8005780:	f04f 0901 	mov.w	r9, #1
 8005784:	f8cd 800c 	str.w	r8, [sp, #12]
 8005788:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005938 <_vfiprintf_r+0x220>
 800578c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005790:	4623      	mov	r3, r4
 8005792:	469a      	mov	sl, r3
 8005794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005798:	b10a      	cbz	r2, 800579e <_vfiprintf_r+0x86>
 800579a:	2a25      	cmp	r2, #37	; 0x25
 800579c:	d1f9      	bne.n	8005792 <_vfiprintf_r+0x7a>
 800579e:	ebba 0b04 	subs.w	fp, sl, r4
 80057a2:	d00b      	beq.n	80057bc <_vfiprintf_r+0xa4>
 80057a4:	465b      	mov	r3, fp
 80057a6:	4622      	mov	r2, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7ff ffa1 	bl	80056f2 <__sfputs_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	f000 80a9 	beq.w	8005908 <_vfiprintf_r+0x1f0>
 80057b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b8:	445a      	add	r2, fp
 80057ba:	9209      	str	r2, [sp, #36]	; 0x24
 80057bc:	f89a 3000 	ldrb.w	r3, [sl]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80a1 	beq.w	8005908 <_vfiprintf_r+0x1f0>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d0:	f10a 0a01 	add.w	sl, sl, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057dc:	931a      	str	r3, [sp, #104]	; 0x68
 80057de:	4654      	mov	r4, sl
 80057e0:	2205      	movs	r2, #5
 80057e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e6:	4854      	ldr	r0, [pc, #336]	; (8005938 <_vfiprintf_r+0x220>)
 80057e8:	f7fe fac0 	bl	8003d6c <memchr>
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	b9d8      	cbnz	r0, 8005828 <_vfiprintf_r+0x110>
 80057f0:	06d1      	lsls	r1, r2, #27
 80057f2:	bf44      	itt	mi
 80057f4:	2320      	movmi	r3, #32
 80057f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057fa:	0713      	lsls	r3, r2, #28
 80057fc:	bf44      	itt	mi
 80057fe:	232b      	movmi	r3, #43	; 0x2b
 8005800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005804:	f89a 3000 	ldrb.w	r3, [sl]
 8005808:	2b2a      	cmp	r3, #42	; 0x2a
 800580a:	d015      	beq.n	8005838 <_vfiprintf_r+0x120>
 800580c:	4654      	mov	r4, sl
 800580e:	2000      	movs	r0, #0
 8005810:	f04f 0c0a 	mov.w	ip, #10
 8005814:	9a07      	ldr	r2, [sp, #28]
 8005816:	4621      	mov	r1, r4
 8005818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800581c:	3b30      	subs	r3, #48	; 0x30
 800581e:	2b09      	cmp	r3, #9
 8005820:	d94d      	bls.n	80058be <_vfiprintf_r+0x1a6>
 8005822:	b1b0      	cbz	r0, 8005852 <_vfiprintf_r+0x13a>
 8005824:	9207      	str	r2, [sp, #28]
 8005826:	e014      	b.n	8005852 <_vfiprintf_r+0x13a>
 8005828:	eba0 0308 	sub.w	r3, r0, r8
 800582c:	fa09 f303 	lsl.w	r3, r9, r3
 8005830:	4313      	orrs	r3, r2
 8005832:	46a2      	mov	sl, r4
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	e7d2      	b.n	80057de <_vfiprintf_r+0xc6>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	1d19      	adds	r1, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	9103      	str	r1, [sp, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfbb      	ittet	lt
 8005844:	425b      	neglt	r3, r3
 8005846:	f042 0202 	orrlt.w	r2, r2, #2
 800584a:	9307      	strge	r3, [sp, #28]
 800584c:	9307      	strlt	r3, [sp, #28]
 800584e:	bfb8      	it	lt
 8005850:	9204      	strlt	r2, [sp, #16]
 8005852:	7823      	ldrb	r3, [r4, #0]
 8005854:	2b2e      	cmp	r3, #46	; 0x2e
 8005856:	d10c      	bne.n	8005872 <_vfiprintf_r+0x15a>
 8005858:	7863      	ldrb	r3, [r4, #1]
 800585a:	2b2a      	cmp	r3, #42	; 0x2a
 800585c:	d134      	bne.n	80058c8 <_vfiprintf_r+0x1b0>
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	3402      	adds	r4, #2
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	9203      	str	r2, [sp, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	bfb8      	it	lt
 800586c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005870:	9305      	str	r3, [sp, #20]
 8005872:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800593c <_vfiprintf_r+0x224>
 8005876:	2203      	movs	r2, #3
 8005878:	4650      	mov	r0, sl
 800587a:	7821      	ldrb	r1, [r4, #0]
 800587c:	f7fe fa76 	bl	8003d6c <memchr>
 8005880:	b138      	cbz	r0, 8005892 <_vfiprintf_r+0x17a>
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	eba0 000a 	sub.w	r0, r0, sl
 800588a:	4082      	lsls	r2, r0
 800588c:	4313      	orrs	r3, r2
 800588e:	3401      	adds	r4, #1
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005896:	2206      	movs	r2, #6
 8005898:	4829      	ldr	r0, [pc, #164]	; (8005940 <_vfiprintf_r+0x228>)
 800589a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800589e:	f7fe fa65 	bl	8003d6c <memchr>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d03f      	beq.n	8005926 <_vfiprintf_r+0x20e>
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <_vfiprintf_r+0x22c>)
 80058a8:	bb1b      	cbnz	r3, 80058f2 <_vfiprintf_r+0x1da>
 80058aa:	9b03      	ldr	r3, [sp, #12]
 80058ac:	3307      	adds	r3, #7
 80058ae:	f023 0307 	bic.w	r3, r3, #7
 80058b2:	3308      	adds	r3, #8
 80058b4:	9303      	str	r3, [sp, #12]
 80058b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b8:	443b      	add	r3, r7
 80058ba:	9309      	str	r3, [sp, #36]	; 0x24
 80058bc:	e768      	b.n	8005790 <_vfiprintf_r+0x78>
 80058be:	460c      	mov	r4, r1
 80058c0:	2001      	movs	r0, #1
 80058c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80058c6:	e7a6      	b.n	8005816 <_vfiprintf_r+0xfe>
 80058c8:	2300      	movs	r3, #0
 80058ca:	f04f 0c0a 	mov.w	ip, #10
 80058ce:	4619      	mov	r1, r3
 80058d0:	3401      	adds	r4, #1
 80058d2:	9305      	str	r3, [sp, #20]
 80058d4:	4620      	mov	r0, r4
 80058d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058da:	3a30      	subs	r2, #48	; 0x30
 80058dc:	2a09      	cmp	r2, #9
 80058de:	d903      	bls.n	80058e8 <_vfiprintf_r+0x1d0>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0c6      	beq.n	8005872 <_vfiprintf_r+0x15a>
 80058e4:	9105      	str	r1, [sp, #20]
 80058e6:	e7c4      	b.n	8005872 <_vfiprintf_r+0x15a>
 80058e8:	4604      	mov	r4, r0
 80058ea:	2301      	movs	r3, #1
 80058ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f0:	e7f0      	b.n	80058d4 <_vfiprintf_r+0x1bc>
 80058f2:	ab03      	add	r3, sp, #12
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	462a      	mov	r2, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <_vfiprintf_r+0x230>)
 80058fc:	a904      	add	r1, sp, #16
 80058fe:	f7fd fd8b 	bl	8003418 <_printf_float>
 8005902:	4607      	mov	r7, r0
 8005904:	1c78      	adds	r0, r7, #1
 8005906:	d1d6      	bne.n	80058b6 <_vfiprintf_r+0x19e>
 8005908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800590a:	07d9      	lsls	r1, r3, #31
 800590c:	d405      	bmi.n	800591a <_vfiprintf_r+0x202>
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	059a      	lsls	r2, r3, #22
 8005912:	d402      	bmi.n	800591a <_vfiprintf_r+0x202>
 8005914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005916:	f7fe fa28 	bl	8003d6a <__retarget_lock_release_recursive>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	065b      	lsls	r3, r3, #25
 800591e:	f53f af1d 	bmi.w	800575c <_vfiprintf_r+0x44>
 8005922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005924:	e71c      	b.n	8005760 <_vfiprintf_r+0x48>
 8005926:	ab03      	add	r3, sp, #12
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	462a      	mov	r2, r5
 800592c:	4630      	mov	r0, r6
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <_vfiprintf_r+0x230>)
 8005930:	a904      	add	r1, sp, #16
 8005932:	f7fe f811 	bl	8003958 <_printf_i>
 8005936:	e7e4      	b.n	8005902 <_vfiprintf_r+0x1ea>
 8005938:	0800778b 	.word	0x0800778b
 800593c:	08007791 	.word	0x08007791
 8005940:	08007795 	.word	0x08007795
 8005944:	08003419 	.word	0x08003419
 8005948:	080056f3 	.word	0x080056f3

0800594c <__swbuf_r>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	460e      	mov	r6, r1
 8005950:	4614      	mov	r4, r2
 8005952:	4605      	mov	r5, r0
 8005954:	b118      	cbz	r0, 800595e <__swbuf_r+0x12>
 8005956:	6a03      	ldr	r3, [r0, #32]
 8005958:	b90b      	cbnz	r3, 800595e <__swbuf_r+0x12>
 800595a:	f7fe f999 	bl	8003c90 <__sinit>
 800595e:	69a3      	ldr	r3, [r4, #24]
 8005960:	60a3      	str	r3, [r4, #8]
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	071a      	lsls	r2, r3, #28
 8005966:	d525      	bpl.n	80059b4 <__swbuf_r+0x68>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	b31b      	cbz	r3, 80059b4 <__swbuf_r+0x68>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	6922      	ldr	r2, [r4, #16]
 8005970:	b2f6      	uxtb	r6, r6
 8005972:	1a98      	subs	r0, r3, r2
 8005974:	6963      	ldr	r3, [r4, #20]
 8005976:	4637      	mov	r7, r6
 8005978:	4283      	cmp	r3, r0
 800597a:	dc04      	bgt.n	8005986 <__swbuf_r+0x3a>
 800597c:	4621      	mov	r1, r4
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff f99c 	bl	8004cbc <_fflush_r>
 8005984:	b9e0      	cbnz	r0, 80059c0 <__swbuf_r+0x74>
 8005986:	68a3      	ldr	r3, [r4, #8]
 8005988:	3b01      	subs	r3, #1
 800598a:	60a3      	str	r3, [r4, #8]
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	701e      	strb	r6, [r3, #0]
 8005994:	6962      	ldr	r2, [r4, #20]
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	429a      	cmp	r2, r3
 800599a:	d004      	beq.n	80059a6 <__swbuf_r+0x5a>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	07db      	lsls	r3, r3, #31
 80059a0:	d506      	bpl.n	80059b0 <__swbuf_r+0x64>
 80059a2:	2e0a      	cmp	r6, #10
 80059a4:	d104      	bne.n	80059b0 <__swbuf_r+0x64>
 80059a6:	4621      	mov	r1, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7ff f987 	bl	8004cbc <_fflush_r>
 80059ae:	b938      	cbnz	r0, 80059c0 <__swbuf_r+0x74>
 80059b0:	4638      	mov	r0, r7
 80059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f806 	bl	80059c8 <__swsetup_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0d5      	beq.n	800596c <__swbuf_r+0x20>
 80059c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059c4:	e7f4      	b.n	80059b0 <__swbuf_r+0x64>
	...

080059c8 <__swsetup_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4b2a      	ldr	r3, [pc, #168]	; (8005a74 <__swsetup_r+0xac>)
 80059cc:	4605      	mov	r5, r0
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	460c      	mov	r4, r1
 80059d2:	b118      	cbz	r0, 80059dc <__swsetup_r+0x14>
 80059d4:	6a03      	ldr	r3, [r0, #32]
 80059d6:	b90b      	cbnz	r3, 80059dc <__swsetup_r+0x14>
 80059d8:	f7fe f95a 	bl	8003c90 <__sinit>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e2:	0718      	lsls	r0, r3, #28
 80059e4:	d422      	bmi.n	8005a2c <__swsetup_r+0x64>
 80059e6:	06d9      	lsls	r1, r3, #27
 80059e8:	d407      	bmi.n	80059fa <__swsetup_r+0x32>
 80059ea:	2309      	movs	r3, #9
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	e034      	b.n	8005a64 <__swsetup_r+0x9c>
 80059fa:	0758      	lsls	r0, r3, #29
 80059fc:	d512      	bpl.n	8005a24 <__swsetup_r+0x5c>
 80059fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a00:	b141      	cbz	r1, 8005a14 <__swsetup_r+0x4c>
 8005a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a06:	4299      	cmp	r1, r3
 8005a08:	d002      	beq.n	8005a10 <__swsetup_r+0x48>
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f7ff fddc 	bl	80055c8 <_free_r>
 8005a10:	2300      	movs	r3, #0
 8005a12:	6363      	str	r3, [r4, #52]	; 0x34
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a1a:	81a3      	strh	r3, [r4, #12]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6063      	str	r3, [r4, #4]
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f043 0308 	orr.w	r3, r3, #8
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	b94b      	cbnz	r3, 8005a44 <__swsetup_r+0x7c>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3a:	d003      	beq.n	8005a44 <__swsetup_r+0x7c>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f83f 	bl	8005ac2 <__smakebuf_r>
 8005a44:	89a0      	ldrh	r0, [r4, #12]
 8005a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a4a:	f010 0301 	ands.w	r3, r0, #1
 8005a4e:	d00a      	beq.n	8005a66 <__swsetup_r+0x9e>
 8005a50:	2300      	movs	r3, #0
 8005a52:	60a3      	str	r3, [r4, #8]
 8005a54:	6963      	ldr	r3, [r4, #20]
 8005a56:	425b      	negs	r3, r3
 8005a58:	61a3      	str	r3, [r4, #24]
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	b943      	cbnz	r3, 8005a70 <__swsetup_r+0xa8>
 8005a5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a62:	d1c4      	bne.n	80059ee <__swsetup_r+0x26>
 8005a64:	bd38      	pop	{r3, r4, r5, pc}
 8005a66:	0781      	lsls	r1, r0, #30
 8005a68:	bf58      	it	pl
 8005a6a:	6963      	ldrpl	r3, [r4, #20]
 8005a6c:	60a3      	str	r3, [r4, #8]
 8005a6e:	e7f4      	b.n	8005a5a <__swsetup_r+0x92>
 8005a70:	2000      	movs	r0, #0
 8005a72:	e7f7      	b.n	8005a64 <__swsetup_r+0x9c>
 8005a74:	20000064 	.word	0x20000064

08005a78 <__swhatbuf_r>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a80:	4615      	mov	r5, r2
 8005a82:	2900      	cmp	r1, #0
 8005a84:	461e      	mov	r6, r3
 8005a86:	b096      	sub	sp, #88	; 0x58
 8005a88:	da0c      	bge.n	8005aa4 <__swhatbuf_r+0x2c>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a92:	bf0c      	ite	eq
 8005a94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a98:	2340      	movne	r3, #64	; 0x40
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	6031      	str	r1, [r6, #0]
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	b016      	add	sp, #88	; 0x58
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	466a      	mov	r2, sp
 8005aa6:	f000 f849 	bl	8005b3c <_fstat_r>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	dbed      	blt.n	8005a8a <__swhatbuf_r+0x12>
 8005aae:	9901      	ldr	r1, [sp, #4]
 8005ab0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ab4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ab8:	4259      	negs	r1, r3
 8005aba:	4159      	adcs	r1, r3
 8005abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac0:	e7eb      	b.n	8005a9a <__swhatbuf_r+0x22>

08005ac2 <__smakebuf_r>:
 8005ac2:	898b      	ldrh	r3, [r1, #12]
 8005ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ac6:	079d      	lsls	r5, r3, #30
 8005ac8:	4606      	mov	r6, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	d507      	bpl.n	8005ade <__smakebuf_r+0x1c>
 8005ace:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	6123      	str	r3, [r4, #16]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	6163      	str	r3, [r4, #20]
 8005ada:	b002      	add	sp, #8
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	466a      	mov	r2, sp
 8005ae0:	ab01      	add	r3, sp, #4
 8005ae2:	f7ff ffc9 	bl	8005a78 <__swhatbuf_r>
 8005ae6:	9900      	ldr	r1, [sp, #0]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	4630      	mov	r0, r6
 8005aec:	f7fe ffe4 	bl	8004ab8 <_malloc_r>
 8005af0:	b948      	cbnz	r0, 8005b06 <__smakebuf_r+0x44>
 8005af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af6:	059a      	lsls	r2, r3, #22
 8005af8:	d4ef      	bmi.n	8005ada <__smakebuf_r+0x18>
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	f043 0302 	orr.w	r3, r3, #2
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	e7e3      	b.n	8005ace <__smakebuf_r+0xc>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	6020      	str	r0, [r4, #0]
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	9b00      	ldr	r3, [sp, #0]
 8005b12:	6120      	str	r0, [r4, #16]
 8005b14:	6163      	str	r3, [r4, #20]
 8005b16:	9b01      	ldr	r3, [sp, #4]
 8005b18:	b15b      	cbz	r3, 8005b32 <__smakebuf_r+0x70>
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b20:	f000 f81e 	bl	8005b60 <_isatty_r>
 8005b24:	b128      	cbz	r0, 8005b32 <__smakebuf_r+0x70>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	431d      	orrs	r5, r3
 8005b36:	81a5      	strh	r5, [r4, #12]
 8005b38:	e7cf      	b.n	8005ada <__smakebuf_r+0x18>
	...

08005b3c <_fstat_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_fstat_r+0x20>)
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	602b      	str	r3, [r5, #0]
 8005b4a:	f7fd f9b0 	bl	8002eae <_fstat>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d102      	bne.n	8005b58 <_fstat_r+0x1c>
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	b103      	cbz	r3, 8005b58 <_fstat_r+0x1c>
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	bd38      	pop	{r3, r4, r5, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200003f8 	.word	0x200003f8

08005b60 <_isatty_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	2300      	movs	r3, #0
 8005b64:	4d05      	ldr	r5, [pc, #20]	; (8005b7c <_isatty_r+0x1c>)
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fd f9ae 	bl	8002ecc <_isatty>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_isatty_r+0x1a>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_isatty_r+0x1a>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	200003f8 	.word	0x200003f8

08005b80 <_raise_r>:
 8005b80:	291f      	cmp	r1, #31
 8005b82:	b538      	push	{r3, r4, r5, lr}
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	d904      	bls.n	8005b94 <_raise_r+0x14>
 8005b8a:	2316      	movs	r3, #22
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005b96:	b112      	cbz	r2, 8005b9e <_raise_r+0x1e>
 8005b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b9c:	b94b      	cbnz	r3, 8005bb2 <_raise_r+0x32>
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 f830 	bl	8005c04 <_getpid_r>
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4620      	mov	r0, r4
 8005baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bae:	f000 b817 	b.w	8005be0 <_kill_r>
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d00a      	beq.n	8005bcc <_raise_r+0x4c>
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	d103      	bne.n	8005bc2 <_raise_r+0x42>
 8005bba:	2316      	movs	r3, #22
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	e7e7      	b.n	8005b92 <_raise_r+0x12>
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bca:	4798      	blx	r3
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e7e0      	b.n	8005b92 <_raise_r+0x12>

08005bd0 <raise>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <raise+0xc>)
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f7ff bfd3 	b.w	8005b80 <_raise_r>
 8005bda:	bf00      	nop
 8005bdc:	20000064 	.word	0x20000064

08005be0 <_kill_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	2300      	movs	r3, #0
 8005be4:	4d06      	ldr	r5, [pc, #24]	; (8005c00 <_kill_r+0x20>)
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	4611      	mov	r1, r2
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	f7fd f91c 	bl	8002e2a <_kill>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d102      	bne.n	8005bfc <_kill_r+0x1c>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	b103      	cbz	r3, 8005bfc <_kill_r+0x1c>
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	200003f8 	.word	0x200003f8

08005c04 <_getpid_r>:
 8005c04:	f7fd b90a 	b.w	8002e1c <_getpid>

08005c08 <pow>:
 8005c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	461d      	mov	r5, r3
 8005c10:	4680      	mov	r8, r0
 8005c12:	4689      	mov	r9, r1
 8005c14:	f000 f9e4 	bl	8005fe0 <__ieee754_pow>
 8005c18:	4622      	mov	r2, r4
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460f      	mov	r7, r1
 8005c1e:	462b      	mov	r3, r5
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7fa ff02 	bl	8000a2c <__aeabi_dcmpun>
 8005c28:	bbc8      	cbnz	r0, 8005c9e <pow+0x96>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4640      	mov	r0, r8
 8005c30:	4649      	mov	r1, r9
 8005c32:	f7fa fec9 	bl	80009c8 <__aeabi_dcmpeq>
 8005c36:	b1b8      	cbz	r0, 8005c68 <pow+0x60>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fec2 	bl	80009c8 <__aeabi_dcmpeq>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d141      	bne.n	8005ccc <pow+0xc4>
 8005c48:	4620      	mov	r0, r4
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	f000 f868 	bl	8005d20 <finite>
 8005c50:	b328      	cbz	r0, 8005c9e <pow+0x96>
 8005c52:	2200      	movs	r2, #0
 8005c54:	2300      	movs	r3, #0
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa febf 	bl	80009dc <__aeabi_dcmplt>
 8005c5e:	b1f0      	cbz	r0, 8005c9e <pow+0x96>
 8005c60:	f7fe f858 	bl	8003d14 <__errno>
 8005c64:	2322      	movs	r3, #34	; 0x22
 8005c66:	e019      	b.n	8005c9c <pow+0x94>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f000 f858 	bl	8005d20 <finite>
 8005c70:	b9c8      	cbnz	r0, 8005ca6 <pow+0x9e>
 8005c72:	4640      	mov	r0, r8
 8005c74:	4649      	mov	r1, r9
 8005c76:	f000 f853 	bl	8005d20 <finite>
 8005c7a:	b1a0      	cbz	r0, 8005ca6 <pow+0x9e>
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f000 f84e 	bl	8005d20 <finite>
 8005c84:	b178      	cbz	r0, 8005ca6 <pow+0x9e>
 8005c86:	4632      	mov	r2, r6
 8005c88:	463b      	mov	r3, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	4639      	mov	r1, r7
 8005c8e:	f7fa fecd 	bl	8000a2c <__aeabi_dcmpun>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d0e4      	beq.n	8005c60 <pow+0x58>
 8005c96:	f7fe f83d 	bl	8003d14 <__errno>
 8005c9a:	2321      	movs	r3, #33	; 0x21
 8005c9c:	6003      	str	r3, [r0, #0]
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4630      	mov	r0, r6
 8005cac:	4639      	mov	r1, r7
 8005cae:	f7fa fe8b 	bl	80009c8 <__aeabi_dcmpeq>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d0f3      	beq.n	8005c9e <pow+0x96>
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	4649      	mov	r1, r9
 8005cba:	f000 f831 	bl	8005d20 <finite>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0ed      	beq.n	8005c9e <pow+0x96>
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f000 f82b 	bl	8005d20 <finite>
 8005cca:	e7c8      	b.n	8005c5e <pow+0x56>
 8005ccc:	2600      	movs	r6, #0
 8005cce:	4f01      	ldr	r7, [pc, #4]	; (8005cd4 <pow+0xcc>)
 8005cd0:	e7e5      	b.n	8005c9e <pow+0x96>
 8005cd2:	bf00      	nop
 8005cd4:	3ff00000 	.word	0x3ff00000

08005cd8 <sqrt>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	4606      	mov	r6, r0
 8005cdc:	460f      	mov	r7, r1
 8005cde:	f000 f825 	bl	8005d2c <__ieee754_sqrt>
 8005ce2:	4632      	mov	r2, r6
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	463b      	mov	r3, r7
 8005cea:	4630      	mov	r0, r6
 8005cec:	4639      	mov	r1, r7
 8005cee:	f7fa fe9d 	bl	8000a2c <__aeabi_dcmpun>
 8005cf2:	b990      	cbnz	r0, 8005d1a <sqrt+0x42>
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa fe6e 	bl	80009dc <__aeabi_dcmplt>
 8005d00:	b158      	cbz	r0, 8005d1a <sqrt+0x42>
 8005d02:	f7fe f807 	bl	8003d14 <__errno>
 8005d06:	2321      	movs	r3, #33	; 0x21
 8005d08:	2200      	movs	r2, #0
 8005d0a:	6003      	str	r3, [r0, #0]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	f7fa fd1b 	bl	800074c <__aeabi_ddiv>
 8005d16:	4604      	mov	r4, r0
 8005d18:	460d      	mov	r5, r1
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d20 <finite>:
 8005d20:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005d24:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005d28:	0fc0      	lsrs	r0, r0, #31
 8005d2a:	4770      	bx	lr

08005d2c <__ieee754_sqrt>:
 8005d2c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005ed0 <__ieee754_sqrt+0x1a4>
 8005d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	ea3c 0c01 	bics.w	ip, ip, r1
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	460a      	mov	r2, r1
 8005d40:	4604      	mov	r4, r0
 8005d42:	d10e      	bne.n	8005d62 <__ieee754_sqrt+0x36>
 8005d44:	4602      	mov	r2, r0
 8005d46:	f7fa fbd7 	bl	80004f8 <__aeabi_dmul>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4630      	mov	r0, r6
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fa1b 	bl	800018c <__adddf3>
 8005d56:	4606      	mov	r6, r0
 8005d58:	460d      	mov	r5, r1
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d62:	2900      	cmp	r1, #0
 8005d64:	dc0d      	bgt.n	8005d82 <__ieee754_sqrt+0x56>
 8005d66:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005d6a:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005d6e:	d0f4      	beq.n	8005d5a <__ieee754_sqrt+0x2e>
 8005d70:	b139      	cbz	r1, 8005d82 <__ieee754_sqrt+0x56>
 8005d72:	4602      	mov	r2, r0
 8005d74:	f7fa fa08 	bl	8000188 <__aeabi_dsub>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	f7fa fce6 	bl	800074c <__aeabi_ddiv>
 8005d80:	e7e9      	b.n	8005d56 <__ieee754_sqrt+0x2a>
 8005d82:	1512      	asrs	r2, r2, #20
 8005d84:	f000 8089 	beq.w	8005e9a <__ieee754_sqrt+0x16e>
 8005d88:	2500      	movs	r5, #0
 8005d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d8e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d96:	07d2      	lsls	r2, r2, #31
 8005d98:	bf5c      	itt	pl
 8005d9a:	005b      	lslpl	r3, r3, #1
 8005d9c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005da0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005da4:	bf58      	it	pl
 8005da6:	0064      	lslpl	r4, r4, #1
 8005da8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005dac:	0062      	lsls	r2, r4, #1
 8005dae:	2016      	movs	r0, #22
 8005db0:	4629      	mov	r1, r5
 8005db2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8005db6:	1076      	asrs	r6, r6, #1
 8005db8:	190f      	adds	r7, r1, r4
 8005dba:	429f      	cmp	r7, r3
 8005dbc:	bfde      	ittt	le
 8005dbe:	1bdb      	suble	r3, r3, r7
 8005dc0:	1939      	addle	r1, r7, r4
 8005dc2:	192d      	addle	r5, r5, r4
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	3801      	subs	r0, #1
 8005dc8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005dcc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005dd0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005dd4:	d1f0      	bne.n	8005db8 <__ieee754_sqrt+0x8c>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	2720      	movs	r7, #32
 8005dda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005dde:	428b      	cmp	r3, r1
 8005de0:	eb0c 0e00 	add.w	lr, ip, r0
 8005de4:	dc02      	bgt.n	8005dec <__ieee754_sqrt+0xc0>
 8005de6:	d113      	bne.n	8005e10 <__ieee754_sqrt+0xe4>
 8005de8:	4596      	cmp	lr, r2
 8005dea:	d811      	bhi.n	8005e10 <__ieee754_sqrt+0xe4>
 8005dec:	f1be 0f00 	cmp.w	lr, #0
 8005df0:	eb0e 000c 	add.w	r0, lr, ip
 8005df4:	da56      	bge.n	8005ea4 <__ieee754_sqrt+0x178>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	db54      	blt.n	8005ea4 <__ieee754_sqrt+0x178>
 8005dfa:	f101 0801 	add.w	r8, r1, #1
 8005dfe:	1a5b      	subs	r3, r3, r1
 8005e00:	4641      	mov	r1, r8
 8005e02:	4596      	cmp	lr, r2
 8005e04:	bf88      	it	hi
 8005e06:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8005e0a:	eba2 020e 	sub.w	r2, r2, lr
 8005e0e:	4464      	add	r4, ip
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	3f01      	subs	r7, #1
 8005e14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005e18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005e1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005e20:	d1dd      	bne.n	8005dde <__ieee754_sqrt+0xb2>
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d01b      	beq.n	8005e5e <__ieee754_sqrt+0x132>
 8005e26:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005ed4 <__ieee754_sqrt+0x1a8>
 8005e2a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005ed8 <__ieee754_sqrt+0x1ac>
 8005e2e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005e32:	e9db 2300 	ldrd	r2, r3, [fp]
 8005e36:	f7fa f9a7 	bl	8000188 <__aeabi_dsub>
 8005e3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4640      	mov	r0, r8
 8005e44:	4649      	mov	r1, r9
 8005e46:	f7fa fdd3 	bl	80009f0 <__aeabi_dcmple>
 8005e4a:	b140      	cbz	r0, 8005e5e <__ieee754_sqrt+0x132>
 8005e4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005e50:	e9db 2300 	ldrd	r2, r3, [fp]
 8005e54:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005e58:	d126      	bne.n	8005ea8 <__ieee754_sqrt+0x17c>
 8005e5a:	463c      	mov	r4, r7
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	106b      	asrs	r3, r5, #1
 8005e60:	0864      	lsrs	r4, r4, #1
 8005e62:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e66:	07ea      	lsls	r2, r5, #31
 8005e68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e6c:	bf48      	it	mi
 8005e6e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8005e72:	4620      	mov	r0, r4
 8005e74:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005e78:	e76d      	b.n	8005d56 <__ieee754_sqrt+0x2a>
 8005e7a:	0ae3      	lsrs	r3, r4, #11
 8005e7c:	3915      	subs	r1, #21
 8005e7e:	0564      	lsls	r4, r4, #21
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0fa      	beq.n	8005e7a <__ieee754_sqrt+0x14e>
 8005e84:	02d8      	lsls	r0, r3, #11
 8005e86:	d50a      	bpl.n	8005e9e <__ieee754_sqrt+0x172>
 8005e88:	f1c2 0020 	rsb	r0, r2, #32
 8005e8c:	fa24 f000 	lsr.w	r0, r4, r0
 8005e90:	1e55      	subs	r5, r2, #1
 8005e92:	4094      	lsls	r4, r2
 8005e94:	4303      	orrs	r3, r0
 8005e96:	1b4a      	subs	r2, r1, r5
 8005e98:	e776      	b.n	8005d88 <__ieee754_sqrt+0x5c>
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	e7f0      	b.n	8005e80 <__ieee754_sqrt+0x154>
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	3201      	adds	r2, #1
 8005ea2:	e7ef      	b.n	8005e84 <__ieee754_sqrt+0x158>
 8005ea4:	4688      	mov	r8, r1
 8005ea6:	e7aa      	b.n	8005dfe <__ieee754_sqrt+0xd2>
 8005ea8:	f7fa f970 	bl	800018c <__adddf3>
 8005eac:	e9da 8900 	ldrd	r8, r9, [sl]
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	f7fa fd90 	bl	80009dc <__aeabi_dcmplt>
 8005ebc:	b120      	cbz	r0, 8005ec8 <__ieee754_sqrt+0x19c>
 8005ebe:	1ca1      	adds	r1, r4, #2
 8005ec0:	bf08      	it	eq
 8005ec2:	3501      	addeq	r5, #1
 8005ec4:	3402      	adds	r4, #2
 8005ec6:	e7ca      	b.n	8005e5e <__ieee754_sqrt+0x132>
 8005ec8:	3401      	adds	r4, #1
 8005eca:	f024 0401 	bic.w	r4, r4, #1
 8005ece:	e7c6      	b.n	8005e5e <__ieee754_sqrt+0x132>
 8005ed0:	7ff00000 	.word	0x7ff00000
 8005ed4:	200001d8 	.word	0x200001d8
 8005ed8:	200001e0 	.word	0x200001e0
 8005edc:	00000000 	.word	0x00000000

08005ee0 <floor>:
 8005ee0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005eec:	2e13      	cmp	r6, #19
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	dc32      	bgt.n	8005f5e <floor+0x7e>
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	da14      	bge.n	8005f26 <floor+0x46>
 8005efc:	a334      	add	r3, pc, #208	; (adr r3, 8005fd0 <floor+0xf0>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f943 	bl	800018c <__adddf3>
 8005f06:	2200      	movs	r2, #0
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f7fa fd85 	bl	8000a18 <__aeabi_dcmpgt>
 8005f0e:	b138      	cbz	r0, 8005f20 <floor+0x40>
 8005f10:	2c00      	cmp	r4, #0
 8005f12:	da56      	bge.n	8005fc2 <floor+0xe2>
 8005f14:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005f18:	4325      	orrs	r5, r4
 8005f1a:	d055      	beq.n	8005fc8 <floor+0xe8>
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	4c2e      	ldr	r4, [pc, #184]	; (8005fd8 <floor+0xf8>)
 8005f20:	4623      	mov	r3, r4
 8005f22:	462f      	mov	r7, r5
 8005f24:	e025      	b.n	8005f72 <floor+0x92>
 8005f26:	4a2d      	ldr	r2, [pc, #180]	; (8005fdc <floor+0xfc>)
 8005f28:	fa42 f806 	asr.w	r8, r2, r6
 8005f2c:	ea01 0208 	and.w	r2, r1, r8
 8005f30:	4302      	orrs	r2, r0
 8005f32:	d01e      	beq.n	8005f72 <floor+0x92>
 8005f34:	a326      	add	r3, pc, #152	; (adr r3, 8005fd0 <floor+0xf0>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f927 	bl	800018c <__adddf3>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	f7fa fd69 	bl	8000a18 <__aeabi_dcmpgt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0ea      	beq.n	8005f20 <floor+0x40>
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	bfbe      	ittt	lt
 8005f4e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f52:	4133      	asrlt	r3, r6
 8005f54:	18e4      	addlt	r4, r4, r3
 8005f56:	2500      	movs	r5, #0
 8005f58:	ea24 0408 	bic.w	r4, r4, r8
 8005f5c:	e7e0      	b.n	8005f20 <floor+0x40>
 8005f5e:	2e33      	cmp	r6, #51	; 0x33
 8005f60:	dd0b      	ble.n	8005f7a <floor+0x9a>
 8005f62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f66:	d104      	bne.n	8005f72 <floor+0x92>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f7fa f90f 	bl	800018c <__adddf3>
 8005f6e:	4607      	mov	r7, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4638      	mov	r0, r7
 8005f74:	4619      	mov	r1, r3
 8005f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005f7e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005f82:	fa28 f802 	lsr.w	r8, r8, r2
 8005f86:	ea10 0f08 	tst.w	r0, r8
 8005f8a:	d0f2      	beq.n	8005f72 <floor+0x92>
 8005f8c:	a310      	add	r3, pc, #64	; (adr r3, 8005fd0 <floor+0xf0>)
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa f8fb 	bl	800018c <__adddf3>
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f7fa fd3d 	bl	8000a18 <__aeabi_dcmpgt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d0be      	beq.n	8005f20 <floor+0x40>
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	da0a      	bge.n	8005fbc <floor+0xdc>
 8005fa6:	2e14      	cmp	r6, #20
 8005fa8:	d101      	bne.n	8005fae <floor+0xce>
 8005faa:	3401      	adds	r4, #1
 8005fac:	e006      	b.n	8005fbc <floor+0xdc>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005fb4:	40b3      	lsls	r3, r6
 8005fb6:	441d      	add	r5, r3
 8005fb8:	42af      	cmp	r7, r5
 8005fba:	d8f6      	bhi.n	8005faa <floor+0xca>
 8005fbc:	ea25 0508 	bic.w	r5, r5, r8
 8005fc0:	e7ae      	b.n	8005f20 <floor+0x40>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	462c      	mov	r4, r5
 8005fc6:	e7ab      	b.n	8005f20 <floor+0x40>
 8005fc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005fcc:	e7a8      	b.n	8005f20 <floor+0x40>
 8005fce:	bf00      	nop
 8005fd0:	8800759c 	.word	0x8800759c
 8005fd4:	7e37e43c 	.word	0x7e37e43c
 8005fd8:	bff00000 	.word	0xbff00000
 8005fdc:	000fffff 	.word	0x000fffff

08005fe0 <__ieee754_pow>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	b093      	sub	sp, #76	; 0x4c
 8005fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fea:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005fee:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005ff2:	4689      	mov	r9, r1
 8005ff4:	ea56 0102 	orrs.w	r1, r6, r2
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	d111      	bne.n	8006020 <__ieee754_pow+0x40>
 8005ffc:	1803      	adds	r3, r0, r0
 8005ffe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006002:	4152      	adcs	r2, r2
 8006004:	4299      	cmp	r1, r3
 8006006:	4b82      	ldr	r3, [pc, #520]	; (8006210 <__ieee754_pow+0x230>)
 8006008:	4193      	sbcs	r3, r2
 800600a:	f080 84ba 	bcs.w	8006982 <__ieee754_pow+0x9a2>
 800600e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006012:	4640      	mov	r0, r8
 8006014:	4649      	mov	r1, r9
 8006016:	f7fa f8b9 	bl	800018c <__adddf3>
 800601a:	4683      	mov	fp, r0
 800601c:	468c      	mov	ip, r1
 800601e:	e06f      	b.n	8006100 <__ieee754_pow+0x120>
 8006020:	4b7c      	ldr	r3, [pc, #496]	; (8006214 <__ieee754_pow+0x234>)
 8006022:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006026:	429c      	cmp	r4, r3
 8006028:	464d      	mov	r5, r9
 800602a:	4682      	mov	sl, r0
 800602c:	dc06      	bgt.n	800603c <__ieee754_pow+0x5c>
 800602e:	d101      	bne.n	8006034 <__ieee754_pow+0x54>
 8006030:	2800      	cmp	r0, #0
 8006032:	d1ec      	bne.n	800600e <__ieee754_pow+0x2e>
 8006034:	429e      	cmp	r6, r3
 8006036:	dc01      	bgt.n	800603c <__ieee754_pow+0x5c>
 8006038:	d10f      	bne.n	800605a <__ieee754_pow+0x7a>
 800603a:	b172      	cbz	r2, 800605a <__ieee754_pow+0x7a>
 800603c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006040:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006044:	ea55 050a 	orrs.w	r5, r5, sl
 8006048:	d1e1      	bne.n	800600e <__ieee754_pow+0x2e>
 800604a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800604e:	18db      	adds	r3, r3, r3
 8006050:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006054:	4152      	adcs	r2, r2
 8006056:	429d      	cmp	r5, r3
 8006058:	e7d5      	b.n	8006006 <__ieee754_pow+0x26>
 800605a:	2d00      	cmp	r5, #0
 800605c:	da39      	bge.n	80060d2 <__ieee754_pow+0xf2>
 800605e:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <__ieee754_pow+0x238>)
 8006060:	429e      	cmp	r6, r3
 8006062:	dc52      	bgt.n	800610a <__ieee754_pow+0x12a>
 8006064:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006068:	429e      	cmp	r6, r3
 800606a:	f340 849d 	ble.w	80069a8 <__ieee754_pow+0x9c8>
 800606e:	1533      	asrs	r3, r6, #20
 8006070:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006074:	2b14      	cmp	r3, #20
 8006076:	dd0f      	ble.n	8006098 <__ieee754_pow+0xb8>
 8006078:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800607c:	fa22 f103 	lsr.w	r1, r2, r3
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	4293      	cmp	r3, r2
 8006086:	f040 848f 	bne.w	80069a8 <__ieee754_pow+0x9c8>
 800608a:	f001 0101 	and.w	r1, r1, #1
 800608e:	f1c1 0302 	rsb	r3, r1, #2
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	b182      	cbz	r2, 80060b8 <__ieee754_pow+0xd8>
 8006096:	e05d      	b.n	8006154 <__ieee754_pow+0x174>
 8006098:	2a00      	cmp	r2, #0
 800609a:	d159      	bne.n	8006150 <__ieee754_pow+0x170>
 800609c:	f1c3 0314 	rsb	r3, r3, #20
 80060a0:	fa46 f103 	asr.w	r1, r6, r3
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	42b3      	cmp	r3, r6
 80060aa:	f040 847a 	bne.w	80069a2 <__ieee754_pow+0x9c2>
 80060ae:	f001 0101 	and.w	r1, r1, #1
 80060b2:	f1c1 0302 	rsb	r3, r1, #2
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4b58      	ldr	r3, [pc, #352]	; (800621c <__ieee754_pow+0x23c>)
 80060ba:	429e      	cmp	r6, r3
 80060bc:	d132      	bne.n	8006124 <__ieee754_pow+0x144>
 80060be:	2f00      	cmp	r7, #0
 80060c0:	f280 846b 	bge.w	800699a <__ieee754_pow+0x9ba>
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	2000      	movs	r0, #0
 80060ca:	4954      	ldr	r1, [pc, #336]	; (800621c <__ieee754_pow+0x23c>)
 80060cc:	f7fa fb3e 	bl	800074c <__aeabi_ddiv>
 80060d0:	e7a3      	b.n	800601a <__ieee754_pow+0x3a>
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	d13c      	bne.n	8006154 <__ieee754_pow+0x174>
 80060da:	4b4e      	ldr	r3, [pc, #312]	; (8006214 <__ieee754_pow+0x234>)
 80060dc:	429e      	cmp	r6, r3
 80060de:	d1eb      	bne.n	80060b8 <__ieee754_pow+0xd8>
 80060e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80060e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80060e8:	ea53 030a 	orrs.w	r3, r3, sl
 80060ec:	f000 8449 	beq.w	8006982 <__ieee754_pow+0x9a2>
 80060f0:	4b4b      	ldr	r3, [pc, #300]	; (8006220 <__ieee754_pow+0x240>)
 80060f2:	429c      	cmp	r4, r3
 80060f4:	dd0b      	ble.n	800610e <__ieee754_pow+0x12e>
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	f2c0 8449 	blt.w	800698e <__ieee754_pow+0x9ae>
 80060fc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006100:	4658      	mov	r0, fp
 8006102:	4661      	mov	r1, ip
 8006104:	b013      	add	sp, #76	; 0x4c
 8006106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610a:	2302      	movs	r3, #2
 800610c:	e7e2      	b.n	80060d4 <__ieee754_pow+0xf4>
 800610e:	2f00      	cmp	r7, #0
 8006110:	f04f 0b00 	mov.w	fp, #0
 8006114:	f04f 0c00 	mov.w	ip, #0
 8006118:	daf2      	bge.n	8006100 <__ieee754_pow+0x120>
 800611a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800611e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006122:	e7ed      	b.n	8006100 <__ieee754_pow+0x120>
 8006124:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006128:	d106      	bne.n	8006138 <__ieee754_pow+0x158>
 800612a:	4642      	mov	r2, r8
 800612c:	464b      	mov	r3, r9
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa f9e1 	bl	80004f8 <__aeabi_dmul>
 8006136:	e770      	b.n	800601a <__ieee754_pow+0x3a>
 8006138:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <__ieee754_pow+0x244>)
 800613a:	429f      	cmp	r7, r3
 800613c:	d10a      	bne.n	8006154 <__ieee754_pow+0x174>
 800613e:	2d00      	cmp	r5, #0
 8006140:	db08      	blt.n	8006154 <__ieee754_pow+0x174>
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	b013      	add	sp, #76	; 0x4c
 8006148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	f7ff bdee 	b.w	8005d2c <__ieee754_sqrt>
 8006150:	2300      	movs	r3, #0
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	4640      	mov	r0, r8
 8006156:	4649      	mov	r1, r9
 8006158:	f000 fc84 	bl	8006a64 <fabs>
 800615c:	4683      	mov	fp, r0
 800615e:	468c      	mov	ip, r1
 8006160:	f1ba 0f00 	cmp.w	sl, #0
 8006164:	d128      	bne.n	80061b8 <__ieee754_pow+0x1d8>
 8006166:	b124      	cbz	r4, 8006172 <__ieee754_pow+0x192>
 8006168:	4b2c      	ldr	r3, [pc, #176]	; (800621c <__ieee754_pow+0x23c>)
 800616a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800616e:	429a      	cmp	r2, r3
 8006170:	d122      	bne.n	80061b8 <__ieee754_pow+0x1d8>
 8006172:	2f00      	cmp	r7, #0
 8006174:	da07      	bge.n	8006186 <__ieee754_pow+0x1a6>
 8006176:	465a      	mov	r2, fp
 8006178:	4663      	mov	r3, ip
 800617a:	2000      	movs	r0, #0
 800617c:	4927      	ldr	r1, [pc, #156]	; (800621c <__ieee754_pow+0x23c>)
 800617e:	f7fa fae5 	bl	800074c <__aeabi_ddiv>
 8006182:	4683      	mov	fp, r0
 8006184:	468c      	mov	ip, r1
 8006186:	2d00      	cmp	r5, #0
 8006188:	daba      	bge.n	8006100 <__ieee754_pow+0x120>
 800618a:	9b00      	ldr	r3, [sp, #0]
 800618c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006190:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006194:	431c      	orrs	r4, r3
 8006196:	d108      	bne.n	80061aa <__ieee754_pow+0x1ca>
 8006198:	465a      	mov	r2, fp
 800619a:	4663      	mov	r3, ip
 800619c:	4658      	mov	r0, fp
 800619e:	4661      	mov	r1, ip
 80061a0:	f7f9 fff2 	bl	8000188 <__aeabi_dsub>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	e790      	b.n	80060cc <__ieee754_pow+0xec>
 80061aa:	9b00      	ldr	r3, [sp, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d1a7      	bne.n	8006100 <__ieee754_pow+0x120>
 80061b0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80061b4:	469c      	mov	ip, r3
 80061b6:	e7a3      	b.n	8006100 <__ieee754_pow+0x120>
 80061b8:	0feb      	lsrs	r3, r5, #31
 80061ba:	3b01      	subs	r3, #1
 80061bc:	930c      	str	r3, [sp, #48]	; 0x30
 80061be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c0:	9b00      	ldr	r3, [sp, #0]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	d104      	bne.n	80061d0 <__ieee754_pow+0x1f0>
 80061c6:	4642      	mov	r2, r8
 80061c8:	464b      	mov	r3, r9
 80061ca:	4640      	mov	r0, r8
 80061cc:	4649      	mov	r1, r9
 80061ce:	e7e7      	b.n	80061a0 <__ieee754_pow+0x1c0>
 80061d0:	4b15      	ldr	r3, [pc, #84]	; (8006228 <__ieee754_pow+0x248>)
 80061d2:	429e      	cmp	r6, r3
 80061d4:	f340 80f6 	ble.w	80063c4 <__ieee754_pow+0x3e4>
 80061d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80061dc:	429e      	cmp	r6, r3
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <__ieee754_pow+0x240>)
 80061e0:	dd09      	ble.n	80061f6 <__ieee754_pow+0x216>
 80061e2:	429c      	cmp	r4, r3
 80061e4:	dc0c      	bgt.n	8006200 <__ieee754_pow+0x220>
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	da0c      	bge.n	8006204 <__ieee754_pow+0x224>
 80061ea:	2000      	movs	r0, #0
 80061ec:	b013      	add	sp, #76	; 0x4c
 80061ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f2:	f000 bc32 	b.w	8006a5a <__math_oflow>
 80061f6:	429c      	cmp	r4, r3
 80061f8:	dbf5      	blt.n	80061e6 <__ieee754_pow+0x206>
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <__ieee754_pow+0x23c>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	dd15      	ble.n	800622c <__ieee754_pow+0x24c>
 8006200:	2f00      	cmp	r7, #0
 8006202:	dcf2      	bgt.n	80061ea <__ieee754_pow+0x20a>
 8006204:	2000      	movs	r0, #0
 8006206:	b013      	add	sp, #76	; 0x4c
 8006208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	f000 bc20 	b.w	8006a50 <__math_uflow>
 8006210:	fff00000 	.word	0xfff00000
 8006214:	7ff00000 	.word	0x7ff00000
 8006218:	433fffff 	.word	0x433fffff
 800621c:	3ff00000 	.word	0x3ff00000
 8006220:	3fefffff 	.word	0x3fefffff
 8006224:	3fe00000 	.word	0x3fe00000
 8006228:	41e00000 	.word	0x41e00000
 800622c:	4661      	mov	r1, ip
 800622e:	2200      	movs	r2, #0
 8006230:	4658      	mov	r0, fp
 8006232:	4b5f      	ldr	r3, [pc, #380]	; (80063b0 <__ieee754_pow+0x3d0>)
 8006234:	f7f9 ffa8 	bl	8000188 <__aeabi_dsub>
 8006238:	a355      	add	r3, pc, #340	; (adr r3, 8006390 <__ieee754_pow+0x3b0>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	f7fa f959 	bl	80004f8 <__aeabi_dmul>
 8006246:	a354      	add	r3, pc, #336	; (adr r3, 8006398 <__ieee754_pow+0x3b8>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	4606      	mov	r6, r0
 800624e:	460f      	mov	r7, r1
 8006250:	4620      	mov	r0, r4
 8006252:	4629      	mov	r1, r5
 8006254:	f7fa f950 	bl	80004f8 <__aeabi_dmul>
 8006258:	2200      	movs	r2, #0
 800625a:	4682      	mov	sl, r0
 800625c:	468b      	mov	fp, r1
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	4b54      	ldr	r3, [pc, #336]	; (80063b4 <__ieee754_pow+0x3d4>)
 8006264:	f7fa f948 	bl	80004f8 <__aeabi_dmul>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	a14c      	add	r1, pc, #304	; (adr r1, 80063a0 <__ieee754_pow+0x3c0>)
 800626e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006272:	f7f9 ff89 	bl	8000188 <__aeabi_dsub>
 8006276:	4622      	mov	r2, r4
 8006278:	462b      	mov	r3, r5
 800627a:	f7fa f93d 	bl	80004f8 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	2000      	movs	r0, #0
 8006284:	494c      	ldr	r1, [pc, #304]	; (80063b8 <__ieee754_pow+0x3d8>)
 8006286:	f7f9 ff7f 	bl	8000188 <__aeabi_dsub>
 800628a:	4622      	mov	r2, r4
 800628c:	462b      	mov	r3, r5
 800628e:	4680      	mov	r8, r0
 8006290:	4689      	mov	r9, r1
 8006292:	4620      	mov	r0, r4
 8006294:	4629      	mov	r1, r5
 8006296:	f7fa f92f 	bl	80004f8 <__aeabi_dmul>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7fa f929 	bl	80004f8 <__aeabi_dmul>
 80062a6:	a340      	add	r3, pc, #256	; (adr r3, 80063a8 <__ieee754_pow+0x3c8>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7fa f924 	bl	80004f8 <__aeabi_dmul>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4650      	mov	r0, sl
 80062b6:	4659      	mov	r1, fp
 80062b8:	f7f9 ff66 	bl	8000188 <__aeabi_dsub>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f7f9 ff60 	bl	800018c <__adddf3>
 80062cc:	2000      	movs	r0, #0
 80062ce:	4632      	mov	r2, r6
 80062d0:	463b      	mov	r3, r7
 80062d2:	4682      	mov	sl, r0
 80062d4:	468b      	mov	fp, r1
 80062d6:	f7f9 ff57 	bl	8000188 <__aeabi_dsub>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7f9 ff51 	bl	8000188 <__aeabi_dsub>
 80062e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ee:	3b01      	subs	r3, #1
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f04f 0600 	mov.w	r6, #0
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	bf0c      	ite	eq
 80062fc:	4b2f      	ldreq	r3, [pc, #188]	; (80063bc <__ieee754_pow+0x3dc>)
 80062fe:	4b2c      	ldrne	r3, [pc, #176]	; (80063b0 <__ieee754_pow+0x3d0>)
 8006300:	4604      	mov	r4, r0
 8006302:	460d      	mov	r5, r1
 8006304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006308:	e9cd 2300 	strd	r2, r3, [sp]
 800630c:	4632      	mov	r2, r6
 800630e:	463b      	mov	r3, r7
 8006310:	f7f9 ff3a 	bl	8000188 <__aeabi_dsub>
 8006314:	4652      	mov	r2, sl
 8006316:	465b      	mov	r3, fp
 8006318:	f7fa f8ee 	bl	80004f8 <__aeabi_dmul>
 800631c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006320:	4680      	mov	r8, r0
 8006322:	4689      	mov	r9, r1
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7fa f8e6 	bl	80004f8 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4640      	mov	r0, r8
 8006332:	4649      	mov	r1, r9
 8006334:	f7f9 ff2a 	bl	800018c <__adddf3>
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	4680      	mov	r8, r0
 800633e:	4689      	mov	r9, r1
 8006340:	4650      	mov	r0, sl
 8006342:	4659      	mov	r1, fp
 8006344:	f7fa f8d8 	bl	80004f8 <__aeabi_dmul>
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	460b      	mov	r3, r1
 800634e:	4602      	mov	r2, r0
 8006350:	4649      	mov	r1, r9
 8006352:	4640      	mov	r0, r8
 8006354:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006358:	f7f9 ff18 	bl	800018c <__adddf3>
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <__ieee754_pow+0x3e0>)
 800635e:	4682      	mov	sl, r0
 8006360:	4299      	cmp	r1, r3
 8006362:	460f      	mov	r7, r1
 8006364:	460e      	mov	r6, r1
 8006366:	f340 82e7 	ble.w	8006938 <__ieee754_pow+0x958>
 800636a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800636e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006372:	4303      	orrs	r3, r0
 8006374:	f000 81e2 	beq.w	800673c <__ieee754_pow+0x75c>
 8006378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800637c:	2200      	movs	r2, #0
 800637e:	2300      	movs	r3, #0
 8006380:	f7fa fb2c 	bl	80009dc <__aeabi_dcmplt>
 8006384:	3800      	subs	r0, #0
 8006386:	bf18      	it	ne
 8006388:	2001      	movne	r0, #1
 800638a:	e72f      	b.n	80061ec <__ieee754_pow+0x20c>
 800638c:	f3af 8000 	nop.w
 8006390:	60000000 	.word	0x60000000
 8006394:	3ff71547 	.word	0x3ff71547
 8006398:	f85ddf44 	.word	0xf85ddf44
 800639c:	3e54ae0b 	.word	0x3e54ae0b
 80063a0:	55555555 	.word	0x55555555
 80063a4:	3fd55555 	.word	0x3fd55555
 80063a8:	652b82fe 	.word	0x652b82fe
 80063ac:	3ff71547 	.word	0x3ff71547
 80063b0:	3ff00000 	.word	0x3ff00000
 80063b4:	3fd00000 	.word	0x3fd00000
 80063b8:	3fe00000 	.word	0x3fe00000
 80063bc:	bff00000 	.word	0xbff00000
 80063c0:	408fffff 	.word	0x408fffff
 80063c4:	4bd4      	ldr	r3, [pc, #848]	; (8006718 <__ieee754_pow+0x738>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	402b      	ands	r3, r5
 80063ca:	b943      	cbnz	r3, 80063de <__ieee754_pow+0x3fe>
 80063cc:	4658      	mov	r0, fp
 80063ce:	4661      	mov	r1, ip
 80063d0:	4bd2      	ldr	r3, [pc, #840]	; (800671c <__ieee754_pow+0x73c>)
 80063d2:	f7fa f891 	bl	80004f8 <__aeabi_dmul>
 80063d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80063da:	4683      	mov	fp, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	1523      	asrs	r3, r4, #20
 80063e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063e4:	4413      	add	r3, r2
 80063e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e8:	4bcd      	ldr	r3, [pc, #820]	; (8006720 <__ieee754_pow+0x740>)
 80063ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80063f2:	429c      	cmp	r4, r3
 80063f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80063f8:	dd08      	ble.n	800640c <__ieee754_pow+0x42c>
 80063fa:	4bca      	ldr	r3, [pc, #808]	; (8006724 <__ieee754_pow+0x744>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	f340 8164 	ble.w	80066ca <__ieee754_pow+0x6ea>
 8006402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006404:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006408:	3301      	adds	r3, #1
 800640a:	930b      	str	r3, [sp, #44]	; 0x2c
 800640c:	2600      	movs	r6, #0
 800640e:	00f3      	lsls	r3, r6, #3
 8006410:	930d      	str	r3, [sp, #52]	; 0x34
 8006412:	4bc5      	ldr	r3, [pc, #788]	; (8006728 <__ieee754_pow+0x748>)
 8006414:	4658      	mov	r0, fp
 8006416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800641a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800641e:	4629      	mov	r1, r5
 8006420:	461a      	mov	r2, r3
 8006422:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006426:	4623      	mov	r3, r4
 8006428:	f7f9 feae 	bl	8000188 <__aeabi_dsub>
 800642c:	46da      	mov	sl, fp
 800642e:	462b      	mov	r3, r5
 8006430:	4652      	mov	r2, sl
 8006432:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006436:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800643a:	f7f9 fea7 	bl	800018c <__adddf3>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	2000      	movs	r0, #0
 8006444:	49b9      	ldr	r1, [pc, #740]	; (800672c <__ieee754_pow+0x74c>)
 8006446:	f7fa f981 	bl	800074c <__aeabi_ddiv>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006452:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006456:	f7fa f84f 	bl	80004f8 <__aeabi_dmul>
 800645a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800645e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006462:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006466:	2300      	movs	r3, #0
 8006468:	2200      	movs	r2, #0
 800646a:	46ab      	mov	fp, r5
 800646c:	106d      	asrs	r5, r5, #1
 800646e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006478:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800647c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006480:	4640      	mov	r0, r8
 8006482:	4649      	mov	r1, r9
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	f7fa f836 	bl	80004f8 <__aeabi_dmul>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006494:	f7f9 fe78 	bl	8000188 <__aeabi_dsub>
 8006498:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800649c:	4606      	mov	r6, r0
 800649e:	460f      	mov	r7, r1
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 fe70 	bl	8000188 <__aeabi_dsub>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4650      	mov	r0, sl
 80064ae:	4659      	mov	r1, fp
 80064b0:	f7f9 fe6a 	bl	8000188 <__aeabi_dsub>
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	f7fa f81e 	bl	80004f8 <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7f9 fe60 	bl	8000188 <__aeabi_dsub>
 80064c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064cc:	f7fa f814 	bl	80004f8 <__aeabi_dmul>
 80064d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064d4:	4682      	mov	sl, r0
 80064d6:	468b      	mov	fp, r1
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	f7fa f80c 	bl	80004f8 <__aeabi_dmul>
 80064e0:	a37b      	add	r3, pc, #492	; (adr r3, 80066d0 <__ieee754_pow+0x6f0>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	4604      	mov	r4, r0
 80064e8:	460d      	mov	r5, r1
 80064ea:	f7fa f805 	bl	80004f8 <__aeabi_dmul>
 80064ee:	a37a      	add	r3, pc, #488	; (adr r3, 80066d8 <__ieee754_pow+0x6f8>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7f9 fe4a 	bl	800018c <__adddf3>
 80064f8:	4622      	mov	r2, r4
 80064fa:	462b      	mov	r3, r5
 80064fc:	f7f9 fffc 	bl	80004f8 <__aeabi_dmul>
 8006500:	a377      	add	r3, pc, #476	; (adr r3, 80066e0 <__ieee754_pow+0x700>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7f9 fe41 	bl	800018c <__adddf3>
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	f7f9 fff3 	bl	80004f8 <__aeabi_dmul>
 8006512:	a375      	add	r3, pc, #468	; (adr r3, 80066e8 <__ieee754_pow+0x708>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7f9 fe38 	bl	800018c <__adddf3>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7f9 ffea 	bl	80004f8 <__aeabi_dmul>
 8006524:	a372      	add	r3, pc, #456	; (adr r3, 80066f0 <__ieee754_pow+0x710>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7f9 fe2f 	bl	800018c <__adddf3>
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	f7f9 ffe1 	bl	80004f8 <__aeabi_dmul>
 8006536:	a370      	add	r3, pc, #448	; (adr r3, 80066f8 <__ieee754_pow+0x718>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 fe26 	bl	800018c <__adddf3>
 8006540:	4622      	mov	r2, r4
 8006542:	4606      	mov	r6, r0
 8006544:	460f      	mov	r7, r1
 8006546:	462b      	mov	r3, r5
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7f9 ffd4 	bl	80004f8 <__aeabi_dmul>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7f9 ffce 	bl	80004f8 <__aeabi_dmul>
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	f7f9 fe10 	bl	800018c <__adddf3>
 800656c:	4652      	mov	r2, sl
 800656e:	465b      	mov	r3, fp
 8006570:	f7f9 ffc2 	bl	80004f8 <__aeabi_dmul>
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	f7f9 fe08 	bl	800018c <__adddf3>
 800657c:	4642      	mov	r2, r8
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	464b      	mov	r3, r9
 8006584:	4640      	mov	r0, r8
 8006586:	4649      	mov	r1, r9
 8006588:	f7f9 ffb6 	bl	80004f8 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006594:	2200      	movs	r2, #0
 8006596:	4b66      	ldr	r3, [pc, #408]	; (8006730 <__ieee754_pow+0x750>)
 8006598:	f7f9 fdf8 	bl	800018c <__adddf3>
 800659c:	4632      	mov	r2, r6
 800659e:	463b      	mov	r3, r7
 80065a0:	f7f9 fdf4 	bl	800018c <__adddf3>
 80065a4:	2400      	movs	r4, #0
 80065a6:	460d      	mov	r5, r1
 80065a8:	4622      	mov	r2, r4
 80065aa:	460b      	mov	r3, r1
 80065ac:	4640      	mov	r0, r8
 80065ae:	4649      	mov	r1, r9
 80065b0:	f7f9 ffa2 	bl	80004f8 <__aeabi_dmul>
 80065b4:	2200      	movs	r2, #0
 80065b6:	4680      	mov	r8, r0
 80065b8:	4689      	mov	r9, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	4b5c      	ldr	r3, [pc, #368]	; (8006730 <__ieee754_pow+0x750>)
 80065c0:	f7f9 fde2 	bl	8000188 <__aeabi_dsub>
 80065c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065c8:	f7f9 fdde 	bl	8000188 <__aeabi_dsub>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4630      	mov	r0, r6
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7f9 fdd8 	bl	8000188 <__aeabi_dsub>
 80065d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065dc:	f7f9 ff8c 	bl	80004f8 <__aeabi_dmul>
 80065e0:	4622      	mov	r2, r4
 80065e2:	4606      	mov	r6, r0
 80065e4:	460f      	mov	r7, r1
 80065e6:	462b      	mov	r3, r5
 80065e8:	4650      	mov	r0, sl
 80065ea:	4659      	mov	r1, fp
 80065ec:	f7f9 ff84 	bl	80004f8 <__aeabi_dmul>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7f9 fdc8 	bl	800018c <__adddf3>
 80065fc:	2400      	movs	r4, #0
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4640      	mov	r0, r8
 8006608:	4649      	mov	r1, r9
 800660a:	f7f9 fdbf 	bl	800018c <__adddf3>
 800660e:	a33c      	add	r3, pc, #240	; (adr r3, 8006700 <__ieee754_pow+0x720>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	4620      	mov	r0, r4
 8006616:	460d      	mov	r5, r1
 8006618:	f7f9 ff6e 	bl	80004f8 <__aeabi_dmul>
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	f7f9 fdae 	bl	8000188 <__aeabi_dsub>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7f9 fda8 	bl	8000188 <__aeabi_dsub>
 8006638:	a333      	add	r3, pc, #204	; (adr r3, 8006708 <__ieee754_pow+0x728>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 ff5b 	bl	80004f8 <__aeabi_dmul>
 8006642:	a333      	add	r3, pc, #204	; (adr r3, 8006710 <__ieee754_pow+0x730>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7f9 ff52 	bl	80004f8 <__aeabi_dmul>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	f7f9 fd96 	bl	800018c <__adddf3>
 8006660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006662:	4b34      	ldr	r3, [pc, #208]	; (8006734 <__ieee754_pow+0x754>)
 8006664:	4413      	add	r3, r2
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 fd8f 	bl	800018c <__adddf3>
 800666e:	4680      	mov	r8, r0
 8006670:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006672:	4689      	mov	r9, r1
 8006674:	f7f9 fed6 	bl	8000424 <__aeabi_i2d>
 8006678:	4604      	mov	r4, r0
 800667a:	460d      	mov	r5, r1
 800667c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006682:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <__ieee754_pow+0x758>)
 8006684:	4413      	add	r3, r2
 8006686:	e9d3 6700 	ldrd	r6, r7, [r3]
 800668a:	4642      	mov	r2, r8
 800668c:	464b      	mov	r3, r9
 800668e:	f7f9 fd7d 	bl	800018c <__adddf3>
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	f7f9 fd79 	bl	800018c <__adddf3>
 800669a:	4622      	mov	r2, r4
 800669c:	462b      	mov	r3, r5
 800669e:	f7f9 fd75 	bl	800018c <__adddf3>
 80066a2:	2000      	movs	r0, #0
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	4682      	mov	sl, r0
 80066aa:	468b      	mov	fp, r1
 80066ac:	f7f9 fd6c 	bl	8000188 <__aeabi_dsub>
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	f7f9 fd68 	bl	8000188 <__aeabi_dsub>
 80066b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066bc:	f7f9 fd64 	bl	8000188 <__aeabi_dsub>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	e60b      	b.n	80062e2 <__ieee754_pow+0x302>
 80066ca:	2601      	movs	r6, #1
 80066cc:	e69f      	b.n	800640e <__ieee754_pow+0x42e>
 80066ce:	bf00      	nop
 80066d0:	4a454eef 	.word	0x4a454eef
 80066d4:	3fca7e28 	.word	0x3fca7e28
 80066d8:	93c9db65 	.word	0x93c9db65
 80066dc:	3fcd864a 	.word	0x3fcd864a
 80066e0:	a91d4101 	.word	0xa91d4101
 80066e4:	3fd17460 	.word	0x3fd17460
 80066e8:	518f264d 	.word	0x518f264d
 80066ec:	3fd55555 	.word	0x3fd55555
 80066f0:	db6fabff 	.word	0xdb6fabff
 80066f4:	3fdb6db6 	.word	0x3fdb6db6
 80066f8:	33333303 	.word	0x33333303
 80066fc:	3fe33333 	.word	0x3fe33333
 8006700:	e0000000 	.word	0xe0000000
 8006704:	3feec709 	.word	0x3feec709
 8006708:	dc3a03fd 	.word	0xdc3a03fd
 800670c:	3feec709 	.word	0x3feec709
 8006710:	145b01f5 	.word	0x145b01f5
 8006714:	be3e2fe0 	.word	0xbe3e2fe0
 8006718:	7ff00000 	.word	0x7ff00000
 800671c:	43400000 	.word	0x43400000
 8006720:	0003988e 	.word	0x0003988e
 8006724:	000bb679 	.word	0x000bb679
 8006728:	080077a0 	.word	0x080077a0
 800672c:	3ff00000 	.word	0x3ff00000
 8006730:	40080000 	.word	0x40080000
 8006734:	080077c0 	.word	0x080077c0
 8006738:	080077b0 	.word	0x080077b0
 800673c:	a39c      	add	r3, pc, #624	; (adr r3, 80069b0 <__ieee754_pow+0x9d0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	4640      	mov	r0, r8
 8006744:	4649      	mov	r1, r9
 8006746:	f7f9 fd21 	bl	800018c <__adddf3>
 800674a:	4622      	mov	r2, r4
 800674c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006750:	462b      	mov	r3, r5
 8006752:	4650      	mov	r0, sl
 8006754:	4639      	mov	r1, r7
 8006756:	f7f9 fd17 	bl	8000188 <__aeabi_dsub>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006762:	f7fa f959 	bl	8000a18 <__aeabi_dcmpgt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f47f ae06 	bne.w	8006378 <__ieee754_pow+0x398>
 800676c:	4aa2      	ldr	r2, [pc, #648]	; (80069f8 <__ieee754_pow+0xa18>)
 800676e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006772:	4293      	cmp	r3, r2
 8006774:	f340 8100 	ble.w	8006978 <__ieee754_pow+0x998>
 8006778:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800677c:	151b      	asrs	r3, r3, #20
 800677e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006782:	fa4a fa03 	asr.w	sl, sl, r3
 8006786:	44b2      	add	sl, r6
 8006788:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800678c:	489b      	ldr	r0, [pc, #620]	; (80069fc <__ieee754_pow+0xa1c>)
 800678e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006792:	4108      	asrs	r0, r1
 8006794:	ea00 030a 	and.w	r3, r0, sl
 8006798:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800679c:	f1c1 0114 	rsb	r1, r1, #20
 80067a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80067a4:	fa4a fa01 	asr.w	sl, sl, r1
 80067a8:	2e00      	cmp	r6, #0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	bfb8      	it	lt
 80067b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80067b8:	f7f9 fce6 	bl	8000188 <__aeabi_dsub>
 80067bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c4:	2400      	movs	r4, #0
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	f7f9 fcdf 	bl	800018c <__adddf3>
 80067ce:	a37a      	add	r3, pc, #488	; (adr r3, 80069b8 <__ieee754_pow+0x9d8>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	4620      	mov	r0, r4
 80067d6:	460d      	mov	r5, r1
 80067d8:	f7f9 fe8e 	bl	80004f8 <__aeabi_dmul>
 80067dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067e0:	4606      	mov	r6, r0
 80067e2:	460f      	mov	r7, r1
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 fcce 	bl	8000188 <__aeabi_dsub>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4640      	mov	r0, r8
 80067f2:	4649      	mov	r1, r9
 80067f4:	f7f9 fcc8 	bl	8000188 <__aeabi_dsub>
 80067f8:	a371      	add	r3, pc, #452	; (adr r3, 80069c0 <__ieee754_pow+0x9e0>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fe7b 	bl	80004f8 <__aeabi_dmul>
 8006802:	a371      	add	r3, pc, #452	; (adr r3, 80069c8 <__ieee754_pow+0x9e8>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	4680      	mov	r8, r0
 800680a:	4689      	mov	r9, r1
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	f7f9 fe72 	bl	80004f8 <__aeabi_dmul>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	f7f9 fcb6 	bl	800018c <__adddf3>
 8006820:	4604      	mov	r4, r0
 8006822:	460d      	mov	r5, r1
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7f9 fcae 	bl	800018c <__adddf3>
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	4680      	mov	r8, r0
 8006836:	4689      	mov	r9, r1
 8006838:	f7f9 fca6 	bl	8000188 <__aeabi_dsub>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4620      	mov	r0, r4
 8006842:	4629      	mov	r1, r5
 8006844:	f7f9 fca0 	bl	8000188 <__aeabi_dsub>
 8006848:	4642      	mov	r2, r8
 800684a:	4606      	mov	r6, r0
 800684c:	460f      	mov	r7, r1
 800684e:	464b      	mov	r3, r9
 8006850:	4640      	mov	r0, r8
 8006852:	4649      	mov	r1, r9
 8006854:	f7f9 fe50 	bl	80004f8 <__aeabi_dmul>
 8006858:	a35d      	add	r3, pc, #372	; (adr r3, 80069d0 <__ieee754_pow+0x9f0>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	4604      	mov	r4, r0
 8006860:	460d      	mov	r5, r1
 8006862:	f7f9 fe49 	bl	80004f8 <__aeabi_dmul>
 8006866:	a35c      	add	r3, pc, #368	; (adr r3, 80069d8 <__ieee754_pow+0x9f8>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fc8c 	bl	8000188 <__aeabi_dsub>
 8006870:	4622      	mov	r2, r4
 8006872:	462b      	mov	r3, r5
 8006874:	f7f9 fe40 	bl	80004f8 <__aeabi_dmul>
 8006878:	a359      	add	r3, pc, #356	; (adr r3, 80069e0 <__ieee754_pow+0xa00>)
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7f9 fc85 	bl	800018c <__adddf3>
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	f7f9 fe37 	bl	80004f8 <__aeabi_dmul>
 800688a:	a357      	add	r3, pc, #348	; (adr r3, 80069e8 <__ieee754_pow+0xa08>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f7f9 fc7a 	bl	8000188 <__aeabi_dsub>
 8006894:	4622      	mov	r2, r4
 8006896:	462b      	mov	r3, r5
 8006898:	f7f9 fe2e 	bl	80004f8 <__aeabi_dmul>
 800689c:	a354      	add	r3, pc, #336	; (adr r3, 80069f0 <__ieee754_pow+0xa10>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7f9 fc73 	bl	800018c <__adddf3>
 80068a6:	4622      	mov	r2, r4
 80068a8:	462b      	mov	r3, r5
 80068aa:	f7f9 fe25 	bl	80004f8 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4640      	mov	r0, r8
 80068b4:	4649      	mov	r1, r9
 80068b6:	f7f9 fc67 	bl	8000188 <__aeabi_dsub>
 80068ba:	4604      	mov	r4, r0
 80068bc:	460d      	mov	r5, r1
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4640      	mov	r0, r8
 80068c4:	4649      	mov	r1, r9
 80068c6:	f7f9 fe17 	bl	80004f8 <__aeabi_dmul>
 80068ca:	2200      	movs	r2, #0
 80068cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7f9 fc56 	bl	8000188 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e4:	f7f9 ff32 	bl	800074c <__aeabi_ddiv>
 80068e8:	4632      	mov	r2, r6
 80068ea:	4604      	mov	r4, r0
 80068ec:	460d      	mov	r5, r1
 80068ee:	463b      	mov	r3, r7
 80068f0:	4640      	mov	r0, r8
 80068f2:	4649      	mov	r1, r9
 80068f4:	f7f9 fe00 	bl	80004f8 <__aeabi_dmul>
 80068f8:	4632      	mov	r2, r6
 80068fa:	463b      	mov	r3, r7
 80068fc:	f7f9 fc46 	bl	800018c <__adddf3>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4620      	mov	r0, r4
 8006906:	4629      	mov	r1, r5
 8006908:	f7f9 fc3e 	bl	8000188 <__aeabi_dsub>
 800690c:	4642      	mov	r2, r8
 800690e:	464b      	mov	r3, r9
 8006910:	f7f9 fc3a 	bl	8000188 <__aeabi_dsub>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	2000      	movs	r0, #0
 800691a:	4939      	ldr	r1, [pc, #228]	; (8006a00 <__ieee754_pow+0xa20>)
 800691c:	f7f9 fc34 	bl	8000188 <__aeabi_dsub>
 8006920:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006924:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006928:	da29      	bge.n	800697e <__ieee754_pow+0x99e>
 800692a:	4652      	mov	r2, sl
 800692c:	f000 f8a0 	bl	8006a70 <scalbn>
 8006930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006934:	f7ff bbfd 	b.w	8006132 <__ieee754_pow+0x152>
 8006938:	4b32      	ldr	r3, [pc, #200]	; (8006a04 <__ieee754_pow+0xa24>)
 800693a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800693e:	429f      	cmp	r7, r3
 8006940:	f77f af14 	ble.w	800676c <__ieee754_pow+0x78c>
 8006944:	4b30      	ldr	r3, [pc, #192]	; (8006a08 <__ieee754_pow+0xa28>)
 8006946:	440b      	add	r3, r1
 8006948:	4303      	orrs	r3, r0
 800694a:	d009      	beq.n	8006960 <__ieee754_pow+0x980>
 800694c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006950:	2200      	movs	r2, #0
 8006952:	2300      	movs	r3, #0
 8006954:	f7fa f842 	bl	80009dc <__aeabi_dcmplt>
 8006958:	3800      	subs	r0, #0
 800695a:	bf18      	it	ne
 800695c:	2001      	movne	r0, #1
 800695e:	e452      	b.n	8006206 <__ieee754_pow+0x226>
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	f7f9 fc10 	bl	8000188 <__aeabi_dsub>
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	f7fa f84a 	bl	8000a04 <__aeabi_dcmpge>
 8006970:	2800      	cmp	r0, #0
 8006972:	f43f aefb 	beq.w	800676c <__ieee754_pow+0x78c>
 8006976:	e7e9      	b.n	800694c <__ieee754_pow+0x96c>
 8006978:	f04f 0a00 	mov.w	sl, #0
 800697c:	e720      	b.n	80067c0 <__ieee754_pow+0x7e0>
 800697e:	4621      	mov	r1, r4
 8006980:	e7d6      	b.n	8006930 <__ieee754_pow+0x950>
 8006982:	f04f 0b00 	mov.w	fp, #0
 8006986:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006a00 <__ieee754_pow+0xa20>
 800698a:	f7ff bbb9 	b.w	8006100 <__ieee754_pow+0x120>
 800698e:	f04f 0b00 	mov.w	fp, #0
 8006992:	f04f 0c00 	mov.w	ip, #0
 8006996:	f7ff bbb3 	b.w	8006100 <__ieee754_pow+0x120>
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7ff bb3c 	b.w	800601a <__ieee754_pow+0x3a>
 80069a2:	9200      	str	r2, [sp, #0]
 80069a4:	f7ff bb88 	b.w	80060b8 <__ieee754_pow+0xd8>
 80069a8:	2300      	movs	r3, #0
 80069aa:	f7ff bb72 	b.w	8006092 <__ieee754_pow+0xb2>
 80069ae:	bf00      	nop
 80069b0:	652b82fe 	.word	0x652b82fe
 80069b4:	3c971547 	.word	0x3c971547
 80069b8:	00000000 	.word	0x00000000
 80069bc:	3fe62e43 	.word	0x3fe62e43
 80069c0:	fefa39ef 	.word	0xfefa39ef
 80069c4:	3fe62e42 	.word	0x3fe62e42
 80069c8:	0ca86c39 	.word	0x0ca86c39
 80069cc:	be205c61 	.word	0xbe205c61
 80069d0:	72bea4d0 	.word	0x72bea4d0
 80069d4:	3e663769 	.word	0x3e663769
 80069d8:	c5d26bf1 	.word	0xc5d26bf1
 80069dc:	3ebbbd41 	.word	0x3ebbbd41
 80069e0:	af25de2c 	.word	0xaf25de2c
 80069e4:	3f11566a 	.word	0x3f11566a
 80069e8:	16bebd93 	.word	0x16bebd93
 80069ec:	3f66c16c 	.word	0x3f66c16c
 80069f0:	5555553e 	.word	0x5555553e
 80069f4:	3fc55555 	.word	0x3fc55555
 80069f8:	3fe00000 	.word	0x3fe00000
 80069fc:	fff00000 	.word	0xfff00000
 8006a00:	3ff00000 	.word	0x3ff00000
 8006a04:	4090cbff 	.word	0x4090cbff
 8006a08:	3f6f3400 	.word	0x3f6f3400

08006a0c <with_errno>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4604      	mov	r4, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	4616      	mov	r6, r2
 8006a14:	f7fd f97e 	bl	8003d14 <__errno>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	6006      	str	r6, [r0, #0]
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}

08006a20 <xflow>:
 8006a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a22:	4615      	mov	r5, r2
 8006a24:	461c      	mov	r4, r3
 8006a26:	b180      	cbz	r0, 8006a4a <xflow+0x2a>
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a2e:	e9cd 0100 	strd	r0, r1, [sp]
 8006a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a36:	4628      	mov	r0, r5
 8006a38:	4621      	mov	r1, r4
 8006a3a:	f7f9 fd5d 	bl	80004f8 <__aeabi_dmul>
 8006a3e:	2222      	movs	r2, #34	; 0x22
 8006a40:	b003      	add	sp, #12
 8006a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a46:	f7ff bfe1 	b.w	8006a0c <with_errno>
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	e7ee      	b.n	8006a2e <xflow+0xe>

08006a50 <__math_uflow>:
 8006a50:	2200      	movs	r2, #0
 8006a52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a56:	f7ff bfe3 	b.w	8006a20 <xflow>

08006a5a <__math_oflow>:
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006a60:	f7ff bfde 	b.w	8006a20 <xflow>

08006a64 <fabs>:
 8006a64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4770      	bx	lr
 8006a6c:	0000      	movs	r0, r0
	...

08006a70 <scalbn>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	4616      	mov	r6, r2
 8006a74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a78:	4604      	mov	r4, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	b992      	cbnz	r2, 8006aa6 <scalbn+0x36>
 8006a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a84:	4303      	orrs	r3, r0
 8006a86:	d03c      	beq.n	8006b02 <scalbn+0x92>
 8006a88:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <scalbn+0xe0>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f7f9 fd34 	bl	80004f8 <__aeabi_dmul>
 8006a90:	4b30      	ldr	r3, [pc, #192]	; (8006b54 <scalbn+0xe4>)
 8006a92:	4604      	mov	r4, r0
 8006a94:	429e      	cmp	r6, r3
 8006a96:	460d      	mov	r5, r1
 8006a98:	da0f      	bge.n	8006aba <scalbn+0x4a>
 8006a9a:	a329      	add	r3, pc, #164	; (adr r3, 8006b40 <scalbn+0xd0>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fd2a 	bl	80004f8 <__aeabi_dmul>
 8006aa4:	e006      	b.n	8006ab4 <scalbn+0x44>
 8006aa6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006aaa:	42ba      	cmp	r2, r7
 8006aac:	d109      	bne.n	8006ac2 <scalbn+0x52>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	f7f9 fb6c 	bl	800018c <__adddf3>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	e023      	b.n	8006b02 <scalbn+0x92>
 8006aba:	460b      	mov	r3, r1
 8006abc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ac0:	3a36      	subs	r2, #54	; 0x36
 8006ac2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006ac6:	428e      	cmp	r6, r1
 8006ac8:	dd0e      	ble.n	8006ae8 <scalbn+0x78>
 8006aca:	a31f      	add	r3, pc, #124	; (adr r3, 8006b48 <scalbn+0xd8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006ad4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006ad8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006adc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006ae0:	481d      	ldr	r0, [pc, #116]	; (8006b58 <scalbn+0xe8>)
 8006ae2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006ae6:	e7db      	b.n	8006aa0 <scalbn+0x30>
 8006ae8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006aec:	4432      	add	r2, r6
 8006aee:	428a      	cmp	r2, r1
 8006af0:	dceb      	bgt.n	8006aca <scalbn+0x5a>
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	dd08      	ble.n	8006b08 <scalbn+0x98>
 8006af6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006afa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006afe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b08:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b0c:	da0c      	bge.n	8006b28 <scalbn+0xb8>
 8006b0e:	a30c      	add	r3, pc, #48	; (adr r3, 8006b40 <scalbn+0xd0>)
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006b18:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006b1c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006b20:	480e      	ldr	r0, [pc, #56]	; (8006b5c <scalbn+0xec>)
 8006b22:	f041 011f 	orr.w	r1, r1, #31
 8006b26:	e7bb      	b.n	8006aa0 <scalbn+0x30>
 8006b28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b2c:	3236      	adds	r2, #54	; 0x36
 8006b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <scalbn+0xf0>)
 8006b3e:	e7af      	b.n	8006aa0 <scalbn+0x30>
 8006b40:	c2f8f359 	.word	0xc2f8f359
 8006b44:	01a56e1f 	.word	0x01a56e1f
 8006b48:	8800759c 	.word	0x8800759c
 8006b4c:	7e37e43c 	.word	0x7e37e43c
 8006b50:	43500000 	.word	0x43500000
 8006b54:	ffff3cb0 	.word	0xffff3cb0
 8006b58:	8800759c 	.word	0x8800759c
 8006b5c:	c2f8f359 	.word	0xc2f8f359
 8006b60:	3c900000 	.word	0x3c900000

08006b64 <_init>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr

08006b70 <_fini>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	bf00      	nop
 8006b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b76:	bc08      	pop	{r3}
 8006b78:	469e      	mov	lr, r3
 8006b7a:	4770      	bx	lr
